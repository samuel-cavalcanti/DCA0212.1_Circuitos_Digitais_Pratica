// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2019 18:50:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decision_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decision_controller_vlg_sample_tst(
	distance_front,
	distance_left,
	sampler_tx
);
input [8:0] distance_front;
input [8:0] distance_left;
output sampler_tx;

reg sample;
time current_time;
always @(distance_front or distance_left)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decision_controller_vlg_check_tst (
	left_motor,
	right_motor,
	sampler_rx
);
input  left_motor;
input  right_motor;
input sampler_rx;

reg  left_motor_expected;
reg  right_motor_expected;

reg  left_motor_prev;
reg  right_motor_prev;

reg  left_motor_expected_prev;
reg  right_motor_expected_prev;

reg  last_left_motor_exp;
reg  last_right_motor_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	left_motor_prev = left_motor;
	right_motor_prev = right_motor;
end

// update expected /o prevs

always @(trigger)
begin
	left_motor_expected_prev = left_motor_expected;
	right_motor_expected_prev = right_motor_expected;
end



// expected left_motor
initial
begin
	left_motor_expected = 1'bX;
end 

// expected right_motor
initial
begin
	right_motor_expected = 1'bX;
end 
// generate trigger
always @(left_motor_expected or left_motor or right_motor_expected or right_motor)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected left_motor = %b | expected right_motor = %b | ",left_motor_expected_prev,right_motor_expected_prev);
	$display("| real left_motor = %b | real right_motor = %b | ",left_motor_prev,right_motor_prev);
`endif
	if (
		( left_motor_expected_prev !== 1'bx ) && ( left_motor_prev !== left_motor_expected_prev )
		&& ((left_motor_expected_prev !== last_left_motor_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port left_motor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", left_motor_expected_prev);
		$display ("     Real value = %b", left_motor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_left_motor_exp = left_motor_expected_prev;
	end
	if (
		( right_motor_expected_prev !== 1'bx ) && ( right_motor_prev !== right_motor_expected_prev )
		&& ((right_motor_expected_prev !== last_right_motor_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port right_motor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", right_motor_expected_prev);
		$display ("     Real value = %b", right_motor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_right_motor_exp = right_motor_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decision_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [8:0] distance_front;
reg [8:0] distance_left;
// wires                                               
wire left_motor;
wire right_motor;

wire sampler;                             

// assign statements (if any)                          
decision_controller i1 (
// port map - connection between master ports and signals/registers   
	.distance_front(distance_front),
	.distance_left(distance_left),
	.left_motor(left_motor),
	.right_motor(right_motor)
);
// distance_front[ 8 ]
initial
begin
	distance_front[8] = 1'b0;
end 
// distance_front[ 7 ]
initial
begin
	distance_front[7] = 1'b0;
end 
// distance_front[ 6 ]
initial
begin
	distance_front[6] = 1'b0;
end 
// distance_front[ 5 ]
initial
begin
	distance_front[5] = 1'b0;
end 
// distance_front[ 4 ]
initial
begin
	distance_front[4] = 1'b0;
end 
// distance_front[ 3 ]
initial
begin
	distance_front[3] = 1'b0;
end 
// distance_front[ 2 ]
initial
begin
	distance_front[2] = 1'b0;
end 
// distance_front[ 1 ]
initial
begin
	distance_front[1] = 1'b1;
end 
// distance_front[ 0 ]
initial
begin
	distance_front[0] = 1'b0;
end 
// distance_left[ 8 ]
initial
begin
	distance_left[8] = 1'b0;
end 
// distance_left[ 7 ]
initial
begin
	distance_left[7] = 1'b0;
end 
// distance_left[ 6 ]
initial
begin
	distance_left[6] = 1'b0;
end 
// distance_left[ 5 ]
initial
begin
	distance_left[5] = 1'b0;
end 
// distance_left[ 4 ]
initial
begin
	distance_left[4] = 1'b1;
end 
// distance_left[ 3 ]
initial
begin
	distance_left[3] = 1'b0;
end 
// distance_left[ 2 ]
initial
begin
	distance_left[2] = 1'b1;
end 
// distance_left[ 1 ]
initial
begin
	distance_left[1] = 1'b0;
end 
// distance_left[ 0 ]
initial
begin
	distance_left[0] = 1'b0;
end 

decision_controller_vlg_sample_tst tb_sample (
	.distance_front(distance_front),
	.distance_left(distance_left),
	.sampler_tx(sampler)
);

decision_controller_vlg_check_tst tb_out(
	.left_motor(left_motor),
	.right_motor(right_motor),
	.sampler_rx(sampler)
);
endmodule

