// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2019 03:47:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processador_programavel
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_programavel_vlg_sample_tst(
	clock,
	sampler_tx
);
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processador_programavel_vlg_check_tst (
	estado_atual_debug,
	habilitar_escrita_no_banco_debug,
	saida_ALU,
	saida_banco_2,
	saida_comprador,
	saida_memoria_de_dados,
	saida_memoria_de_instrucoes,
	sampler_rx
);
input [2:0] estado_atual_debug;
input  habilitar_escrita_no_banco_debug;
input [15:0] saida_ALU;
input [15:0] saida_banco_2;
input  saida_comprador;
input [15:0] saida_memoria_de_dados;
input [15:0] saida_memoria_de_instrucoes;
input sampler_rx;

reg [2:0] estado_atual_debug_expected;
reg  habilitar_escrita_no_banco_debug_expected;
reg [15:0] saida_ALU_expected;
reg [15:0] saida_banco_2_expected;
reg  saida_comprador_expected;
reg [15:0] saida_memoria_de_dados_expected;
reg [15:0] saida_memoria_de_instrucoes_expected;

reg [2:0] estado_atual_debug_prev;
reg  habilitar_escrita_no_banco_debug_prev;
reg [15:0] saida_ALU_prev;
reg [15:0] saida_banco_2_prev;
reg  saida_comprador_prev;
reg [15:0] saida_memoria_de_dados_prev;
reg [15:0] saida_memoria_de_instrucoes_prev;

reg [2:0] estado_atual_debug_expected_prev;
reg  habilitar_escrita_no_banco_debug_expected_prev;
reg [15:0] saida_ALU_expected_prev;
reg [15:0] saida_banco_2_expected_prev;
reg  saida_comprador_expected_prev;
reg [15:0] saida_memoria_de_dados_expected_prev;
reg [15:0] saida_memoria_de_instrucoes_expected_prev;

reg [2:0] last_estado_atual_debug_exp;
reg  last_habilitar_escrita_no_banco_debug_exp;
reg [15:0] last_saida_ALU_exp;
reg [15:0] last_saida_banco_2_exp;
reg  last_saida_comprador_exp;
reg [15:0] last_saida_memoria_de_dados_exp;
reg [15:0] last_saida_memoria_de_instrucoes_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	estado_atual_debug_prev = estado_atual_debug;
	habilitar_escrita_no_banco_debug_prev = habilitar_escrita_no_banco_debug;
	saida_ALU_prev = saida_ALU;
	saida_banco_2_prev = saida_banco_2;
	saida_comprador_prev = saida_comprador;
	saida_memoria_de_dados_prev = saida_memoria_de_dados;
	saida_memoria_de_instrucoes_prev = saida_memoria_de_instrucoes;
end

// update expected /o prevs

always @(trigger)
begin
	estado_atual_debug_expected_prev = estado_atual_debug_expected;
	habilitar_escrita_no_banco_debug_expected_prev = habilitar_escrita_no_banco_debug_expected;
	saida_ALU_expected_prev = saida_ALU_expected;
	saida_banco_2_expected_prev = saida_banco_2_expected;
	saida_comprador_expected_prev = saida_comprador_expected;
	saida_memoria_de_dados_expected_prev = saida_memoria_de_dados_expected;
	saida_memoria_de_instrucoes_expected_prev = saida_memoria_de_instrucoes_expected;
end


// expected saida_ALU[ 15 ]
initial
begin
	saida_ALU_expected[15] = 1'bX;
end 
// expected saida_ALU[ 14 ]
initial
begin
	saida_ALU_expected[14] = 1'bX;
end 
// expected saida_ALU[ 13 ]
initial
begin
	saida_ALU_expected[13] = 1'bX;
end 
// expected saida_ALU[ 12 ]
initial
begin
	saida_ALU_expected[12] = 1'bX;
end 
// expected saida_ALU[ 11 ]
initial
begin
	saida_ALU_expected[11] = 1'bX;
end 
// expected saida_ALU[ 10 ]
initial
begin
	saida_ALU_expected[10] = 1'bX;
end 
// expected saida_ALU[ 9 ]
initial
begin
	saida_ALU_expected[9] = 1'bX;
end 
// expected saida_ALU[ 8 ]
initial
begin
	saida_ALU_expected[8] = 1'bX;
end 
// expected saida_ALU[ 7 ]
initial
begin
	saida_ALU_expected[7] = 1'bX;
end 
// expected saida_ALU[ 6 ]
initial
begin
	saida_ALU_expected[6] = 1'bX;
end 
// expected saida_ALU[ 5 ]
initial
begin
	saida_ALU_expected[5] = 1'bX;
end 
// expected saida_ALU[ 4 ]
initial
begin
	saida_ALU_expected[4] = 1'bX;
end 
// expected saida_ALU[ 3 ]
initial
begin
	saida_ALU_expected[3] = 1'bX;
end 
// expected saida_ALU[ 2 ]
initial
begin
	saida_ALU_expected[2] = 1'bX;
end 
// expected saida_ALU[ 1 ]
initial
begin
	saida_ALU_expected[1] = 1'bX;
end 
// expected saida_ALU[ 0 ]
initial
begin
	saida_ALU_expected[0] = 1'bX;
end 
// expected saida_memoria_de_dados[ 15 ]
initial
begin
	saida_memoria_de_dados_expected[15] = 1'bX;
end 
// expected saida_memoria_de_dados[ 14 ]
initial
begin
	saida_memoria_de_dados_expected[14] = 1'bX;
end 
// expected saida_memoria_de_dados[ 13 ]
initial
begin
	saida_memoria_de_dados_expected[13] = 1'bX;
end 
// expected saida_memoria_de_dados[ 12 ]
initial
begin
	saida_memoria_de_dados_expected[12] = 1'bX;
end 
// expected saida_memoria_de_dados[ 11 ]
initial
begin
	saida_memoria_de_dados_expected[11] = 1'bX;
end 
// expected saida_memoria_de_dados[ 10 ]
initial
begin
	saida_memoria_de_dados_expected[10] = 1'bX;
end 
// expected saida_memoria_de_dados[ 9 ]
initial
begin
	saida_memoria_de_dados_expected[9] = 1'bX;
end 
// expected saida_memoria_de_dados[ 8 ]
initial
begin
	saida_memoria_de_dados_expected[8] = 1'bX;
end 
// expected saida_memoria_de_dados[ 7 ]
initial
begin
	saida_memoria_de_dados_expected[7] = 1'bX;
end 
// expected saida_memoria_de_dados[ 6 ]
initial
begin
	saida_memoria_de_dados_expected[6] = 1'bX;
end 
// expected saida_memoria_de_dados[ 5 ]
initial
begin
	saida_memoria_de_dados_expected[5] = 1'bX;
end 
// expected saida_memoria_de_dados[ 4 ]
initial
begin
	saida_memoria_de_dados_expected[4] = 1'bX;
end 
// expected saida_memoria_de_dados[ 3 ]
initial
begin
	saida_memoria_de_dados_expected[3] = 1'bX;
end 
// expected saida_memoria_de_dados[ 2 ]
initial
begin
	saida_memoria_de_dados_expected[2] = 1'bX;
end 
// expected saida_memoria_de_dados[ 1 ]
initial
begin
	saida_memoria_de_dados_expected[1] = 1'bX;
end 
// expected saida_memoria_de_dados[ 0 ]
initial
begin
	saida_memoria_de_dados_expected[0] = 1'bX;
end 
// expected saida_banco_2[ 15 ]
initial
begin
	saida_banco_2_expected[15] = 1'bX;
end 
// expected saida_banco_2[ 14 ]
initial
begin
	saida_banco_2_expected[14] = 1'bX;
end 
// expected saida_banco_2[ 13 ]
initial
begin
	saida_banco_2_expected[13] = 1'bX;
end 
// expected saida_banco_2[ 12 ]
initial
begin
	saida_banco_2_expected[12] = 1'bX;
end 
// expected saida_banco_2[ 11 ]
initial
begin
	saida_banco_2_expected[11] = 1'bX;
end 
// expected saida_banco_2[ 10 ]
initial
begin
	saida_banco_2_expected[10] = 1'bX;
end 
// expected saida_banco_2[ 9 ]
initial
begin
	saida_banco_2_expected[9] = 1'bX;
end 
// expected saida_banco_2[ 8 ]
initial
begin
	saida_banco_2_expected[8] = 1'bX;
end 
// expected saida_banco_2[ 7 ]
initial
begin
	saida_banco_2_expected[7] = 1'bX;
end 
// expected saida_banco_2[ 6 ]
initial
begin
	saida_banco_2_expected[6] = 1'bX;
end 
// expected saida_banco_2[ 5 ]
initial
begin
	saida_banco_2_expected[5] = 1'bX;
end 
// expected saida_banco_2[ 4 ]
initial
begin
	saida_banco_2_expected[4] = 1'bX;
end 
// expected saida_banco_2[ 3 ]
initial
begin
	saida_banco_2_expected[3] = 1'bX;
end 
// expected saida_banco_2[ 2 ]
initial
begin
	saida_banco_2_expected[2] = 1'bX;
end 
// expected saida_banco_2[ 1 ]
initial
begin
	saida_banco_2_expected[1] = 1'bX;
end 
// expected saida_banco_2[ 0 ]
initial
begin
	saida_banco_2_expected[0] = 1'bX;
end 

// expected saida_comprador
initial
begin
	saida_comprador_expected = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 15 ]
initial
begin
	saida_memoria_de_instrucoes_expected[15] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 14 ]
initial
begin
	saida_memoria_de_instrucoes_expected[14] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 13 ]
initial
begin
	saida_memoria_de_instrucoes_expected[13] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 12 ]
initial
begin
	saida_memoria_de_instrucoes_expected[12] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 11 ]
initial
begin
	saida_memoria_de_instrucoes_expected[11] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 10 ]
initial
begin
	saida_memoria_de_instrucoes_expected[10] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 9 ]
initial
begin
	saida_memoria_de_instrucoes_expected[9] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 8 ]
initial
begin
	saida_memoria_de_instrucoes_expected[8] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 7 ]
initial
begin
	saida_memoria_de_instrucoes_expected[7] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 6 ]
initial
begin
	saida_memoria_de_instrucoes_expected[6] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 5 ]
initial
begin
	saida_memoria_de_instrucoes_expected[5] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 4 ]
initial
begin
	saida_memoria_de_instrucoes_expected[4] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 3 ]
initial
begin
	saida_memoria_de_instrucoes_expected[3] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 2 ]
initial
begin
	saida_memoria_de_instrucoes_expected[2] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 1 ]
initial
begin
	saida_memoria_de_instrucoes_expected[1] = 1'bX;
end 
// expected saida_memoria_de_instrucoes[ 0 ]
initial
begin
	saida_memoria_de_instrucoes_expected[0] = 1'bX;
end 
// expected estado_atual_debug[ 2 ]
initial
begin
	estado_atual_debug_expected[2] = 1'bX;
end 
// expected estado_atual_debug[ 1 ]
initial
begin
	estado_atual_debug_expected[1] = 1'bX;
end 
// expected estado_atual_debug[ 0 ]
initial
begin
	estado_atual_debug_expected[0] = 1'bX;
end 

// expected habilitar_escrita_no_banco_debug
initial
begin
	habilitar_escrita_no_banco_debug_expected = 1'bX;
end 
// generate trigger
always @(estado_atual_debug_expected or estado_atual_debug or habilitar_escrita_no_banco_debug_expected or habilitar_escrita_no_banco_debug or saida_ALU_expected or saida_ALU or saida_banco_2_expected or saida_banco_2 or saida_comprador_expected or saida_comprador or saida_memoria_de_dados_expected or saida_memoria_de_dados or saida_memoria_de_instrucoes_expected or saida_memoria_de_instrucoes)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected estado_atual_debug = %b | expected habilitar_escrita_no_banco_debug = %b | expected saida_ALU = %b | expected saida_banco_2 = %b | expected saida_comprador = %b | expected saida_memoria_de_dados = %b | expected saida_memoria_de_instrucoes = %b | ",estado_atual_debug_expected_prev,habilitar_escrita_no_banco_debug_expected_prev,saida_ALU_expected_prev,saida_banco_2_expected_prev,saida_comprador_expected_prev,saida_memoria_de_dados_expected_prev,saida_memoria_de_instrucoes_expected_prev);
	$display("| real estado_atual_debug = %b | real habilitar_escrita_no_banco_debug = %b | real saida_ALU = %b | real saida_banco_2 = %b | real saida_comprador = %b | real saida_memoria_de_dados = %b | real saida_memoria_de_instrucoes = %b | ",estado_atual_debug_prev,habilitar_escrita_no_banco_debug_prev,saida_ALU_prev,saida_banco_2_prev,saida_comprador_prev,saida_memoria_de_dados_prev,saida_memoria_de_instrucoes_prev);
`endif
	if (
		( estado_atual_debug_expected_prev[0] !== 1'bx ) && ( estado_atual_debug_prev[0] !== estado_atual_debug_expected_prev[0] )
		&& ((estado_atual_debug_expected_prev[0] !== last_estado_atual_debug_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado_atual_debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_atual_debug_expected_prev);
		$display ("     Real value = %b", estado_atual_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_atual_debug_exp[0] = estado_atual_debug_expected_prev[0];
	end
	if (
		( estado_atual_debug_expected_prev[1] !== 1'bx ) && ( estado_atual_debug_prev[1] !== estado_atual_debug_expected_prev[1] )
		&& ((estado_atual_debug_expected_prev[1] !== last_estado_atual_debug_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado_atual_debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_atual_debug_expected_prev);
		$display ("     Real value = %b", estado_atual_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_atual_debug_exp[1] = estado_atual_debug_expected_prev[1];
	end
	if (
		( estado_atual_debug_expected_prev[2] !== 1'bx ) && ( estado_atual_debug_prev[2] !== estado_atual_debug_expected_prev[2] )
		&& ((estado_atual_debug_expected_prev[2] !== last_estado_atual_debug_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado_atual_debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_atual_debug_expected_prev);
		$display ("     Real value = %b", estado_atual_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_atual_debug_exp[2] = estado_atual_debug_expected_prev[2];
	end
	if (
		( habilitar_escrita_no_banco_debug_expected_prev !== 1'bx ) && ( habilitar_escrita_no_banco_debug_prev !== habilitar_escrita_no_banco_debug_expected_prev )
		&& ((habilitar_escrita_no_banco_debug_expected_prev !== last_habilitar_escrita_no_banco_debug_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port habilitar_escrita_no_banco_debug :: @time = %t",  $realtime);
		$display ("     Expected value = %b", habilitar_escrita_no_banco_debug_expected_prev);
		$display ("     Real value = %b", habilitar_escrita_no_banco_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_habilitar_escrita_no_banco_debug_exp = habilitar_escrita_no_banco_debug_expected_prev;
	end
	if (
		( saida_ALU_expected_prev[0] !== 1'bx ) && ( saida_ALU_prev[0] !== saida_ALU_expected_prev[0] )
		&& ((saida_ALU_expected_prev[0] !== last_saida_ALU_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[0] = saida_ALU_expected_prev[0];
	end
	if (
		( saida_ALU_expected_prev[1] !== 1'bx ) && ( saida_ALU_prev[1] !== saida_ALU_expected_prev[1] )
		&& ((saida_ALU_expected_prev[1] !== last_saida_ALU_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[1] = saida_ALU_expected_prev[1];
	end
	if (
		( saida_ALU_expected_prev[2] !== 1'bx ) && ( saida_ALU_prev[2] !== saida_ALU_expected_prev[2] )
		&& ((saida_ALU_expected_prev[2] !== last_saida_ALU_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[2] = saida_ALU_expected_prev[2];
	end
	if (
		( saida_ALU_expected_prev[3] !== 1'bx ) && ( saida_ALU_prev[3] !== saida_ALU_expected_prev[3] )
		&& ((saida_ALU_expected_prev[3] !== last_saida_ALU_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[3] = saida_ALU_expected_prev[3];
	end
	if (
		( saida_ALU_expected_prev[4] !== 1'bx ) && ( saida_ALU_prev[4] !== saida_ALU_expected_prev[4] )
		&& ((saida_ALU_expected_prev[4] !== last_saida_ALU_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[4] = saida_ALU_expected_prev[4];
	end
	if (
		( saida_ALU_expected_prev[5] !== 1'bx ) && ( saida_ALU_prev[5] !== saida_ALU_expected_prev[5] )
		&& ((saida_ALU_expected_prev[5] !== last_saida_ALU_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[5] = saida_ALU_expected_prev[5];
	end
	if (
		( saida_ALU_expected_prev[6] !== 1'bx ) && ( saida_ALU_prev[6] !== saida_ALU_expected_prev[6] )
		&& ((saida_ALU_expected_prev[6] !== last_saida_ALU_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[6] = saida_ALU_expected_prev[6];
	end
	if (
		( saida_ALU_expected_prev[7] !== 1'bx ) && ( saida_ALU_prev[7] !== saida_ALU_expected_prev[7] )
		&& ((saida_ALU_expected_prev[7] !== last_saida_ALU_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[7] = saida_ALU_expected_prev[7];
	end
	if (
		( saida_ALU_expected_prev[8] !== 1'bx ) && ( saida_ALU_prev[8] !== saida_ALU_expected_prev[8] )
		&& ((saida_ALU_expected_prev[8] !== last_saida_ALU_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[8] = saida_ALU_expected_prev[8];
	end
	if (
		( saida_ALU_expected_prev[9] !== 1'bx ) && ( saida_ALU_prev[9] !== saida_ALU_expected_prev[9] )
		&& ((saida_ALU_expected_prev[9] !== last_saida_ALU_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[9] = saida_ALU_expected_prev[9];
	end
	if (
		( saida_ALU_expected_prev[10] !== 1'bx ) && ( saida_ALU_prev[10] !== saida_ALU_expected_prev[10] )
		&& ((saida_ALU_expected_prev[10] !== last_saida_ALU_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[10] = saida_ALU_expected_prev[10];
	end
	if (
		( saida_ALU_expected_prev[11] !== 1'bx ) && ( saida_ALU_prev[11] !== saida_ALU_expected_prev[11] )
		&& ((saida_ALU_expected_prev[11] !== last_saida_ALU_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[11] = saida_ALU_expected_prev[11];
	end
	if (
		( saida_ALU_expected_prev[12] !== 1'bx ) && ( saida_ALU_prev[12] !== saida_ALU_expected_prev[12] )
		&& ((saida_ALU_expected_prev[12] !== last_saida_ALU_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[12] = saida_ALU_expected_prev[12];
	end
	if (
		( saida_ALU_expected_prev[13] !== 1'bx ) && ( saida_ALU_prev[13] !== saida_ALU_expected_prev[13] )
		&& ((saida_ALU_expected_prev[13] !== last_saida_ALU_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[13] = saida_ALU_expected_prev[13];
	end
	if (
		( saida_ALU_expected_prev[14] !== 1'bx ) && ( saida_ALU_prev[14] !== saida_ALU_expected_prev[14] )
		&& ((saida_ALU_expected_prev[14] !== last_saida_ALU_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[14] = saida_ALU_expected_prev[14];
	end
	if (
		( saida_ALU_expected_prev[15] !== 1'bx ) && ( saida_ALU_prev[15] !== saida_ALU_expected_prev[15] )
		&& ((saida_ALU_expected_prev[15] !== last_saida_ALU_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_ALU[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_ALU_expected_prev);
		$display ("     Real value = %b", saida_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_ALU_exp[15] = saida_ALU_expected_prev[15];
	end
	if (
		( saida_banco_2_expected_prev[0] !== 1'bx ) && ( saida_banco_2_prev[0] !== saida_banco_2_expected_prev[0] )
		&& ((saida_banco_2_expected_prev[0] !== last_saida_banco_2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[0] = saida_banco_2_expected_prev[0];
	end
	if (
		( saida_banco_2_expected_prev[1] !== 1'bx ) && ( saida_banco_2_prev[1] !== saida_banco_2_expected_prev[1] )
		&& ((saida_banco_2_expected_prev[1] !== last_saida_banco_2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[1] = saida_banco_2_expected_prev[1];
	end
	if (
		( saida_banco_2_expected_prev[2] !== 1'bx ) && ( saida_banco_2_prev[2] !== saida_banco_2_expected_prev[2] )
		&& ((saida_banco_2_expected_prev[2] !== last_saida_banco_2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[2] = saida_banco_2_expected_prev[2];
	end
	if (
		( saida_banco_2_expected_prev[3] !== 1'bx ) && ( saida_banco_2_prev[3] !== saida_banco_2_expected_prev[3] )
		&& ((saida_banco_2_expected_prev[3] !== last_saida_banco_2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[3] = saida_banco_2_expected_prev[3];
	end
	if (
		( saida_banco_2_expected_prev[4] !== 1'bx ) && ( saida_banco_2_prev[4] !== saida_banco_2_expected_prev[4] )
		&& ((saida_banco_2_expected_prev[4] !== last_saida_banco_2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[4] = saida_banco_2_expected_prev[4];
	end
	if (
		( saida_banco_2_expected_prev[5] !== 1'bx ) && ( saida_banco_2_prev[5] !== saida_banco_2_expected_prev[5] )
		&& ((saida_banco_2_expected_prev[5] !== last_saida_banco_2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[5] = saida_banco_2_expected_prev[5];
	end
	if (
		( saida_banco_2_expected_prev[6] !== 1'bx ) && ( saida_banco_2_prev[6] !== saida_banco_2_expected_prev[6] )
		&& ((saida_banco_2_expected_prev[6] !== last_saida_banco_2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[6] = saida_banco_2_expected_prev[6];
	end
	if (
		( saida_banco_2_expected_prev[7] !== 1'bx ) && ( saida_banco_2_prev[7] !== saida_banco_2_expected_prev[7] )
		&& ((saida_banco_2_expected_prev[7] !== last_saida_banco_2_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[7] = saida_banco_2_expected_prev[7];
	end
	if (
		( saida_banco_2_expected_prev[8] !== 1'bx ) && ( saida_banco_2_prev[8] !== saida_banco_2_expected_prev[8] )
		&& ((saida_banco_2_expected_prev[8] !== last_saida_banco_2_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[8] = saida_banco_2_expected_prev[8];
	end
	if (
		( saida_banco_2_expected_prev[9] !== 1'bx ) && ( saida_banco_2_prev[9] !== saida_banco_2_expected_prev[9] )
		&& ((saida_banco_2_expected_prev[9] !== last_saida_banco_2_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[9] = saida_banco_2_expected_prev[9];
	end
	if (
		( saida_banco_2_expected_prev[10] !== 1'bx ) && ( saida_banco_2_prev[10] !== saida_banco_2_expected_prev[10] )
		&& ((saida_banco_2_expected_prev[10] !== last_saida_banco_2_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[10] = saida_banco_2_expected_prev[10];
	end
	if (
		( saida_banco_2_expected_prev[11] !== 1'bx ) && ( saida_banco_2_prev[11] !== saida_banco_2_expected_prev[11] )
		&& ((saida_banco_2_expected_prev[11] !== last_saida_banco_2_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[11] = saida_banco_2_expected_prev[11];
	end
	if (
		( saida_banco_2_expected_prev[12] !== 1'bx ) && ( saida_banco_2_prev[12] !== saida_banco_2_expected_prev[12] )
		&& ((saida_banco_2_expected_prev[12] !== last_saida_banco_2_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[12] = saida_banco_2_expected_prev[12];
	end
	if (
		( saida_banco_2_expected_prev[13] !== 1'bx ) && ( saida_banco_2_prev[13] !== saida_banco_2_expected_prev[13] )
		&& ((saida_banco_2_expected_prev[13] !== last_saida_banco_2_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[13] = saida_banco_2_expected_prev[13];
	end
	if (
		( saida_banco_2_expected_prev[14] !== 1'bx ) && ( saida_banco_2_prev[14] !== saida_banco_2_expected_prev[14] )
		&& ((saida_banco_2_expected_prev[14] !== last_saida_banco_2_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[14] = saida_banco_2_expected_prev[14];
	end
	if (
		( saida_banco_2_expected_prev[15] !== 1'bx ) && ( saida_banco_2_prev[15] !== saida_banco_2_expected_prev[15] )
		&& ((saida_banco_2_expected_prev[15] !== last_saida_banco_2_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_banco_2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_banco_2_expected_prev);
		$display ("     Real value = %b", saida_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_banco_2_exp[15] = saida_banco_2_expected_prev[15];
	end
	if (
		( saida_comprador_expected_prev !== 1'bx ) && ( saida_comprador_prev !== saida_comprador_expected_prev )
		&& ((saida_comprador_expected_prev !== last_saida_comprador_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_comprador :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_comprador_expected_prev);
		$display ("     Real value = %b", saida_comprador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_comprador_exp = saida_comprador_expected_prev;
	end
	if (
		( saida_memoria_de_dados_expected_prev[0] !== 1'bx ) && ( saida_memoria_de_dados_prev[0] !== saida_memoria_de_dados_expected_prev[0] )
		&& ((saida_memoria_de_dados_expected_prev[0] !== last_saida_memoria_de_dados_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[0] = saida_memoria_de_dados_expected_prev[0];
	end
	if (
		( saida_memoria_de_dados_expected_prev[1] !== 1'bx ) && ( saida_memoria_de_dados_prev[1] !== saida_memoria_de_dados_expected_prev[1] )
		&& ((saida_memoria_de_dados_expected_prev[1] !== last_saida_memoria_de_dados_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[1] = saida_memoria_de_dados_expected_prev[1];
	end
	if (
		( saida_memoria_de_dados_expected_prev[2] !== 1'bx ) && ( saida_memoria_de_dados_prev[2] !== saida_memoria_de_dados_expected_prev[2] )
		&& ((saida_memoria_de_dados_expected_prev[2] !== last_saida_memoria_de_dados_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[2] = saida_memoria_de_dados_expected_prev[2];
	end
	if (
		( saida_memoria_de_dados_expected_prev[3] !== 1'bx ) && ( saida_memoria_de_dados_prev[3] !== saida_memoria_de_dados_expected_prev[3] )
		&& ((saida_memoria_de_dados_expected_prev[3] !== last_saida_memoria_de_dados_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[3] = saida_memoria_de_dados_expected_prev[3];
	end
	if (
		( saida_memoria_de_dados_expected_prev[4] !== 1'bx ) && ( saida_memoria_de_dados_prev[4] !== saida_memoria_de_dados_expected_prev[4] )
		&& ((saida_memoria_de_dados_expected_prev[4] !== last_saida_memoria_de_dados_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[4] = saida_memoria_de_dados_expected_prev[4];
	end
	if (
		( saida_memoria_de_dados_expected_prev[5] !== 1'bx ) && ( saida_memoria_de_dados_prev[5] !== saida_memoria_de_dados_expected_prev[5] )
		&& ((saida_memoria_de_dados_expected_prev[5] !== last_saida_memoria_de_dados_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[5] = saida_memoria_de_dados_expected_prev[5];
	end
	if (
		( saida_memoria_de_dados_expected_prev[6] !== 1'bx ) && ( saida_memoria_de_dados_prev[6] !== saida_memoria_de_dados_expected_prev[6] )
		&& ((saida_memoria_de_dados_expected_prev[6] !== last_saida_memoria_de_dados_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[6] = saida_memoria_de_dados_expected_prev[6];
	end
	if (
		( saida_memoria_de_dados_expected_prev[7] !== 1'bx ) && ( saida_memoria_de_dados_prev[7] !== saida_memoria_de_dados_expected_prev[7] )
		&& ((saida_memoria_de_dados_expected_prev[7] !== last_saida_memoria_de_dados_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[7] = saida_memoria_de_dados_expected_prev[7];
	end
	if (
		( saida_memoria_de_dados_expected_prev[8] !== 1'bx ) && ( saida_memoria_de_dados_prev[8] !== saida_memoria_de_dados_expected_prev[8] )
		&& ((saida_memoria_de_dados_expected_prev[8] !== last_saida_memoria_de_dados_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[8] = saida_memoria_de_dados_expected_prev[8];
	end
	if (
		( saida_memoria_de_dados_expected_prev[9] !== 1'bx ) && ( saida_memoria_de_dados_prev[9] !== saida_memoria_de_dados_expected_prev[9] )
		&& ((saida_memoria_de_dados_expected_prev[9] !== last_saida_memoria_de_dados_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[9] = saida_memoria_de_dados_expected_prev[9];
	end
	if (
		( saida_memoria_de_dados_expected_prev[10] !== 1'bx ) && ( saida_memoria_de_dados_prev[10] !== saida_memoria_de_dados_expected_prev[10] )
		&& ((saida_memoria_de_dados_expected_prev[10] !== last_saida_memoria_de_dados_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[10] = saida_memoria_de_dados_expected_prev[10];
	end
	if (
		( saida_memoria_de_dados_expected_prev[11] !== 1'bx ) && ( saida_memoria_de_dados_prev[11] !== saida_memoria_de_dados_expected_prev[11] )
		&& ((saida_memoria_de_dados_expected_prev[11] !== last_saida_memoria_de_dados_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[11] = saida_memoria_de_dados_expected_prev[11];
	end
	if (
		( saida_memoria_de_dados_expected_prev[12] !== 1'bx ) && ( saida_memoria_de_dados_prev[12] !== saida_memoria_de_dados_expected_prev[12] )
		&& ((saida_memoria_de_dados_expected_prev[12] !== last_saida_memoria_de_dados_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[12] = saida_memoria_de_dados_expected_prev[12];
	end
	if (
		( saida_memoria_de_dados_expected_prev[13] !== 1'bx ) && ( saida_memoria_de_dados_prev[13] !== saida_memoria_de_dados_expected_prev[13] )
		&& ((saida_memoria_de_dados_expected_prev[13] !== last_saida_memoria_de_dados_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[13] = saida_memoria_de_dados_expected_prev[13];
	end
	if (
		( saida_memoria_de_dados_expected_prev[14] !== 1'bx ) && ( saida_memoria_de_dados_prev[14] !== saida_memoria_de_dados_expected_prev[14] )
		&& ((saida_memoria_de_dados_expected_prev[14] !== last_saida_memoria_de_dados_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[14] = saida_memoria_de_dados_expected_prev[14];
	end
	if (
		( saida_memoria_de_dados_expected_prev[15] !== 1'bx ) && ( saida_memoria_de_dados_prev[15] !== saida_memoria_de_dados_expected_prev[15] )
		&& ((saida_memoria_de_dados_expected_prev[15] !== last_saida_memoria_de_dados_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_dados[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_dados_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_dados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_memoria_de_dados_exp[15] = saida_memoria_de_dados_expected_prev[15];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[0] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[0] !== saida_memoria_de_instrucoes_expected_prev[0] )
		&& ((saida_memoria_de_instrucoes_expected_prev[0] !== last_saida_memoria_de_instrucoes_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[0] = saida_memoria_de_instrucoes_expected_prev[0];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[1] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[1] !== saida_memoria_de_instrucoes_expected_prev[1] )
		&& ((saida_memoria_de_instrucoes_expected_prev[1] !== last_saida_memoria_de_instrucoes_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[1] = saida_memoria_de_instrucoes_expected_prev[1];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[2] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[2] !== saida_memoria_de_instrucoes_expected_prev[2] )
		&& ((saida_memoria_de_instrucoes_expected_prev[2] !== last_saida_memoria_de_instrucoes_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[2] = saida_memoria_de_instrucoes_expected_prev[2];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[3] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[3] !== saida_memoria_de_instrucoes_expected_prev[3] )
		&& ((saida_memoria_de_instrucoes_expected_prev[3] !== last_saida_memoria_de_instrucoes_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[3] = saida_memoria_de_instrucoes_expected_prev[3];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[4] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[4] !== saida_memoria_de_instrucoes_expected_prev[4] )
		&& ((saida_memoria_de_instrucoes_expected_prev[4] !== last_saida_memoria_de_instrucoes_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[4] = saida_memoria_de_instrucoes_expected_prev[4];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[5] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[5] !== saida_memoria_de_instrucoes_expected_prev[5] )
		&& ((saida_memoria_de_instrucoes_expected_prev[5] !== last_saida_memoria_de_instrucoes_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[5] = saida_memoria_de_instrucoes_expected_prev[5];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[6] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[6] !== saida_memoria_de_instrucoes_expected_prev[6] )
		&& ((saida_memoria_de_instrucoes_expected_prev[6] !== last_saida_memoria_de_instrucoes_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[6] = saida_memoria_de_instrucoes_expected_prev[6];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[7] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[7] !== saida_memoria_de_instrucoes_expected_prev[7] )
		&& ((saida_memoria_de_instrucoes_expected_prev[7] !== last_saida_memoria_de_instrucoes_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[7] = saida_memoria_de_instrucoes_expected_prev[7];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[8] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[8] !== saida_memoria_de_instrucoes_expected_prev[8] )
		&& ((saida_memoria_de_instrucoes_expected_prev[8] !== last_saida_memoria_de_instrucoes_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[8] = saida_memoria_de_instrucoes_expected_prev[8];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[9] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[9] !== saida_memoria_de_instrucoes_expected_prev[9] )
		&& ((saida_memoria_de_instrucoes_expected_prev[9] !== last_saida_memoria_de_instrucoes_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[9] = saida_memoria_de_instrucoes_expected_prev[9];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[10] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[10] !== saida_memoria_de_instrucoes_expected_prev[10] )
		&& ((saida_memoria_de_instrucoes_expected_prev[10] !== last_saida_memoria_de_instrucoes_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[10] = saida_memoria_de_instrucoes_expected_prev[10];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[11] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[11] !== saida_memoria_de_instrucoes_expected_prev[11] )
		&& ((saida_memoria_de_instrucoes_expected_prev[11] !== last_saida_memoria_de_instrucoes_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[11] = saida_memoria_de_instrucoes_expected_prev[11];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[12] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[12] !== saida_memoria_de_instrucoes_expected_prev[12] )
		&& ((saida_memoria_de_instrucoes_expected_prev[12] !== last_saida_memoria_de_instrucoes_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[12] = saida_memoria_de_instrucoes_expected_prev[12];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[13] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[13] !== saida_memoria_de_instrucoes_expected_prev[13] )
		&& ((saida_memoria_de_instrucoes_expected_prev[13] !== last_saida_memoria_de_instrucoes_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[13] = saida_memoria_de_instrucoes_expected_prev[13];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[14] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[14] !== saida_memoria_de_instrucoes_expected_prev[14] )
		&& ((saida_memoria_de_instrucoes_expected_prev[14] !== last_saida_memoria_de_instrucoes_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[14] = saida_memoria_de_instrucoes_expected_prev[14];
	end
	if (
		( saida_memoria_de_instrucoes_expected_prev[15] !== 1'bx ) && ( saida_memoria_de_instrucoes_prev[15] !== saida_memoria_de_instrucoes_expected_prev[15] )
		&& ((saida_memoria_de_instrucoes_expected_prev[15] !== last_saida_memoria_de_instrucoes_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_memoria_de_instrucoes[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", saida_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_memoria_de_instrucoes_exp[15] = saida_memoria_de_instrucoes_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processador_programavel_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire [2:0] estado_atual_debug;
wire habilitar_escrita_no_banco_debug;
wire [15:0] saida_ALU;
wire [15:0] saida_banco_2;
wire saida_comprador;
wire [15:0] saida_memoria_de_dados;
wire [15:0] saida_memoria_de_instrucoes;

wire sampler;                             

// assign statements (if any)                          
processador_programavel i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.estado_atual_debug(estado_atual_debug),
	.habilitar_escrita_no_banco_debug(habilitar_escrita_no_banco_debug),
	.saida_ALU(saida_ALU),
	.saida_banco_2(saida_banco_2),
	.saida_comprador(saida_comprador),
	.saida_memoria_de_dados(saida_memoria_de_dados),
	.saida_memoria_de_instrucoes(saida_memoria_de_instrucoes)
);

// clock
initial
begin
	repeat(7)
	begin
		clock = 1'b0;
		clock = #20000 1'b1;
		# 20000;
	end
	clock = 1'b0;
end 

processador_programavel_vlg_sample_tst tb_sample (
	.clock(clock),
	.sampler_tx(sampler)
);

processador_programavel_vlg_check_tst tb_out(
	.estado_atual_debug(estado_atual_debug),
	.habilitar_escrita_no_banco_debug(habilitar_escrita_no_banco_debug),
	.saida_ALU(saida_ALU),
	.saida_banco_2(saida_banco_2),
	.saida_comprador(saida_comprador),
	.saida_memoria_de_dados(saida_memoria_de_dados),
	.saida_memoria_de_instrucoes(saida_memoria_de_instrucoes),
	.sampler_rx(sampler)
);
endmodule

