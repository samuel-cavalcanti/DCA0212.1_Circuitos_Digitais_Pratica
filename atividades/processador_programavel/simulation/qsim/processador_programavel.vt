// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2019 03:11:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    registrador_de_instrucao
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module registrador_de_instrucao_vlg_sample_tst(
	carregar,
	dado_de_entrada,
	sampler_tx
);
input  carregar;
input [15:0] dado_de_entrada;
output sampler_tx;

reg sample;
time current_time;
always @(carregar or dado_de_entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module registrador_de_instrucao_vlg_check_tst (
	memoria,
	sampler_rx
);
input [15:0] memoria;
input sampler_rx;

reg [15:0] memoria_expected;

reg [15:0] memoria_prev;

reg [15:0] memoria_expected_prev;

reg [15:0] last_memoria_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	memoria_prev = memoria;
end

// update expected /o prevs

always @(trigger)
begin
	memoria_expected_prev = memoria_expected;
end


// expected memoria[ 15 ]
initial
begin
	memoria_expected[15] = 1'bX;
end 
// expected memoria[ 14 ]
initial
begin
	memoria_expected[14] = 1'bX;
end 
// expected memoria[ 13 ]
initial
begin
	memoria_expected[13] = 1'bX;
end 
// expected memoria[ 12 ]
initial
begin
	memoria_expected[12] = 1'bX;
end 
// expected memoria[ 11 ]
initial
begin
	memoria_expected[11] = 1'bX;
end 
// expected memoria[ 10 ]
initial
begin
	memoria_expected[10] = 1'bX;
end 
// expected memoria[ 9 ]
initial
begin
	memoria_expected[9] = 1'bX;
end 
// expected memoria[ 8 ]
initial
begin
	memoria_expected[8] = 1'bX;
end 
// expected memoria[ 7 ]
initial
begin
	memoria_expected[7] = 1'bX;
end 
// expected memoria[ 6 ]
initial
begin
	memoria_expected[6] = 1'bX;
end 
// expected memoria[ 5 ]
initial
begin
	memoria_expected[5] = 1'bX;
end 
// expected memoria[ 4 ]
initial
begin
	memoria_expected[4] = 1'bX;
end 
// expected memoria[ 3 ]
initial
begin
	memoria_expected[3] = 1'bX;
end 
// expected memoria[ 2 ]
initial
begin
	memoria_expected[2] = 1'bX;
end 
// expected memoria[ 1 ]
initial
begin
	memoria_expected[1] = 1'bX;
end 
// expected memoria[ 0 ]
initial
begin
	memoria_expected[0] = 1'bX;
end 
// generate trigger
always @(memoria_expected or memoria)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected memoria = %b | ",memoria_expected_prev);
	$display("| real memoria = %b | ",memoria_prev);
`endif
	if (
		( memoria_expected_prev[0] !== 1'bx ) && ( memoria_prev[0] !== memoria_expected_prev[0] )
		&& ((memoria_expected_prev[0] !== last_memoria_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[0] = memoria_expected_prev[0];
	end
	if (
		( memoria_expected_prev[1] !== 1'bx ) && ( memoria_prev[1] !== memoria_expected_prev[1] )
		&& ((memoria_expected_prev[1] !== last_memoria_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[1] = memoria_expected_prev[1];
	end
	if (
		( memoria_expected_prev[2] !== 1'bx ) && ( memoria_prev[2] !== memoria_expected_prev[2] )
		&& ((memoria_expected_prev[2] !== last_memoria_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[2] = memoria_expected_prev[2];
	end
	if (
		( memoria_expected_prev[3] !== 1'bx ) && ( memoria_prev[3] !== memoria_expected_prev[3] )
		&& ((memoria_expected_prev[3] !== last_memoria_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[3] = memoria_expected_prev[3];
	end
	if (
		( memoria_expected_prev[4] !== 1'bx ) && ( memoria_prev[4] !== memoria_expected_prev[4] )
		&& ((memoria_expected_prev[4] !== last_memoria_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[4] = memoria_expected_prev[4];
	end
	if (
		( memoria_expected_prev[5] !== 1'bx ) && ( memoria_prev[5] !== memoria_expected_prev[5] )
		&& ((memoria_expected_prev[5] !== last_memoria_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[5] = memoria_expected_prev[5];
	end
	if (
		( memoria_expected_prev[6] !== 1'bx ) && ( memoria_prev[6] !== memoria_expected_prev[6] )
		&& ((memoria_expected_prev[6] !== last_memoria_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[6] = memoria_expected_prev[6];
	end
	if (
		( memoria_expected_prev[7] !== 1'bx ) && ( memoria_prev[7] !== memoria_expected_prev[7] )
		&& ((memoria_expected_prev[7] !== last_memoria_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[7] = memoria_expected_prev[7];
	end
	if (
		( memoria_expected_prev[8] !== 1'bx ) && ( memoria_prev[8] !== memoria_expected_prev[8] )
		&& ((memoria_expected_prev[8] !== last_memoria_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[8] = memoria_expected_prev[8];
	end
	if (
		( memoria_expected_prev[9] !== 1'bx ) && ( memoria_prev[9] !== memoria_expected_prev[9] )
		&& ((memoria_expected_prev[9] !== last_memoria_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[9] = memoria_expected_prev[9];
	end
	if (
		( memoria_expected_prev[10] !== 1'bx ) && ( memoria_prev[10] !== memoria_expected_prev[10] )
		&& ((memoria_expected_prev[10] !== last_memoria_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[10] = memoria_expected_prev[10];
	end
	if (
		( memoria_expected_prev[11] !== 1'bx ) && ( memoria_prev[11] !== memoria_expected_prev[11] )
		&& ((memoria_expected_prev[11] !== last_memoria_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[11] = memoria_expected_prev[11];
	end
	if (
		( memoria_expected_prev[12] !== 1'bx ) && ( memoria_prev[12] !== memoria_expected_prev[12] )
		&& ((memoria_expected_prev[12] !== last_memoria_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[12] = memoria_expected_prev[12];
	end
	if (
		( memoria_expected_prev[13] !== 1'bx ) && ( memoria_prev[13] !== memoria_expected_prev[13] )
		&& ((memoria_expected_prev[13] !== last_memoria_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[13] = memoria_expected_prev[13];
	end
	if (
		( memoria_expected_prev[14] !== 1'bx ) && ( memoria_prev[14] !== memoria_expected_prev[14] )
		&& ((memoria_expected_prev[14] !== last_memoria_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[14] = memoria_expected_prev[14];
	end
	if (
		( memoria_expected_prev[15] !== 1'bx ) && ( memoria_prev[15] !== memoria_expected_prev[15] )
		&& ((memoria_expected_prev[15] !== last_memoria_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_memoria_exp[15] = memoria_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module registrador_de_instrucao_vlg_vec_tst();
// constants                                           
// general purpose registers
reg carregar;
reg [15:0] dado_de_entrada;
// wires                                               
wire [15:0] memoria;

wire sampler;                             

// assign statements (if any)                          
registrador_de_instrucao i1 (
// port map - connection between master ports and signals/registers   
	.carregar(carregar),
	.dado_de_entrada(dado_de_entrada),
	.memoria(memoria)
);

// carregar
always
begin
	carregar = 1'b0;
	carregar = #10000 1'b1;
	#10000;
end 
// dado_de_entrada[ 15 ]
initial
begin
	dado_de_entrada[15] = 1'b0;
end 
// dado_de_entrada[ 14 ]
initial
begin
	dado_de_entrada[14] = 1'b0;
end 
// dado_de_entrada[ 13 ]
initial
begin
	dado_de_entrada[13] = 1'b0;
end 
// dado_de_entrada[ 12 ]
initial
begin
	dado_de_entrada[12] = 1'b0;
end 
// dado_de_entrada[ 11 ]
initial
begin
	dado_de_entrada[11] = 1'b0;
end 
// dado_de_entrada[ 10 ]
initial
begin
	dado_de_entrada[10] = 1'b0;
end 
// dado_de_entrada[ 9 ]
initial
begin
	dado_de_entrada[9] = 1'b0;
end 
// dado_de_entrada[ 8 ]
initial
begin
	dado_de_entrada[8] = 1'b0;
end 
// dado_de_entrada[ 7 ]
initial
begin
	dado_de_entrada[7] = 1'b0;
end 
// dado_de_entrada[ 6 ]
initial
begin
	dado_de_entrada[6] = 1'b0;
end 
// dado_de_entrada[ 5 ]
initial
begin
	dado_de_entrada[5] = 1'b0;
end 
// dado_de_entrada[ 4 ]
initial
begin
	dado_de_entrada[4] = 1'b0;
end 
// dado_de_entrada[ 3 ]
initial
begin
	dado_de_entrada[3] = 1'b1;
end 
// dado_de_entrada[ 2 ]
initial
begin
	dado_de_entrada[2] = 1'b1;
end 
// dado_de_entrada[ 1 ]
initial
begin
	dado_de_entrada[1] = 1'b1;
end 
// dado_de_entrada[ 0 ]
initial
begin
	dado_de_entrada[0] = 1'b1;
end 

registrador_de_instrucao_vlg_sample_tst tb_sample (
	.carregar(carregar),
	.dado_de_entrada(dado_de_entrada),
	.sampler_tx(sampler)
);

registrador_de_instrucao_vlg_check_tst tb_out(
	.memoria(memoria),
	.sampler_rx(sampler)
);
endmodule

