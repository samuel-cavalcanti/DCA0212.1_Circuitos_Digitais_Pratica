// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2019 23:46:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    memoriaD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memoriaD_vlg_sample_tst(
	clock,
	dado_de_entrada,
	endereco,
	escrita,
	leitura,
	sampler_tx
);
input  clock;
input [15:0] dado_de_entrada;
input [8:0] endereco;
input  escrita;
input  leitura;
output sampler_tx;

reg sample;
time current_time;
always @(clock or dado_de_entrada or endereco or escrita or leitura)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module memoriaD_vlg_check_tst (
	dado_de_saida,
	sampler_rx
);
input [15:0] dado_de_saida;
input sampler_rx;

reg [15:0] dado_de_saida_expected;

reg [15:0] dado_de_saida_prev;

reg [15:0] dado_de_saida_expected_prev;

reg [15:0] last_dado_de_saida_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	dado_de_saida_prev = dado_de_saida;
end

// update expected /o prevs

always @(trigger)
begin
	dado_de_saida_expected_prev = dado_de_saida_expected;
end


// expected dado_de_saida[ 15 ]
initial
begin
	dado_de_saida_expected[15] = 1'bX;
end 
// expected dado_de_saida[ 14 ]
initial
begin
	dado_de_saida_expected[14] = 1'bX;
end 
// expected dado_de_saida[ 13 ]
initial
begin
	dado_de_saida_expected[13] = 1'bX;
end 
// expected dado_de_saida[ 12 ]
initial
begin
	dado_de_saida_expected[12] = 1'bX;
end 
// expected dado_de_saida[ 11 ]
initial
begin
	dado_de_saida_expected[11] = 1'bX;
end 
// expected dado_de_saida[ 10 ]
initial
begin
	dado_de_saida_expected[10] = 1'bX;
end 
// expected dado_de_saida[ 9 ]
initial
begin
	dado_de_saida_expected[9] = 1'bX;
end 
// expected dado_de_saida[ 8 ]
initial
begin
	dado_de_saida_expected[8] = 1'bX;
end 
// expected dado_de_saida[ 7 ]
initial
begin
	dado_de_saida_expected[7] = 1'bX;
end 
// expected dado_de_saida[ 6 ]
initial
begin
	dado_de_saida_expected[6] = 1'bX;
end 
// expected dado_de_saida[ 5 ]
initial
begin
	dado_de_saida_expected[5] = 1'bX;
end 
// expected dado_de_saida[ 4 ]
initial
begin
	dado_de_saida_expected[4] = 1'bX;
end 
// expected dado_de_saida[ 3 ]
initial
begin
	dado_de_saida_expected[3] = 1'bX;
end 
// expected dado_de_saida[ 2 ]
initial
begin
	dado_de_saida_expected[2] = 1'bX;
end 
// expected dado_de_saida[ 1 ]
initial
begin
	dado_de_saida_expected[1] = 1'bX;
end 
// expected dado_de_saida[ 0 ]
initial
begin
	dado_de_saida_expected[0] = 1'bX;
end 
// generate trigger
always @(dado_de_saida_expected or dado_de_saida)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dado_de_saida = %b | ",dado_de_saida_expected_prev);
	$display("| real dado_de_saida = %b | ",dado_de_saida_prev);
`endif
	if (
		( dado_de_saida_expected_prev[0] !== 1'bx ) && ( dado_de_saida_prev[0] !== dado_de_saida_expected_prev[0] )
		&& ((dado_de_saida_expected_prev[0] !== last_dado_de_saida_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[0] = dado_de_saida_expected_prev[0];
	end
	if (
		( dado_de_saida_expected_prev[1] !== 1'bx ) && ( dado_de_saida_prev[1] !== dado_de_saida_expected_prev[1] )
		&& ((dado_de_saida_expected_prev[1] !== last_dado_de_saida_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[1] = dado_de_saida_expected_prev[1];
	end
	if (
		( dado_de_saida_expected_prev[2] !== 1'bx ) && ( dado_de_saida_prev[2] !== dado_de_saida_expected_prev[2] )
		&& ((dado_de_saida_expected_prev[2] !== last_dado_de_saida_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[2] = dado_de_saida_expected_prev[2];
	end
	if (
		( dado_de_saida_expected_prev[3] !== 1'bx ) && ( dado_de_saida_prev[3] !== dado_de_saida_expected_prev[3] )
		&& ((dado_de_saida_expected_prev[3] !== last_dado_de_saida_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[3] = dado_de_saida_expected_prev[3];
	end
	if (
		( dado_de_saida_expected_prev[4] !== 1'bx ) && ( dado_de_saida_prev[4] !== dado_de_saida_expected_prev[4] )
		&& ((dado_de_saida_expected_prev[4] !== last_dado_de_saida_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[4] = dado_de_saida_expected_prev[4];
	end
	if (
		( dado_de_saida_expected_prev[5] !== 1'bx ) && ( dado_de_saida_prev[5] !== dado_de_saida_expected_prev[5] )
		&& ((dado_de_saida_expected_prev[5] !== last_dado_de_saida_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[5] = dado_de_saida_expected_prev[5];
	end
	if (
		( dado_de_saida_expected_prev[6] !== 1'bx ) && ( dado_de_saida_prev[6] !== dado_de_saida_expected_prev[6] )
		&& ((dado_de_saida_expected_prev[6] !== last_dado_de_saida_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[6] = dado_de_saida_expected_prev[6];
	end
	if (
		( dado_de_saida_expected_prev[7] !== 1'bx ) && ( dado_de_saida_prev[7] !== dado_de_saida_expected_prev[7] )
		&& ((dado_de_saida_expected_prev[7] !== last_dado_de_saida_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[7] = dado_de_saida_expected_prev[7];
	end
	if (
		( dado_de_saida_expected_prev[8] !== 1'bx ) && ( dado_de_saida_prev[8] !== dado_de_saida_expected_prev[8] )
		&& ((dado_de_saida_expected_prev[8] !== last_dado_de_saida_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[8] = dado_de_saida_expected_prev[8];
	end
	if (
		( dado_de_saida_expected_prev[9] !== 1'bx ) && ( dado_de_saida_prev[9] !== dado_de_saida_expected_prev[9] )
		&& ((dado_de_saida_expected_prev[9] !== last_dado_de_saida_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[9] = dado_de_saida_expected_prev[9];
	end
	if (
		( dado_de_saida_expected_prev[10] !== 1'bx ) && ( dado_de_saida_prev[10] !== dado_de_saida_expected_prev[10] )
		&& ((dado_de_saida_expected_prev[10] !== last_dado_de_saida_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[10] = dado_de_saida_expected_prev[10];
	end
	if (
		( dado_de_saida_expected_prev[11] !== 1'bx ) && ( dado_de_saida_prev[11] !== dado_de_saida_expected_prev[11] )
		&& ((dado_de_saida_expected_prev[11] !== last_dado_de_saida_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[11] = dado_de_saida_expected_prev[11];
	end
	if (
		( dado_de_saida_expected_prev[12] !== 1'bx ) && ( dado_de_saida_prev[12] !== dado_de_saida_expected_prev[12] )
		&& ((dado_de_saida_expected_prev[12] !== last_dado_de_saida_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[12] = dado_de_saida_expected_prev[12];
	end
	if (
		( dado_de_saida_expected_prev[13] !== 1'bx ) && ( dado_de_saida_prev[13] !== dado_de_saida_expected_prev[13] )
		&& ((dado_de_saida_expected_prev[13] !== last_dado_de_saida_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[13] = dado_de_saida_expected_prev[13];
	end
	if (
		( dado_de_saida_expected_prev[14] !== 1'bx ) && ( dado_de_saida_prev[14] !== dado_de_saida_expected_prev[14] )
		&& ((dado_de_saida_expected_prev[14] !== last_dado_de_saida_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[14] = dado_de_saida_expected_prev[14];
	end
	if (
		( dado_de_saida_expected_prev[15] !== 1'bx ) && ( dado_de_saida_prev[15] !== dado_de_saida_expected_prev[15] )
		&& ((dado_de_saida_expected_prev[15] !== last_dado_de_saida_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_de_saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_de_saida_expected_prev);
		$display ("     Real value = %b", dado_de_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_de_saida_exp[15] = dado_de_saida_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module memoriaD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [15:0] dado_de_entrada;
reg [8:0] endereco;
reg escrita;
reg leitura;
// wires                                               
wire [15:0] dado_de_saida;

wire sampler;                             

// assign statements (if any)                          
memoriaD i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dado_de_entrada(dado_de_entrada),
	.dado_de_saida(dado_de_saida),
	.endereco(endereco),
	.escrita(escrita),
	.leitura(leitura)
);

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 

// leitura
initial
begin
	leitura = 1'b0;
	leitura = #130000 1'b1;
	leitura = #40000 1'b0;
end 

// escrita
initial
begin
	escrita = 1'b0;
	escrita = #10000 1'b1;
	escrita = #40000 1'b0;
end 
// endereco[ 8 ]
initial
begin
	endereco[8] = 1'b0;
end 
// endereco[ 7 ]
initial
begin
	endereco[7] = 1'b0;
end 
// endereco[ 6 ]
initial
begin
	endereco[6] = 1'b0;
end 
// endereco[ 5 ]
initial
begin
	endereco[5] = 1'b0;
end 
// endereco[ 4 ]
initial
begin
	endereco[4] = 1'b0;
end 
// endereco[ 3 ]
initial
begin
	endereco[3] = 1'b0;
end 
// endereco[ 2 ]
initial
begin
	endereco[2] = 1'b0;
end 
// endereco[ 1 ]
initial
begin
	endereco[1] = 1'b0;
end 
// endereco[ 0 ]
initial
begin
	endereco[0] = 1'b0;
end 
// dado_de_entrada[ 15 ]
initial
begin
	dado_de_entrada[15] = 1'b0;
end 
// dado_de_entrada[ 14 ]
initial
begin
	dado_de_entrada[14] = 1'b0;
end 
// dado_de_entrada[ 13 ]
initial
begin
	dado_de_entrada[13] = 1'b0;
end 
// dado_de_entrada[ 12 ]
initial
begin
	dado_de_entrada[12] = 1'b0;
end 
// dado_de_entrada[ 11 ]
initial
begin
	dado_de_entrada[11] = 1'b0;
end 
// dado_de_entrada[ 10 ]
initial
begin
	dado_de_entrada[10] = 1'b0;
end 
// dado_de_entrada[ 9 ]
initial
begin
	dado_de_entrada[9] = 1'b0;
end 
// dado_de_entrada[ 8 ]
initial
begin
	dado_de_entrada[8] = 1'b0;
end 
// dado_de_entrada[ 7 ]
initial
begin
	dado_de_entrada[7] = 1'b0;
end 
// dado_de_entrada[ 6 ]
initial
begin
	dado_de_entrada[6] = 1'b0;
end 
// dado_de_entrada[ 5 ]
initial
begin
	dado_de_entrada[5] = 1'b0;
end 
// dado_de_entrada[ 4 ]
initial
begin
	dado_de_entrada[4] = 1'b1;
end 
// dado_de_entrada[ 3 ]
initial
begin
	dado_de_entrada[3] = 1'b1;
end 
// dado_de_entrada[ 2 ]
initial
begin
	dado_de_entrada[2] = 1'b0;
end 
// dado_de_entrada[ 1 ]
initial
begin
	dado_de_entrada[1] = 1'b0;
end 
// dado_de_entrada[ 0 ]
initial
begin
	dado_de_entrada[0] = 1'b1;
end 

memoriaD_vlg_sample_tst tb_sample (
	.clock(clock),
	.dado_de_entrada(dado_de_entrada),
	.endereco(endereco),
	.escrita(escrita),
	.leitura(leitura),
	.sampler_tx(sampler)
);

memoriaD_vlg_check_tst tb_out(
	.dado_de_saida(dado_de_saida),
	.sampler_rx(sampler)
);
endmodule

