// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2019 20:58:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bloco_de_controle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bloco_de_controle_vlg_sample_tst(
	clock,
	saida_comparador,
	saida_registrador_de_instrucao,
	sampler_tx
);
input  clock;
input  saida_comparador;
input [15:0] saida_registrador_de_instrucao;
output sampler_tx;

reg sample;
time current_time;
always @(clock or saida_comparador or saida_registrador_de_instrucao)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bloco_de_controle_vlg_check_tst (
	constante,
	endereco_1_para_leitura_banco,
	endereco_2_para_leitura_banco,
	endereco_memoria_de_dados,
	endereco_para_escrita_no_banco,
	escrever_contador_de_programa,
	escrever_memoria_de_dados,
	escrever_no_banco,
	estado_atual,
	habilitar_leitura_no_banco,
	incrementar_contador_de_programa,
	ler_memoria_de_dados,
	ler_memoria_de_instrucoes,
	ler_registrador_de_instrucao,
	limpar_contador_de_programa,
	seletor_ALU,
	seletor_mux,
	sampler_rx
);
input [7:0] constante;
input [3:0] endereco_1_para_leitura_banco;
input [3:0] endereco_2_para_leitura_banco;
input [7:0] endereco_memoria_de_dados;
input [3:0] endereco_para_escrita_no_banco;
input  escrever_contador_de_programa;
input  escrever_memoria_de_dados;
input  escrever_no_banco;
input [1:0] estado_atual;
input [1:0] habilitar_leitura_no_banco;
input  incrementar_contador_de_programa;
input  ler_memoria_de_dados;
input  ler_memoria_de_instrucoes;
input  ler_registrador_de_instrucao;
input  limpar_contador_de_programa;
input [1:0] seletor_ALU;
input [1:0] seletor_mux;
input sampler_rx;

reg [7:0] constante_expected;
reg [3:0] endereco_1_para_leitura_banco_expected;
reg [3:0] endereco_2_para_leitura_banco_expected;
reg [7:0] endereco_memoria_de_dados_expected;
reg [3:0] endereco_para_escrita_no_banco_expected;
reg  escrever_contador_de_programa_expected;
reg  escrever_memoria_de_dados_expected;
reg  escrever_no_banco_expected;
reg [1:0] estado_atual_expected;
reg [1:0] habilitar_leitura_no_banco_expected;
reg  incrementar_contador_de_programa_expected;
reg  ler_memoria_de_dados_expected;
reg  ler_memoria_de_instrucoes_expected;
reg  ler_registrador_de_instrucao_expected;
reg  limpar_contador_de_programa_expected;
reg [1:0] seletor_ALU_expected;
reg [1:0] seletor_mux_expected;

reg [7:0] constante_prev;
reg [3:0] endereco_1_para_leitura_banco_prev;
reg [3:0] endereco_2_para_leitura_banco_prev;
reg [7:0] endereco_memoria_de_dados_prev;
reg [3:0] endereco_para_escrita_no_banco_prev;
reg  escrever_contador_de_programa_prev;
reg  escrever_memoria_de_dados_prev;
reg  escrever_no_banco_prev;
reg [1:0] estado_atual_prev;
reg [1:0] habilitar_leitura_no_banco_prev;
reg  incrementar_contador_de_programa_prev;
reg  ler_memoria_de_dados_prev;
reg  ler_memoria_de_instrucoes_prev;
reg  ler_registrador_de_instrucao_prev;
reg  limpar_contador_de_programa_prev;
reg [1:0] seletor_ALU_prev;
reg [1:0] seletor_mux_prev;

reg  escrever_contador_de_programa_expected_prev;
reg [1:0] estado_atual_expected_prev;
reg  incrementar_contador_de_programa_expected_prev;
reg  ler_memoria_de_instrucoes_expected_prev;
reg  ler_registrador_de_instrucao_expected_prev;
reg  limpar_contador_de_programa_expected_prev;

reg  last_escrever_contador_de_programa_exp;
reg [1:0] last_estado_atual_exp;
reg  last_incrementar_contador_de_programa_exp;
reg  last_ler_memoria_de_instrucoes_exp;
reg  last_ler_registrador_de_instrucao_exp;
reg  last_limpar_contador_de_programa_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	constante_prev = constante;
	endereco_1_para_leitura_banco_prev = endereco_1_para_leitura_banco;
	endereco_2_para_leitura_banco_prev = endereco_2_para_leitura_banco;
	endereco_memoria_de_dados_prev = endereco_memoria_de_dados;
	endereco_para_escrita_no_banco_prev = endereco_para_escrita_no_banco;
	escrever_contador_de_programa_prev = escrever_contador_de_programa;
	escrever_memoria_de_dados_prev = escrever_memoria_de_dados;
	escrever_no_banco_prev = escrever_no_banco;
	estado_atual_prev = estado_atual;
	habilitar_leitura_no_banco_prev = habilitar_leitura_no_banco;
	incrementar_contador_de_programa_prev = incrementar_contador_de_programa;
	ler_memoria_de_dados_prev = ler_memoria_de_dados;
	ler_memoria_de_instrucoes_prev = ler_memoria_de_instrucoes;
	ler_registrador_de_instrucao_prev = ler_registrador_de_instrucao;
	limpar_contador_de_programa_prev = limpar_contador_de_programa;
	seletor_ALU_prev = seletor_ALU;
	seletor_mux_prev = seletor_mux;
end

// update expected /o prevs

always @(trigger)
begin
	escrever_contador_de_programa_expected_prev = escrever_contador_de_programa_expected;
	estado_atual_expected_prev = estado_atual_expected;
	incrementar_contador_de_programa_expected_prev = incrementar_contador_de_programa_expected;
	ler_memoria_de_instrucoes_expected_prev = ler_memoria_de_instrucoes_expected;
	ler_registrador_de_instrucao_expected_prev = ler_registrador_de_instrucao_expected;
	limpar_contador_de_programa_expected_prev = limpar_contador_de_programa_expected;
end


// expected estado_atual[ 1 ]
initial
begin
	estado_atual_expected[1] = 1'b0;
end 
// expected estado_atual[ 0 ]
initial
begin
	estado_atual_expected[0] = 1'b0;
end 

// expected escrever_contador_de_programa
initial
begin
	escrever_contador_de_programa_expected = 1'bX;
end 

// expected incrementar_contador_de_programa
initial
begin
	incrementar_contador_de_programa_expected = 1'bX;
end 

// expected ler_memoria_de_instrucoes
initial
begin
	ler_memoria_de_instrucoes_expected = 1'bX;
end 

// expected ler_registrador_de_instrucao
initial
begin
	ler_registrador_de_instrucao_expected = 1'bX;
end 

// expected limpar_contador_de_programa
initial
begin
	limpar_contador_de_programa_expected = 1'bX;
end 
// generate trigger
always @(constante_expected or constante or endereco_1_para_leitura_banco_expected or endereco_1_para_leitura_banco or endereco_2_para_leitura_banco_expected or endereco_2_para_leitura_banco or endereco_memoria_de_dados_expected or endereco_memoria_de_dados or endereco_para_escrita_no_banco_expected or endereco_para_escrita_no_banco or escrever_contador_de_programa_expected or escrever_contador_de_programa or escrever_memoria_de_dados_expected or escrever_memoria_de_dados or escrever_no_banco_expected or escrever_no_banco or estado_atual_expected or estado_atual or habilitar_leitura_no_banco_expected or habilitar_leitura_no_banco or incrementar_contador_de_programa_expected or incrementar_contador_de_programa or ler_memoria_de_dados_expected or ler_memoria_de_dados or ler_memoria_de_instrucoes_expected or ler_memoria_de_instrucoes or ler_registrador_de_instrucao_expected or ler_registrador_de_instrucao or limpar_contador_de_programa_expected or limpar_contador_de_programa or seletor_ALU_expected or seletor_ALU or seletor_mux_expected or seletor_mux)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected constante = %b | expected endereco_1_para_leitura_banco = %b | expected endereco_2_para_leitura_banco = %b | expected endereco_memoria_de_dados = %b | expected endereco_para_escrita_no_banco = %b | expected escrever_contador_de_programa = %b | expected escrever_memoria_de_dados = %b | expected escrever_no_banco = %b | expected estado_atual = %b | expected habilitar_leitura_no_banco = %b | expected incrementar_contador_de_programa = %b | expected ler_memoria_de_dados = %b | expected ler_memoria_de_instrucoes = %b | expected ler_registrador_de_instrucao = %b | expected limpar_contador_de_programa = %b | expected seletor_ALU = %b | expected seletor_mux = %b | ",constante_expected_prev,endereco_1_para_leitura_banco_expected_prev,endereco_2_para_leitura_banco_expected_prev,endereco_memoria_de_dados_expected_prev,endereco_para_escrita_no_banco_expected_prev,escrever_contador_de_programa_expected_prev,escrever_memoria_de_dados_expected_prev,escrever_no_banco_expected_prev,estado_atual_expected_prev,habilitar_leitura_no_banco_expected_prev,incrementar_contador_de_programa_expected_prev,ler_memoria_de_dados_expected_prev,ler_memoria_de_instrucoes_expected_prev,ler_registrador_de_instrucao_expected_prev,limpar_contador_de_programa_expected_prev,seletor_ALU_expected_prev,seletor_mux_expected_prev);
	$display("| real constante = %b | real endereco_1_para_leitura_banco = %b | real endereco_2_para_leitura_banco = %b | real endereco_memoria_de_dados = %b | real endereco_para_escrita_no_banco = %b | real escrever_contador_de_programa = %b | real escrever_memoria_de_dados = %b | real escrever_no_banco = %b | real estado_atual = %b | real habilitar_leitura_no_banco = %b | real incrementar_contador_de_programa = %b | real ler_memoria_de_dados = %b | real ler_memoria_de_instrucoes = %b | real ler_registrador_de_instrucao = %b | real limpar_contador_de_programa = %b | real seletor_ALU = %b | real seletor_mux = %b | ",constante_prev,endereco_1_para_leitura_banco_prev,endereco_2_para_leitura_banco_prev,endereco_memoria_de_dados_prev,endereco_para_escrita_no_banco_prev,escrever_contador_de_programa_prev,escrever_memoria_de_dados_prev,escrever_no_banco_prev,estado_atual_prev,habilitar_leitura_no_banco_prev,incrementar_contador_de_programa_prev,ler_memoria_de_dados_prev,ler_memoria_de_instrucoes_prev,ler_registrador_de_instrucao_prev,limpar_contador_de_programa_prev,seletor_ALU_prev,seletor_mux_prev);
`endif
	if (
		( escrever_contador_de_programa_expected_prev !== 1'bx ) && ( escrever_contador_de_programa_prev !== escrever_contador_de_programa_expected_prev )
		&& ((escrever_contador_de_programa_expected_prev !== last_escrever_contador_de_programa_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port escrever_contador_de_programa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", escrever_contador_de_programa_expected_prev);
		$display ("     Real value = %b", escrever_contador_de_programa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_escrever_contador_de_programa_exp = escrever_contador_de_programa_expected_prev;
	end
	if (
		( estado_atual_expected_prev[0] !== 1'bx ) && ( estado_atual_prev[0] !== estado_atual_expected_prev[0] )
		&& ((estado_atual_expected_prev[0] !== last_estado_atual_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado_atual[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_atual_expected_prev);
		$display ("     Real value = %b", estado_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_estado_atual_exp[0] = estado_atual_expected_prev[0];
	end
	if (
		( estado_atual_expected_prev[1] !== 1'bx ) && ( estado_atual_prev[1] !== estado_atual_expected_prev[1] )
		&& ((estado_atual_expected_prev[1] !== last_estado_atual_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado_atual[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_atual_expected_prev);
		$display ("     Real value = %b", estado_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_estado_atual_exp[1] = estado_atual_expected_prev[1];
	end
	if (
		( incrementar_contador_de_programa_expected_prev !== 1'bx ) && ( incrementar_contador_de_programa_prev !== incrementar_contador_de_programa_expected_prev )
		&& ((incrementar_contador_de_programa_expected_prev !== last_incrementar_contador_de_programa_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port incrementar_contador_de_programa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", incrementar_contador_de_programa_expected_prev);
		$display ("     Real value = %b", incrementar_contador_de_programa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_incrementar_contador_de_programa_exp = incrementar_contador_de_programa_expected_prev;
	end
	if (
		( ler_memoria_de_instrucoes_expected_prev !== 1'bx ) && ( ler_memoria_de_instrucoes_prev !== ler_memoria_de_instrucoes_expected_prev )
		&& ((ler_memoria_de_instrucoes_expected_prev !== last_ler_memoria_de_instrucoes_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ler_memoria_de_instrucoes :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ler_memoria_de_instrucoes_expected_prev);
		$display ("     Real value = %b", ler_memoria_de_instrucoes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ler_memoria_de_instrucoes_exp = ler_memoria_de_instrucoes_expected_prev;
	end
	if (
		( ler_registrador_de_instrucao_expected_prev !== 1'bx ) && ( ler_registrador_de_instrucao_prev !== ler_registrador_de_instrucao_expected_prev )
		&& ((ler_registrador_de_instrucao_expected_prev !== last_ler_registrador_de_instrucao_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ler_registrador_de_instrucao :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ler_registrador_de_instrucao_expected_prev);
		$display ("     Real value = %b", ler_registrador_de_instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ler_registrador_de_instrucao_exp = ler_registrador_de_instrucao_expected_prev;
	end
	if (
		( limpar_contador_de_programa_expected_prev !== 1'bx ) && ( limpar_contador_de_programa_prev !== limpar_contador_de_programa_expected_prev )
		&& ((limpar_contador_de_programa_expected_prev !== last_limpar_contador_de_programa_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port limpar_contador_de_programa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", limpar_contador_de_programa_expected_prev);
		$display ("     Real value = %b", limpar_contador_de_programa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_limpar_contador_de_programa_exp = limpar_contador_de_programa_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bloco_de_controle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg saida_comparador;
reg [15:0] saida_registrador_de_instrucao;
// wires                                               
wire [7:0] constante;
wire [3:0] endereco_1_para_leitura_banco;
wire [3:0] endereco_2_para_leitura_banco;
wire [7:0] endereco_memoria_de_dados;
wire [3:0] endereco_para_escrita_no_banco;
wire escrever_contador_de_programa;
wire escrever_memoria_de_dados;
wire escrever_no_banco;
wire [1:0] estado_atual;
wire [1:0] habilitar_leitura_no_banco;
wire incrementar_contador_de_programa;
wire ler_memoria_de_dados;
wire ler_memoria_de_instrucoes;
wire ler_registrador_de_instrucao;
wire limpar_contador_de_programa;
wire [1:0] seletor_ALU;
wire [1:0] seletor_mux;

wire sampler;                             

// assign statements (if any)                          
bloco_de_controle i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.constante(constante),
	.endereco_1_para_leitura_banco(endereco_1_para_leitura_banco),
	.endereco_2_para_leitura_banco(endereco_2_para_leitura_banco),
	.endereco_memoria_de_dados(endereco_memoria_de_dados),
	.endereco_para_escrita_no_banco(endereco_para_escrita_no_banco),
	.escrever_contador_de_programa(escrever_contador_de_programa),
	.escrever_memoria_de_dados(escrever_memoria_de_dados),
	.escrever_no_banco(escrever_no_banco),
	.estado_atual(estado_atual),
	.habilitar_leitura_no_banco(habilitar_leitura_no_banco),
	.incrementar_contador_de_programa(incrementar_contador_de_programa),
	.ler_memoria_de_dados(ler_memoria_de_dados),
	.ler_memoria_de_instrucoes(ler_memoria_de_instrucoes),
	.ler_registrador_de_instrucao(ler_registrador_de_instrucao),
	.limpar_contador_de_programa(limpar_contador_de_programa),
	.saida_comparador(saida_comparador),
	.saida_registrador_de_instrucao(saida_registrador_de_instrucao),
	.seletor_ALU(seletor_ALU),
	.seletor_mux(seletor_mux)
);

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 
// saida_registrador_de_instrucao[ 15 ]
initial
begin
	saida_registrador_de_instrucao[15] = 1'b0;
end 
// saida_registrador_de_instrucao[ 14 ]
initial
begin
	saida_registrador_de_instrucao[14] = 1'b0;
end 
// saida_registrador_de_instrucao[ 13 ]
initial
begin
	saida_registrador_de_instrucao[13] = 1'b0;
end 
// saida_registrador_de_instrucao[ 12 ]
initial
begin
	saida_registrador_de_instrucao[12] = 1'b0;
end 
// saida_registrador_de_instrucao[ 11 ]
initial
begin
	saida_registrador_de_instrucao[11] = 1'b1;
end 
// saida_registrador_de_instrucao[ 10 ]
initial
begin
	saida_registrador_de_instrucao[10] = 1'b0;
end 
// saida_registrador_de_instrucao[ 9 ]
initial
begin
	saida_registrador_de_instrucao[9] = 1'b1;
end 
// saida_registrador_de_instrucao[ 8 ]
initial
begin
	saida_registrador_de_instrucao[8] = 1'b0;
end 
// saida_registrador_de_instrucao[ 7 ]
initial
begin
	saida_registrador_de_instrucao[7] = 1'b1;
end 
// saida_registrador_de_instrucao[ 6 ]
initial
begin
	saida_registrador_de_instrucao[6] = 1'b1;
end 
// saida_registrador_de_instrucao[ 5 ]
initial
begin
	saida_registrador_de_instrucao[5] = 1'b1;
end 
// saida_registrador_de_instrucao[ 4 ]
initial
begin
	saida_registrador_de_instrucao[4] = 1'b1;
end 
// saida_registrador_de_instrucao[ 3 ]
initial
begin
	saida_registrador_de_instrucao[3] = 1'b0;
end 
// saida_registrador_de_instrucao[ 2 ]
initial
begin
	saida_registrador_de_instrucao[2] = 1'b1;
end 
// saida_registrador_de_instrucao[ 1 ]
initial
begin
	saida_registrador_de_instrucao[1] = 1'b0;
end 
// saida_registrador_de_instrucao[ 0 ]
initial
begin
	saida_registrador_de_instrucao[0] = 1'b0;
end 

// saida_comparador
initial
begin
	saida_comparador = 1'b0;
	saida_comparador = #90000 1'b1;
	saida_comparador = #50000 1'b0;
end 

bloco_de_controle_vlg_sample_tst tb_sample (
	.clock(clock),
	.saida_comparador(saida_comparador),
	.saida_registrador_de_instrucao(saida_registrador_de_instrucao),
	.sampler_tx(sampler)
);

bloco_de_controle_vlg_check_tst tb_out(
	.constante(constante),
	.endereco_1_para_leitura_banco(endereco_1_para_leitura_banco),
	.endereco_2_para_leitura_banco(endereco_2_para_leitura_banco),
	.endereco_memoria_de_dados(endereco_memoria_de_dados),
	.endereco_para_escrita_no_banco(endereco_para_escrita_no_banco),
	.escrever_contador_de_programa(escrever_contador_de_programa),
	.escrever_memoria_de_dados(escrever_memoria_de_dados),
	.escrever_no_banco(escrever_no_banco),
	.estado_atual(estado_atual),
	.habilitar_leitura_no_banco(habilitar_leitura_no_banco),
	.incrementar_contador_de_programa(incrementar_contador_de_programa),
	.ler_memoria_de_dados(ler_memoria_de_dados),
	.ler_memoria_de_instrucoes(ler_memoria_de_instrucoes),
	.ler_registrador_de_instrucao(ler_registrador_de_instrucao),
	.limpar_contador_de_programa(limpar_contador_de_programa),
	.seletor_ALU(seletor_ALU),
	.seletor_mux(seletor_mux),
	.sampler_rx(sampler)
);
endmodule

