// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2019 15:30:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processador_programavel
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_programavel_vlg_sample_tst(
	clock,
	sampler_tx
);
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processador_programavel_vlg_check_tst (
	estado_botao,
	saida_comprador,
	saida_display_ALU,
	saida_display_banco_1,
	saida_display_banco_2,
	saida_display_contador,
	saida_display_enderesso_1,
	saida_display_enderesso_2,
	saida_display_estado,
	saida_display_operacao,
	sampler_rx
);
input [1:0] estado_botao;
input  saida_comprador;
input [6:0] saida_display_ALU;
input [6:0] saida_display_banco_1;
input [6:0] saida_display_banco_2;
input [6:0] saida_display_contador;
input [6:0] saida_display_enderesso_1;
input [6:0] saida_display_enderesso_2;
input [6:0] saida_display_estado;
input [6:0] saida_display_operacao;
input sampler_rx;

reg [1:0] estado_botao_expected;
reg  saida_comprador_expected;
reg [6:0] saida_display_ALU_expected;
reg [6:0] saida_display_banco_1_expected;
reg [6:0] saida_display_banco_2_expected;
reg [6:0] saida_display_contador_expected;
reg [6:0] saida_display_enderesso_1_expected;
reg [6:0] saida_display_enderesso_2_expected;
reg [6:0] saida_display_estado_expected;
reg [6:0] saida_display_operacao_expected;

reg [1:0] estado_botao_prev;
reg  saida_comprador_prev;
reg [6:0] saida_display_ALU_prev;
reg [6:0] saida_display_banco_1_prev;
reg [6:0] saida_display_banco_2_prev;
reg [6:0] saida_display_contador_prev;
reg [6:0] saida_display_enderesso_1_prev;
reg [6:0] saida_display_enderesso_2_prev;
reg [6:0] saida_display_estado_prev;
reg [6:0] saida_display_operacao_prev;

reg [1:0] estado_botao_expected_prev;
reg  saida_comprador_expected_prev;
reg [6:0] saida_display_ALU_expected_prev;
reg [6:0] saida_display_banco_1_expected_prev;
reg [6:0] saida_display_banco_2_expected_prev;
reg [6:0] saida_display_contador_expected_prev;
reg [6:0] saida_display_enderesso_1_expected_prev;
reg [6:0] saida_display_enderesso_2_expected_prev;
reg [6:0] saida_display_estado_expected_prev;
reg [6:0] saida_display_operacao_expected_prev;

reg [1:0] last_estado_botao_exp;
reg  last_saida_comprador_exp;
reg [6:0] last_saida_display_ALU_exp;
reg [6:0] last_saida_display_banco_1_exp;
reg [6:0] last_saida_display_banco_2_exp;
reg [6:0] last_saida_display_contador_exp;
reg [6:0] last_saida_display_enderesso_1_exp;
reg [6:0] last_saida_display_enderesso_2_exp;
reg [6:0] last_saida_display_estado_exp;
reg [6:0] last_saida_display_operacao_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	estado_botao_prev = estado_botao;
	saida_comprador_prev = saida_comprador;
	saida_display_ALU_prev = saida_display_ALU;
	saida_display_banco_1_prev = saida_display_banco_1;
	saida_display_banco_2_prev = saida_display_banco_2;
	saida_display_contador_prev = saida_display_contador;
	saida_display_enderesso_1_prev = saida_display_enderesso_1;
	saida_display_enderesso_2_prev = saida_display_enderesso_2;
	saida_display_estado_prev = saida_display_estado;
	saida_display_operacao_prev = saida_display_operacao;
end

// update expected /o prevs

always @(trigger)
begin
	estado_botao_expected_prev = estado_botao_expected;
	saida_comprador_expected_prev = saida_comprador_expected;
	saida_display_ALU_expected_prev = saida_display_ALU_expected;
	saida_display_banco_1_expected_prev = saida_display_banco_1_expected;
	saida_display_banco_2_expected_prev = saida_display_banco_2_expected;
	saida_display_contador_expected_prev = saida_display_contador_expected;
	saida_display_enderesso_1_expected_prev = saida_display_enderesso_1_expected;
	saida_display_enderesso_2_expected_prev = saida_display_enderesso_2_expected;
	saida_display_estado_expected_prev = saida_display_estado_expected;
	saida_display_operacao_expected_prev = saida_display_operacao_expected;
end


// expected estado_botao[ 1 ]
initial
begin
	estado_botao_expected[1] = 1'bX;
end 
// expected estado_botao[ 0 ]
initial
begin
	estado_botao_expected[0] = 1'bX;
end 

// expected saida_comprador
initial
begin
	saida_comprador_expected = 1'bX;
end 
// expected saida_display_ALU[ 6 ]
initial
begin
	saida_display_ALU_expected[6] = 1'bX;
end 
// expected saida_display_ALU[ 5 ]
initial
begin
	saida_display_ALU_expected[5] = 1'bX;
end 
// expected saida_display_ALU[ 4 ]
initial
begin
	saida_display_ALU_expected[4] = 1'bX;
end 
// expected saida_display_ALU[ 3 ]
initial
begin
	saida_display_ALU_expected[3] = 1'bX;
end 
// expected saida_display_ALU[ 2 ]
initial
begin
	saida_display_ALU_expected[2] = 1'bX;
end 
// expected saida_display_ALU[ 1 ]
initial
begin
	saida_display_ALU_expected[1] = 1'bX;
end 
// expected saida_display_ALU[ 0 ]
initial
begin
	saida_display_ALU_expected[0] = 1'bX;
end 
// expected saida_display_banco_1[ 6 ]
initial
begin
	saida_display_banco_1_expected[6] = 1'bX;
end 
// expected saida_display_banco_1[ 5 ]
initial
begin
	saida_display_banco_1_expected[5] = 1'bX;
end 
// expected saida_display_banco_1[ 4 ]
initial
begin
	saida_display_banco_1_expected[4] = 1'bX;
end 
// expected saida_display_banco_1[ 3 ]
initial
begin
	saida_display_banco_1_expected[3] = 1'bX;
end 
// expected saida_display_banco_1[ 2 ]
initial
begin
	saida_display_banco_1_expected[2] = 1'bX;
end 
// expected saida_display_banco_1[ 1 ]
initial
begin
	saida_display_banco_1_expected[1] = 1'bX;
end 
// expected saida_display_banco_1[ 0 ]
initial
begin
	saida_display_banco_1_expected[0] = 1'bX;
end 
// expected saida_display_banco_2[ 6 ]
initial
begin
	saida_display_banco_2_expected[6] = 1'bX;
end 
// expected saida_display_banco_2[ 5 ]
initial
begin
	saida_display_banco_2_expected[5] = 1'bX;
end 
// expected saida_display_banco_2[ 4 ]
initial
begin
	saida_display_banco_2_expected[4] = 1'bX;
end 
// expected saida_display_banco_2[ 3 ]
initial
begin
	saida_display_banco_2_expected[3] = 1'bX;
end 
// expected saida_display_banco_2[ 2 ]
initial
begin
	saida_display_banco_2_expected[2] = 1'bX;
end 
// expected saida_display_banco_2[ 1 ]
initial
begin
	saida_display_banco_2_expected[1] = 1'bX;
end 
// expected saida_display_banco_2[ 0 ]
initial
begin
	saida_display_banco_2_expected[0] = 1'bX;
end 
// expected saida_display_contador[ 6 ]
initial
begin
	saida_display_contador_expected[6] = 1'bX;
end 
// expected saida_display_contador[ 5 ]
initial
begin
	saida_display_contador_expected[5] = 1'bX;
end 
// expected saida_display_contador[ 4 ]
initial
begin
	saida_display_contador_expected[4] = 1'bX;
end 
// expected saida_display_contador[ 3 ]
initial
begin
	saida_display_contador_expected[3] = 1'bX;
end 
// expected saida_display_contador[ 2 ]
initial
begin
	saida_display_contador_expected[2] = 1'bX;
end 
// expected saida_display_contador[ 1 ]
initial
begin
	saida_display_contador_expected[1] = 1'bX;
end 
// expected saida_display_contador[ 0 ]
initial
begin
	saida_display_contador_expected[0] = 1'bX;
end 
// expected saida_display_enderesso_1[ 6 ]
initial
begin
	saida_display_enderesso_1_expected[6] = 1'bX;
end 
// expected saida_display_enderesso_1[ 5 ]
initial
begin
	saida_display_enderesso_1_expected[5] = 1'bX;
end 
// expected saida_display_enderesso_1[ 4 ]
initial
begin
	saida_display_enderesso_1_expected[4] = 1'bX;
end 
// expected saida_display_enderesso_1[ 3 ]
initial
begin
	saida_display_enderesso_1_expected[3] = 1'bX;
end 
// expected saida_display_enderesso_1[ 2 ]
initial
begin
	saida_display_enderesso_1_expected[2] = 1'bX;
end 
// expected saida_display_enderesso_1[ 1 ]
initial
begin
	saida_display_enderesso_1_expected[1] = 1'bX;
end 
// expected saida_display_enderesso_1[ 0 ]
initial
begin
	saida_display_enderesso_1_expected[0] = 1'bX;
end 
// expected saida_display_enderesso_2[ 6 ]
initial
begin
	saida_display_enderesso_2_expected[6] = 1'bX;
end 
// expected saida_display_enderesso_2[ 5 ]
initial
begin
	saida_display_enderesso_2_expected[5] = 1'bX;
end 
// expected saida_display_enderesso_2[ 4 ]
initial
begin
	saida_display_enderesso_2_expected[4] = 1'bX;
end 
// expected saida_display_enderesso_2[ 3 ]
initial
begin
	saida_display_enderesso_2_expected[3] = 1'bX;
end 
// expected saida_display_enderesso_2[ 2 ]
initial
begin
	saida_display_enderesso_2_expected[2] = 1'bX;
end 
// expected saida_display_enderesso_2[ 1 ]
initial
begin
	saida_display_enderesso_2_expected[1] = 1'bX;
end 
// expected saida_display_enderesso_2[ 0 ]
initial
begin
	saida_display_enderesso_2_expected[0] = 1'bX;
end 
// expected saida_display_estado[ 6 ]
initial
begin
	saida_display_estado_expected[6] = 1'bX;
end 
// expected saida_display_estado[ 5 ]
initial
begin
	saida_display_estado_expected[5] = 1'bX;
end 
// expected saida_display_estado[ 4 ]
initial
begin
	saida_display_estado_expected[4] = 1'bX;
end 
// expected saida_display_estado[ 3 ]
initial
begin
	saida_display_estado_expected[3] = 1'bX;
end 
// expected saida_display_estado[ 2 ]
initial
begin
	saida_display_estado_expected[2] = 1'bX;
end 
// expected saida_display_estado[ 1 ]
initial
begin
	saida_display_estado_expected[1] = 1'bX;
end 
// expected saida_display_estado[ 0 ]
initial
begin
	saida_display_estado_expected[0] = 1'bX;
end 
// expected saida_display_operacao[ 6 ]
initial
begin
	saida_display_operacao_expected[6] = 1'bX;
end 
// expected saida_display_operacao[ 5 ]
initial
begin
	saida_display_operacao_expected[5] = 1'bX;
end 
// expected saida_display_operacao[ 4 ]
initial
begin
	saida_display_operacao_expected[4] = 1'bX;
end 
// expected saida_display_operacao[ 3 ]
initial
begin
	saida_display_operacao_expected[3] = 1'bX;
end 
// expected saida_display_operacao[ 2 ]
initial
begin
	saida_display_operacao_expected[2] = 1'bX;
end 
// expected saida_display_operacao[ 1 ]
initial
begin
	saida_display_operacao_expected[1] = 1'bX;
end 
// expected saida_display_operacao[ 0 ]
initial
begin
	saida_display_operacao_expected[0] = 1'bX;
end 
// generate trigger
always @(estado_botao_expected or estado_botao or saida_comprador_expected or saida_comprador or saida_display_ALU_expected or saida_display_ALU or saida_display_banco_1_expected or saida_display_banco_1 or saida_display_banco_2_expected or saida_display_banco_2 or saida_display_contador_expected or saida_display_contador or saida_display_enderesso_1_expected or saida_display_enderesso_1 or saida_display_enderesso_2_expected or saida_display_enderesso_2 or saida_display_estado_expected or saida_display_estado or saida_display_operacao_expected or saida_display_operacao)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected estado_botao = %b | expected saida_comprador = %b | expected saida_display_ALU = %b | expected saida_display_banco_1 = %b | expected saida_display_banco_2 = %b | expected saida_display_contador = %b | expected saida_display_enderesso_1 = %b | expected saida_display_enderesso_2 = %b | expected saida_display_estado = %b | expected saida_display_operacao = %b | ",estado_botao_expected_prev,saida_comprador_expected_prev,saida_display_ALU_expected_prev,saida_display_banco_1_expected_prev,saida_display_banco_2_expected_prev,saida_display_contador_expected_prev,saida_display_enderesso_1_expected_prev,saida_display_enderesso_2_expected_prev,saida_display_estado_expected_prev,saida_display_operacao_expected_prev);
	$display("| real estado_botao = %b | real saida_comprador = %b | real saida_display_ALU = %b | real saida_display_banco_1 = %b | real saida_display_banco_2 = %b | real saida_display_contador = %b | real saida_display_enderesso_1 = %b | real saida_display_enderesso_2 = %b | real saida_display_estado = %b | real saida_display_operacao = %b | ",estado_botao_prev,saida_comprador_prev,saida_display_ALU_prev,saida_display_banco_1_prev,saida_display_banco_2_prev,saida_display_contador_prev,saida_display_enderesso_1_prev,saida_display_enderesso_2_prev,saida_display_estado_prev,saida_display_operacao_prev);
`endif
	if (
		( estado_botao_expected_prev[0] !== 1'bx ) && ( estado_botao_prev[0] !== estado_botao_expected_prev[0] )
		&& ((estado_botao_expected_prev[0] !== last_estado_botao_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado_botao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_botao_expected_prev);
		$display ("     Real value = %b", estado_botao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_botao_exp[0] = estado_botao_expected_prev[0];
	end
	if (
		( estado_botao_expected_prev[1] !== 1'bx ) && ( estado_botao_prev[1] !== estado_botao_expected_prev[1] )
		&& ((estado_botao_expected_prev[1] !== last_estado_botao_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado_botao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_botao_expected_prev);
		$display ("     Real value = %b", estado_botao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_estado_botao_exp[1] = estado_botao_expected_prev[1];
	end
	if (
		( saida_comprador_expected_prev !== 1'bx ) && ( saida_comprador_prev !== saida_comprador_expected_prev )
		&& ((saida_comprador_expected_prev !== last_saida_comprador_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_comprador :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_comprador_expected_prev);
		$display ("     Real value = %b", saida_comprador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_comprador_exp = saida_comprador_expected_prev;
	end
	if (
		( saida_display_ALU_expected_prev[0] !== 1'bx ) && ( saida_display_ALU_prev[0] !== saida_display_ALU_expected_prev[0] )
		&& ((saida_display_ALU_expected_prev[0] !== last_saida_display_ALU_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_ALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_ALU_expected_prev);
		$display ("     Real value = %b", saida_display_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_display_ALU_exp[0] = saida_display_ALU_expected_prev[0];
	end
	if (
		( saida_display_ALU_expected_prev[1] !== 1'bx ) && ( saida_display_ALU_prev[1] !== saida_display_ALU_expected_prev[1] )
		&& ((saida_display_ALU_expected_prev[1] !== last_saida_display_ALU_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_ALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_ALU_expected_prev);
		$display ("     Real value = %b", saida_display_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_display_ALU_exp[1] = saida_display_ALU_expected_prev[1];
	end
	if (
		( saida_display_ALU_expected_prev[2] !== 1'bx ) && ( saida_display_ALU_prev[2] !== saida_display_ALU_expected_prev[2] )
		&& ((saida_display_ALU_expected_prev[2] !== last_saida_display_ALU_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_ALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_ALU_expected_prev);
		$display ("     Real value = %b", saida_display_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_display_ALU_exp[2] = saida_display_ALU_expected_prev[2];
	end
	if (
		( saida_display_ALU_expected_prev[3] !== 1'bx ) && ( saida_display_ALU_prev[3] !== saida_display_ALU_expected_prev[3] )
		&& ((saida_display_ALU_expected_prev[3] !== last_saida_display_ALU_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_ALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_ALU_expected_prev);
		$display ("     Real value = %b", saida_display_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_display_ALU_exp[3] = saida_display_ALU_expected_prev[3];
	end
	if (
		( saida_display_ALU_expected_prev[4] !== 1'bx ) && ( saida_display_ALU_prev[4] !== saida_display_ALU_expected_prev[4] )
		&& ((saida_display_ALU_expected_prev[4] !== last_saida_display_ALU_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_ALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_ALU_expected_prev);
		$display ("     Real value = %b", saida_display_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_display_ALU_exp[4] = saida_display_ALU_expected_prev[4];
	end
	if (
		( saida_display_ALU_expected_prev[5] !== 1'bx ) && ( saida_display_ALU_prev[5] !== saida_display_ALU_expected_prev[5] )
		&& ((saida_display_ALU_expected_prev[5] !== last_saida_display_ALU_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_ALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_ALU_expected_prev);
		$display ("     Real value = %b", saida_display_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_display_ALU_exp[5] = saida_display_ALU_expected_prev[5];
	end
	if (
		( saida_display_ALU_expected_prev[6] !== 1'bx ) && ( saida_display_ALU_prev[6] !== saida_display_ALU_expected_prev[6] )
		&& ((saida_display_ALU_expected_prev[6] !== last_saida_display_ALU_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_ALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_ALU_expected_prev);
		$display ("     Real value = %b", saida_display_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida_display_ALU_exp[6] = saida_display_ALU_expected_prev[6];
	end
	if (
		( saida_display_banco_1_expected_prev[0] !== 1'bx ) && ( saida_display_banco_1_prev[0] !== saida_display_banco_1_expected_prev[0] )
		&& ((saida_display_banco_1_expected_prev[0] !== last_saida_display_banco_1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_1_expected_prev);
		$display ("     Real value = %b", saida_display_banco_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_display_banco_1_exp[0] = saida_display_banco_1_expected_prev[0];
	end
	if (
		( saida_display_banco_1_expected_prev[1] !== 1'bx ) && ( saida_display_banco_1_prev[1] !== saida_display_banco_1_expected_prev[1] )
		&& ((saida_display_banco_1_expected_prev[1] !== last_saida_display_banco_1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_1_expected_prev);
		$display ("     Real value = %b", saida_display_banco_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_display_banco_1_exp[1] = saida_display_banco_1_expected_prev[1];
	end
	if (
		( saida_display_banco_1_expected_prev[2] !== 1'bx ) && ( saida_display_banco_1_prev[2] !== saida_display_banco_1_expected_prev[2] )
		&& ((saida_display_banco_1_expected_prev[2] !== last_saida_display_banco_1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_1_expected_prev);
		$display ("     Real value = %b", saida_display_banco_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_display_banco_1_exp[2] = saida_display_banco_1_expected_prev[2];
	end
	if (
		( saida_display_banco_1_expected_prev[3] !== 1'bx ) && ( saida_display_banco_1_prev[3] !== saida_display_banco_1_expected_prev[3] )
		&& ((saida_display_banco_1_expected_prev[3] !== last_saida_display_banco_1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_1_expected_prev);
		$display ("     Real value = %b", saida_display_banco_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_display_banco_1_exp[3] = saida_display_banco_1_expected_prev[3];
	end
	if (
		( saida_display_banco_1_expected_prev[4] !== 1'bx ) && ( saida_display_banco_1_prev[4] !== saida_display_banco_1_expected_prev[4] )
		&& ((saida_display_banco_1_expected_prev[4] !== last_saida_display_banco_1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_1_expected_prev);
		$display ("     Real value = %b", saida_display_banco_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_display_banco_1_exp[4] = saida_display_banco_1_expected_prev[4];
	end
	if (
		( saida_display_banco_1_expected_prev[5] !== 1'bx ) && ( saida_display_banco_1_prev[5] !== saida_display_banco_1_expected_prev[5] )
		&& ((saida_display_banco_1_expected_prev[5] !== last_saida_display_banco_1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_1_expected_prev);
		$display ("     Real value = %b", saida_display_banco_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_display_banco_1_exp[5] = saida_display_banco_1_expected_prev[5];
	end
	if (
		( saida_display_banco_1_expected_prev[6] !== 1'bx ) && ( saida_display_banco_1_prev[6] !== saida_display_banco_1_expected_prev[6] )
		&& ((saida_display_banco_1_expected_prev[6] !== last_saida_display_banco_1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_1_expected_prev);
		$display ("     Real value = %b", saida_display_banco_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_display_banco_1_exp[6] = saida_display_banco_1_expected_prev[6];
	end
	if (
		( saida_display_banco_2_expected_prev[0] !== 1'bx ) && ( saida_display_banco_2_prev[0] !== saida_display_banco_2_expected_prev[0] )
		&& ((saida_display_banco_2_expected_prev[0] !== last_saida_display_banco_2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_2_expected_prev);
		$display ("     Real value = %b", saida_display_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_display_banco_2_exp[0] = saida_display_banco_2_expected_prev[0];
	end
	if (
		( saida_display_banco_2_expected_prev[1] !== 1'bx ) && ( saida_display_banco_2_prev[1] !== saida_display_banco_2_expected_prev[1] )
		&& ((saida_display_banco_2_expected_prev[1] !== last_saida_display_banco_2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_2_expected_prev);
		$display ("     Real value = %b", saida_display_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_display_banco_2_exp[1] = saida_display_banco_2_expected_prev[1];
	end
	if (
		( saida_display_banco_2_expected_prev[2] !== 1'bx ) && ( saida_display_banco_2_prev[2] !== saida_display_banco_2_expected_prev[2] )
		&& ((saida_display_banco_2_expected_prev[2] !== last_saida_display_banco_2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_2_expected_prev);
		$display ("     Real value = %b", saida_display_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_display_banco_2_exp[2] = saida_display_banco_2_expected_prev[2];
	end
	if (
		( saida_display_banco_2_expected_prev[3] !== 1'bx ) && ( saida_display_banco_2_prev[3] !== saida_display_banco_2_expected_prev[3] )
		&& ((saida_display_banco_2_expected_prev[3] !== last_saida_display_banco_2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_2_expected_prev);
		$display ("     Real value = %b", saida_display_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_display_banco_2_exp[3] = saida_display_banco_2_expected_prev[3];
	end
	if (
		( saida_display_banco_2_expected_prev[4] !== 1'bx ) && ( saida_display_banco_2_prev[4] !== saida_display_banco_2_expected_prev[4] )
		&& ((saida_display_banco_2_expected_prev[4] !== last_saida_display_banco_2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_2_expected_prev);
		$display ("     Real value = %b", saida_display_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_display_banco_2_exp[4] = saida_display_banco_2_expected_prev[4];
	end
	if (
		( saida_display_banco_2_expected_prev[5] !== 1'bx ) && ( saida_display_banco_2_prev[5] !== saida_display_banco_2_expected_prev[5] )
		&& ((saida_display_banco_2_expected_prev[5] !== last_saida_display_banco_2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_2_expected_prev);
		$display ("     Real value = %b", saida_display_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_display_banco_2_exp[5] = saida_display_banco_2_expected_prev[5];
	end
	if (
		( saida_display_banco_2_expected_prev[6] !== 1'bx ) && ( saida_display_banco_2_prev[6] !== saida_display_banco_2_expected_prev[6] )
		&& ((saida_display_banco_2_expected_prev[6] !== last_saida_display_banco_2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_banco_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_banco_2_expected_prev);
		$display ("     Real value = %b", saida_display_banco_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_display_banco_2_exp[6] = saida_display_banco_2_expected_prev[6];
	end
	if (
		( saida_display_contador_expected_prev[0] !== 1'bx ) && ( saida_display_contador_prev[0] !== saida_display_contador_expected_prev[0] )
		&& ((saida_display_contador_expected_prev[0] !== last_saida_display_contador_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_contador[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_contador_expected_prev);
		$display ("     Real value = %b", saida_display_contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_display_contador_exp[0] = saida_display_contador_expected_prev[0];
	end
	if (
		( saida_display_contador_expected_prev[1] !== 1'bx ) && ( saida_display_contador_prev[1] !== saida_display_contador_expected_prev[1] )
		&& ((saida_display_contador_expected_prev[1] !== last_saida_display_contador_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_contador[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_contador_expected_prev);
		$display ("     Real value = %b", saida_display_contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_display_contador_exp[1] = saida_display_contador_expected_prev[1];
	end
	if (
		( saida_display_contador_expected_prev[2] !== 1'bx ) && ( saida_display_contador_prev[2] !== saida_display_contador_expected_prev[2] )
		&& ((saida_display_contador_expected_prev[2] !== last_saida_display_contador_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_contador[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_contador_expected_prev);
		$display ("     Real value = %b", saida_display_contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_display_contador_exp[2] = saida_display_contador_expected_prev[2];
	end
	if (
		( saida_display_contador_expected_prev[3] !== 1'bx ) && ( saida_display_contador_prev[3] !== saida_display_contador_expected_prev[3] )
		&& ((saida_display_contador_expected_prev[3] !== last_saida_display_contador_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_contador[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_contador_expected_prev);
		$display ("     Real value = %b", saida_display_contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_display_contador_exp[3] = saida_display_contador_expected_prev[3];
	end
	if (
		( saida_display_contador_expected_prev[4] !== 1'bx ) && ( saida_display_contador_prev[4] !== saida_display_contador_expected_prev[4] )
		&& ((saida_display_contador_expected_prev[4] !== last_saida_display_contador_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_contador[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_contador_expected_prev);
		$display ("     Real value = %b", saida_display_contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_display_contador_exp[4] = saida_display_contador_expected_prev[4];
	end
	if (
		( saida_display_contador_expected_prev[5] !== 1'bx ) && ( saida_display_contador_prev[5] !== saida_display_contador_expected_prev[5] )
		&& ((saida_display_contador_expected_prev[5] !== last_saida_display_contador_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_contador[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_contador_expected_prev);
		$display ("     Real value = %b", saida_display_contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_display_contador_exp[5] = saida_display_contador_expected_prev[5];
	end
	if (
		( saida_display_contador_expected_prev[6] !== 1'bx ) && ( saida_display_contador_prev[6] !== saida_display_contador_expected_prev[6] )
		&& ((saida_display_contador_expected_prev[6] !== last_saida_display_contador_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_contador[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_contador_expected_prev);
		$display ("     Real value = %b", saida_display_contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_display_contador_exp[6] = saida_display_contador_expected_prev[6];
	end
	if (
		( saida_display_enderesso_1_expected_prev[0] !== 1'bx ) && ( saida_display_enderesso_1_prev[0] !== saida_display_enderesso_1_expected_prev[0] )
		&& ((saida_display_enderesso_1_expected_prev[0] !== last_saida_display_enderesso_1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_1_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_display_enderesso_1_exp[0] = saida_display_enderesso_1_expected_prev[0];
	end
	if (
		( saida_display_enderesso_1_expected_prev[1] !== 1'bx ) && ( saida_display_enderesso_1_prev[1] !== saida_display_enderesso_1_expected_prev[1] )
		&& ((saida_display_enderesso_1_expected_prev[1] !== last_saida_display_enderesso_1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_1_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_display_enderesso_1_exp[1] = saida_display_enderesso_1_expected_prev[1];
	end
	if (
		( saida_display_enderesso_1_expected_prev[2] !== 1'bx ) && ( saida_display_enderesso_1_prev[2] !== saida_display_enderesso_1_expected_prev[2] )
		&& ((saida_display_enderesso_1_expected_prev[2] !== last_saida_display_enderesso_1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_1_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_display_enderesso_1_exp[2] = saida_display_enderesso_1_expected_prev[2];
	end
	if (
		( saida_display_enderesso_1_expected_prev[3] !== 1'bx ) && ( saida_display_enderesso_1_prev[3] !== saida_display_enderesso_1_expected_prev[3] )
		&& ((saida_display_enderesso_1_expected_prev[3] !== last_saida_display_enderesso_1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_1_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_display_enderesso_1_exp[3] = saida_display_enderesso_1_expected_prev[3];
	end
	if (
		( saida_display_enderesso_1_expected_prev[4] !== 1'bx ) && ( saida_display_enderesso_1_prev[4] !== saida_display_enderesso_1_expected_prev[4] )
		&& ((saida_display_enderesso_1_expected_prev[4] !== last_saida_display_enderesso_1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_1_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_display_enderesso_1_exp[4] = saida_display_enderesso_1_expected_prev[4];
	end
	if (
		( saida_display_enderesso_1_expected_prev[5] !== 1'bx ) && ( saida_display_enderesso_1_prev[5] !== saida_display_enderesso_1_expected_prev[5] )
		&& ((saida_display_enderesso_1_expected_prev[5] !== last_saida_display_enderesso_1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_1_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_display_enderesso_1_exp[5] = saida_display_enderesso_1_expected_prev[5];
	end
	if (
		( saida_display_enderesso_1_expected_prev[6] !== 1'bx ) && ( saida_display_enderesso_1_prev[6] !== saida_display_enderesso_1_expected_prev[6] )
		&& ((saida_display_enderesso_1_expected_prev[6] !== last_saida_display_enderesso_1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_1_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saida_display_enderesso_1_exp[6] = saida_display_enderesso_1_expected_prev[6];
	end
	if (
		( saida_display_enderesso_2_expected_prev[0] !== 1'bx ) && ( saida_display_enderesso_2_prev[0] !== saida_display_enderesso_2_expected_prev[0] )
		&& ((saida_display_enderesso_2_expected_prev[0] !== last_saida_display_enderesso_2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_2_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saida_display_enderesso_2_exp[0] = saida_display_enderesso_2_expected_prev[0];
	end
	if (
		( saida_display_enderesso_2_expected_prev[1] !== 1'bx ) && ( saida_display_enderesso_2_prev[1] !== saida_display_enderesso_2_expected_prev[1] )
		&& ((saida_display_enderesso_2_expected_prev[1] !== last_saida_display_enderesso_2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_2_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saida_display_enderesso_2_exp[1] = saida_display_enderesso_2_expected_prev[1];
	end
	if (
		( saida_display_enderesso_2_expected_prev[2] !== 1'bx ) && ( saida_display_enderesso_2_prev[2] !== saida_display_enderesso_2_expected_prev[2] )
		&& ((saida_display_enderesso_2_expected_prev[2] !== last_saida_display_enderesso_2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_2_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saida_display_enderesso_2_exp[2] = saida_display_enderesso_2_expected_prev[2];
	end
	if (
		( saida_display_enderesso_2_expected_prev[3] !== 1'bx ) && ( saida_display_enderesso_2_prev[3] !== saida_display_enderesso_2_expected_prev[3] )
		&& ((saida_display_enderesso_2_expected_prev[3] !== last_saida_display_enderesso_2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_2_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saida_display_enderesso_2_exp[3] = saida_display_enderesso_2_expected_prev[3];
	end
	if (
		( saida_display_enderesso_2_expected_prev[4] !== 1'bx ) && ( saida_display_enderesso_2_prev[4] !== saida_display_enderesso_2_expected_prev[4] )
		&& ((saida_display_enderesso_2_expected_prev[4] !== last_saida_display_enderesso_2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_2_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saida_display_enderesso_2_exp[4] = saida_display_enderesso_2_expected_prev[4];
	end
	if (
		( saida_display_enderesso_2_expected_prev[5] !== 1'bx ) && ( saida_display_enderesso_2_prev[5] !== saida_display_enderesso_2_expected_prev[5] )
		&& ((saida_display_enderesso_2_expected_prev[5] !== last_saida_display_enderesso_2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_2_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saida_display_enderesso_2_exp[5] = saida_display_enderesso_2_expected_prev[5];
	end
	if (
		( saida_display_enderesso_2_expected_prev[6] !== 1'bx ) && ( saida_display_enderesso_2_prev[6] !== saida_display_enderesso_2_expected_prev[6] )
		&& ((saida_display_enderesso_2_expected_prev[6] !== last_saida_display_enderesso_2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_enderesso_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_enderesso_2_expected_prev);
		$display ("     Real value = %b", saida_display_enderesso_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saida_display_enderesso_2_exp[6] = saida_display_enderesso_2_expected_prev[6];
	end
	if (
		( saida_display_estado_expected_prev[0] !== 1'bx ) && ( saida_display_estado_prev[0] !== saida_display_estado_expected_prev[0] )
		&& ((saida_display_estado_expected_prev[0] !== last_saida_display_estado_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_estado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_estado_expected_prev);
		$display ("     Real value = %b", saida_display_estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_display_estado_exp[0] = saida_display_estado_expected_prev[0];
	end
	if (
		( saida_display_estado_expected_prev[1] !== 1'bx ) && ( saida_display_estado_prev[1] !== saida_display_estado_expected_prev[1] )
		&& ((saida_display_estado_expected_prev[1] !== last_saida_display_estado_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_estado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_estado_expected_prev);
		$display ("     Real value = %b", saida_display_estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_display_estado_exp[1] = saida_display_estado_expected_prev[1];
	end
	if (
		( saida_display_estado_expected_prev[2] !== 1'bx ) && ( saida_display_estado_prev[2] !== saida_display_estado_expected_prev[2] )
		&& ((saida_display_estado_expected_prev[2] !== last_saida_display_estado_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_estado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_estado_expected_prev);
		$display ("     Real value = %b", saida_display_estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_display_estado_exp[2] = saida_display_estado_expected_prev[2];
	end
	if (
		( saida_display_estado_expected_prev[3] !== 1'bx ) && ( saida_display_estado_prev[3] !== saida_display_estado_expected_prev[3] )
		&& ((saida_display_estado_expected_prev[3] !== last_saida_display_estado_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_estado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_estado_expected_prev);
		$display ("     Real value = %b", saida_display_estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_display_estado_exp[3] = saida_display_estado_expected_prev[3];
	end
	if (
		( saida_display_estado_expected_prev[4] !== 1'bx ) && ( saida_display_estado_prev[4] !== saida_display_estado_expected_prev[4] )
		&& ((saida_display_estado_expected_prev[4] !== last_saida_display_estado_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_estado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_estado_expected_prev);
		$display ("     Real value = %b", saida_display_estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_display_estado_exp[4] = saida_display_estado_expected_prev[4];
	end
	if (
		( saida_display_estado_expected_prev[5] !== 1'bx ) && ( saida_display_estado_prev[5] !== saida_display_estado_expected_prev[5] )
		&& ((saida_display_estado_expected_prev[5] !== last_saida_display_estado_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_estado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_estado_expected_prev);
		$display ("     Real value = %b", saida_display_estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_display_estado_exp[5] = saida_display_estado_expected_prev[5];
	end
	if (
		( saida_display_estado_expected_prev[6] !== 1'bx ) && ( saida_display_estado_prev[6] !== saida_display_estado_expected_prev[6] )
		&& ((saida_display_estado_expected_prev[6] !== last_saida_display_estado_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_estado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_estado_expected_prev);
		$display ("     Real value = %b", saida_display_estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saida_display_estado_exp[6] = saida_display_estado_expected_prev[6];
	end
	if (
		( saida_display_operacao_expected_prev[0] !== 1'bx ) && ( saida_display_operacao_prev[0] !== saida_display_operacao_expected_prev[0] )
		&& ((saida_display_operacao_expected_prev[0] !== last_saida_display_operacao_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_operacao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_operacao_expected_prev);
		$display ("     Real value = %b", saida_display_operacao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saida_display_operacao_exp[0] = saida_display_operacao_expected_prev[0];
	end
	if (
		( saida_display_operacao_expected_prev[1] !== 1'bx ) && ( saida_display_operacao_prev[1] !== saida_display_operacao_expected_prev[1] )
		&& ((saida_display_operacao_expected_prev[1] !== last_saida_display_operacao_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_operacao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_operacao_expected_prev);
		$display ("     Real value = %b", saida_display_operacao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saida_display_operacao_exp[1] = saida_display_operacao_expected_prev[1];
	end
	if (
		( saida_display_operacao_expected_prev[2] !== 1'bx ) && ( saida_display_operacao_prev[2] !== saida_display_operacao_expected_prev[2] )
		&& ((saida_display_operacao_expected_prev[2] !== last_saida_display_operacao_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_operacao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_operacao_expected_prev);
		$display ("     Real value = %b", saida_display_operacao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saida_display_operacao_exp[2] = saida_display_operacao_expected_prev[2];
	end
	if (
		( saida_display_operacao_expected_prev[3] !== 1'bx ) && ( saida_display_operacao_prev[3] !== saida_display_operacao_expected_prev[3] )
		&& ((saida_display_operacao_expected_prev[3] !== last_saida_display_operacao_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_operacao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_operacao_expected_prev);
		$display ("     Real value = %b", saida_display_operacao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saida_display_operacao_exp[3] = saida_display_operacao_expected_prev[3];
	end
	if (
		( saida_display_operacao_expected_prev[4] !== 1'bx ) && ( saida_display_operacao_prev[4] !== saida_display_operacao_expected_prev[4] )
		&& ((saida_display_operacao_expected_prev[4] !== last_saida_display_operacao_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_operacao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_operacao_expected_prev);
		$display ("     Real value = %b", saida_display_operacao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saida_display_operacao_exp[4] = saida_display_operacao_expected_prev[4];
	end
	if (
		( saida_display_operacao_expected_prev[5] !== 1'bx ) && ( saida_display_operacao_prev[5] !== saida_display_operacao_expected_prev[5] )
		&& ((saida_display_operacao_expected_prev[5] !== last_saida_display_operacao_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_operacao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_operacao_expected_prev);
		$display ("     Real value = %b", saida_display_operacao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saida_display_operacao_exp[5] = saida_display_operacao_expected_prev[5];
	end
	if (
		( saida_display_operacao_expected_prev[6] !== 1'bx ) && ( saida_display_operacao_prev[6] !== saida_display_operacao_expected_prev[6] )
		&& ((saida_display_operacao_expected_prev[6] !== last_saida_display_operacao_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_display_operacao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_display_operacao_expected_prev);
		$display ("     Real value = %b", saida_display_operacao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saida_display_operacao_exp[6] = saida_display_operacao_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processador_programavel_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire [1:0] estado_botao;
wire saida_comprador;
wire [6:0] saida_display_ALU;
wire [6:0] saida_display_banco_1;
wire [6:0] saida_display_banco_2;
wire [6:0] saida_display_contador;
wire [6:0] saida_display_enderesso_1;
wire [6:0] saida_display_enderesso_2;
wire [6:0] saida_display_estado;
wire [6:0] saida_display_operacao;

wire sampler;                             

// assign statements (if any)                          
processador_programavel i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.estado_botao(estado_botao),
	.saida_comprador(saida_comprador),
	.saida_display_ALU(saida_display_ALU),
	.saida_display_banco_1(saida_display_banco_1),
	.saida_display_banco_2(saida_display_banco_2),
	.saida_display_contador(saida_display_contador),
	.saida_display_enderesso_1(saida_display_enderesso_1),
	.saida_display_enderesso_2(saida_display_enderesso_2),
	.saida_display_estado(saida_display_estado),
	.saida_display_operacao(saida_display_operacao)
);

// clock
initial
begin
	repeat(15)
	begin
		clock = 1'b0;
		clock = #20000 1'b1;
		# 20000;
	end
	clock = 1'b0;
end 

processador_programavel_vlg_sample_tst tb_sample (
	.clock(clock),
	.sampler_tx(sampler)
);

processador_programavel_vlg_check_tst tb_out(
	.estado_botao(estado_botao),
	.saida_comprador(saida_comprador),
	.saida_display_ALU(saida_display_ALU),
	.saida_display_banco_1(saida_display_banco_1),
	.saida_display_banco_2(saida_display_banco_2),
	.saida_display_contador(saida_display_contador),
	.saida_display_enderesso_1(saida_display_enderesso_1),
	.saida_display_enderesso_2(saida_display_enderesso_2),
	.saida_display_estado(saida_display_estado),
	.saida_display_operacao(saida_display_operacao),
	.sampler_rx(sampler)
);
endmodule

