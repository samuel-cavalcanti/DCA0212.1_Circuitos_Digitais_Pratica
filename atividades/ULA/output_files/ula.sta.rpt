TimeQuest Timing Analyzer report for ula
Fri Nov 15 01:18:19 2019
Quartus II 32-bit Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition


---------------------
; Table of Contents ;
---------------------
  1. Legal Notice
  2. TimeQuest Timing Analyzer Summary
  3. Parallel Compilation
  4. Clocks
  5. Slow Model Fmax Summary
  6. Slow Model Setup Summary
  7. Slow Model Hold Summary
  8. Slow Model Recovery Summary
  9. Slow Model Removal Summary
 10. Slow Model Minimum Pulse Width Summary
 11. Slow Model Setup: 'operator[0]'
 12. Slow Model Setup: 'inputdata1[0]'
 13. Slow Model Hold: 'inputdata1[0]'
 14. Slow Model Hold: 'operator[0]'
 15. Slow Model Recovery: 'operator[0]'
 16. Slow Model Recovery: 'inputdata1[0]'
 17. Slow Model Removal: 'inputdata1[0]'
 18. Slow Model Removal: 'operator[0]'
 19. Slow Model Minimum Pulse Width: 'inputdata1[0]'
 20. Slow Model Minimum Pulse Width: 'operator[0]'
 21. Setup Times
 22. Hold Times
 23. Clock to Output Times
 24. Minimum Clock to Output Times
 25. Propagation Delay
 26. Minimum Propagation Delay
 27. Fast Model Setup Summary
 28. Fast Model Hold Summary
 29. Fast Model Recovery Summary
 30. Fast Model Removal Summary
 31. Fast Model Minimum Pulse Width Summary
 32. Fast Model Setup: 'operator[0]'
 33. Fast Model Setup: 'inputdata1[0]'
 34. Fast Model Hold: 'inputdata1[0]'
 35. Fast Model Hold: 'operator[0]'
 36. Fast Model Recovery: 'operator[0]'
 37. Fast Model Recovery: 'inputdata1[0]'
 38. Fast Model Removal: 'inputdata1[0]'
 39. Fast Model Removal: 'operator[0]'
 40. Fast Model Minimum Pulse Width: 'inputdata1[0]'
 41. Fast Model Minimum Pulse Width: 'operator[0]'
 42. Setup Times
 43. Hold Times
 44. Clock to Output Times
 45. Minimum Clock to Output Times
 46. Propagation Delay
 47. Minimum Propagation Delay
 48. Multicorner Timing Analysis Summary
 49. Setup Times
 50. Hold Times
 51. Clock to Output Times
 52. Minimum Clock to Output Times
 53. Progagation Delay
 54. Minimum Progagation Delay
 55. Setup Transfers
 56. Hold Transfers
 57. Recovery Transfers
 58. Removal Transfers
 59. Report TCCS
 60. Report RSKM
 61. Unconstrained Paths
 62. TimeQuest Timing Analyzer Messages



----------------
; Legal Notice ;
----------------
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.



+----------------------------------------------------------------------------------------+
; TimeQuest Timing Analyzer Summary                                                      ;
+--------------------+-------------------------------------------------------------------+
; Quartus II Version ; Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition ;
; Revision Name      ; ula                                                               ;
; Device Family      ; Cyclone II                                                        ;
; Device Name        ; EP2C35F672C6                                                      ;
; Timing Models      ; Final                                                             ;
; Delay Model        ; Combined                                                          ;
; Rise/Fall Delays   ; Unavailable                                                       ;
+--------------------+-------------------------------------------------------------------+


Parallel compilation was disabled, but you have multiple processors available. Enable parallel compilation to reduce compilation time.
+-------------------------------------+
; Parallel Compilation                ;
+----------------------------+--------+
; Processors                 ; Number ;
+----------------------------+--------+
; Number detected on machine ; 8      ;
; Maximum allowed            ; 1      ;
+----------------------------+--------+


+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Clocks                                                                                                                                                                                       ;
+---------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+-------------------+
; Clock Name    ; Type ; Period ; Frequency  ; Rise  ; Fall  ; Duty Cycle ; Divide by ; Multiply by ; Phase ; Offset ; Edge List ; Edge Shift ; Inverted ; Master ; Source ; Targets           ;
+---------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+-------------------+
; inputdata1[0] ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { inputdata1[0] } ;
; operator[0]   ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { operator[0] }   ;
+---------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+-------------------+


+------------------------------------------------------------------------+
; Slow Model Fmax Summary                                                ;
+------------+-----------------+---------------+-------------------------+
; Fmax       ; Restricted Fmax ; Clock Name    ; Note                    ;
+------------+-----------------+---------------+-------------------------+
; 380.23 MHz ; 380.23 MHz      ; operator[0]   ;                         ;
; 456.2 MHz  ; 360.49 MHz      ; inputdata1[0] ; limit due to hold check ;
+------------+-----------------+---------------+-------------------------+
This panel reports FMAX for every clock in the design, regardless of the user-specified clock periods.  FMAX is only computed for paths where the source and destination registers or ports are driven by the same clock.  Paths of different clocks, including generated clocks, are ignored.  For paths between a clock and its inversion, FMAX is computed as if the rising and falling edges are scaled along with FMAX, such that the duty cycle (in terms of a percentage) is maintained. Altera recommends that you always use clock constraints and other slack reports for sign-off analysis.


+----------------------------------------+
; Slow Model Setup Summary               ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; operator[0]   ; -2.006 ; -9.231        ;
; inputdata1[0] ; -0.596 ; -1.137        ;
+---------------+--------+---------------+


+----------------------------------------+
; Slow Model Hold Summary                ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; inputdata1[0] ; -1.912 ; -9.063        ;
; operator[0]   ; -0.721 ; -2.960        ;
+---------------+--------+---------------+


+----------------------------------------+
; Slow Model Recovery Summary            ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; operator[0]   ; -0.168 ; -0.168        ;
; inputdata1[0] ; 1.092  ; 0.000         ;
+---------------+--------+---------------+


+----------------------------------------+
; Slow Model Removal Summary             ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; inputdata1[0] ; -3.455 ; -6.910        ;
; operator[0]   ; -2.315 ; -5.305        ;
+---------------+--------+---------------+


+----------------------------------------+
; Slow Model Minimum Pulse Width Summary ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; inputdata1[0] ; -1.222 ; -1.222        ;
; operator[0]   ; -1.222 ; -1.222        ;
+---------------+--------+---------------+


+-------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'operator[0]'                                                                                                           ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; Slack  ; From Node          ; To Node                              ; Launch Clock  ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; -2.006 ; inputdata1[0]      ; mux_ula:mux_1|saida_led              ; inputdata1[0] ; operator[0] ; 0.500        ; 2.880      ; 4.231      ;
; -1.927 ; inputdata1[0]      ; mux_ula:mux_1|ctrl[0]                ; inputdata1[0] ; operator[0] ; 0.500        ; 2.965      ; 4.277      ;
; -1.736 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.576      ; 1.293      ;
; -1.681 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.580      ; 1.463      ;
; -1.513 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.580      ; 1.074      ;
; -1.506 ; inputdata1[0]      ; mux_ula:mux_1|saida_led              ; inputdata1[0] ; operator[0] ; 1.000        ; 2.880      ; 4.231      ;
; -1.494 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.575      ; 1.271      ;
; -1.427 ; inputdata1[0]      ; mux_ula:mux_1|ctrl[0]                ; inputdata1[0] ; operator[0] ; 1.000        ; 2.965      ; 4.277      ;
; -1.424 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.578      ; 0.983      ;
; -1.398 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.414      ; 1.293      ;
; -1.381 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.581      ; 0.943      ;
; -1.343 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.418      ; 1.463      ;
; -1.342 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.577      ; 1.121      ;
; -1.222 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.579      ; 1.003      ;
; -1.175 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.418      ; 1.074      ;
; -1.156 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.413      ; 1.271      ;
; -1.086 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.416      ; 0.983      ;
; -1.043 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.419      ; 0.943      ;
; -1.004 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.415      ; 1.121      ;
; -0.884 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.417      ; 1.003      ;
; -0.815 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.497      ; 1.293      ;
; -0.760 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.501      ; 1.463      ;
; -0.735 ; operator[0]        ; mux_ula:mux_1|saida_led              ; operator[0]   ; operator[0] ; 0.500        ; 2.880      ; 2.960      ;
; -0.628 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 0.500        ; 4.639      ; 4.781      ;
; -0.592 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.501      ; 1.074      ;
; -0.573 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.496      ; 1.271      ;
; -0.560 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.752      ; 1.293      ;
; -0.542 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 0.500        ; 4.637      ; 4.718      ;
; -0.535 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 0.500        ; 4.732      ; 4.781      ;
; -0.505 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.756      ; 1.463      ;
; -0.503 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.499      ; 0.983      ;
; -0.479 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 4.637      ; 4.655      ;
; -0.478 ; operator[0]        ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 0.500        ; 2.965      ; 2.828      ;
; -0.460 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.502      ; 0.943      ;
; -0.458 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 0.500        ; 4.636      ; 4.625      ;
; -0.449 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 0.500        ; 4.730      ; 4.718      ;
; -0.421 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.498      ; 1.121      ;
; -0.386 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 4.730      ; 4.655      ;
; -0.381 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 4.636      ; 4.548      ;
; -0.365 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 0.500        ; 4.729      ; 4.625      ;
; -0.337 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.756      ; 1.074      ;
; -0.335 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 4.639      ; 4.488      ;
; -0.318 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.751      ; 1.271      ;
; -0.301 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.500      ; 1.003      ;
; -0.288 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 4.729      ; 4.548      ;
; -0.253 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 4.641      ; 4.430      ;
; -0.248 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.754      ; 0.983      ;
; -0.242 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 4.732      ; 4.488      ;
; -0.235 ; operator[0]        ; mux_ula:mux_1|saida_led              ; operator[0]   ; operator[0] ; 1.000        ; 2.880      ; 2.960      ;
; -0.222 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.590      ; 1.293      ;
; -0.205 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.757      ; 0.943      ;
; -0.167 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.594      ; 1.463      ;
; -0.166 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.753      ; 1.121      ;
; -0.160 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 4.734      ; 4.430      ;
; -0.153 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.659      ; 1.293      ;
; -0.128 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 1.000        ; 4.639      ; 4.781      ;
; -0.098 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.663      ; 1.463      ;
; -0.046 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.755      ; 1.003      ;
; -0.042 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 1.000        ; 4.637      ; 4.718      ;
; -0.035 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 1.000        ; 4.732      ; 4.781      ;
; 0.001  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.594      ; 1.074      ;
; 0.020  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.589      ; 1.271      ;
; 0.021  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 4.637      ; 4.655      ;
; 0.022  ; operator[0]        ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 1.000        ; 2.965      ; 2.828      ;
; 0.042  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 1.000        ; 4.636      ; 4.625      ;
; 0.051  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 1.000        ; 4.730      ; 4.718      ;
; 0.070  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.663      ; 1.074      ;
; 0.089  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.658      ; 1.271      ;
; 0.090  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.592      ; 0.983      ;
; 0.114  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 4.730      ; 4.655      ;
; 0.119  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 4.636      ; 4.548      ;
; 0.133  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.595      ; 0.943      ;
; 0.135  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 1.000        ; 4.729      ; 4.625      ;
; 0.159  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.661      ; 0.983      ;
; 0.165  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 4.639      ; 4.488      ;
; 0.172  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.591      ; 1.121      ;
; 0.202  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.664      ; 0.943      ;
; 0.212  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 4.729      ; 4.548      ;
; 0.241  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.660      ; 1.121      ;
; 0.247  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 4.641      ; 4.430      ;
; 0.258  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 4.732      ; 4.488      ;
; 0.292  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.593      ; 1.003      ;
; 0.340  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 4.734      ; 4.430      ;
; 0.361  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.662      ; 1.003      ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'inputdata1[0]'                                                                                                           ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; Slack  ; From Node          ; To Node                              ; Launch Clock  ; Latch Clock   ; Relationship ; Clock Skew ; Data Delay ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; -0.596 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 1.716      ; 1.293      ;
; -0.541 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 1.720      ; 1.463      ;
; -0.373 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 1.720      ; 1.074      ;
; -0.354 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 1.715      ; 1.271      ;
; -0.284 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 1.718      ; 0.983      ;
; -0.241 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 1.721      ; 0.943      ;
; -0.202 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 1.717      ; 1.121      ;
; -0.138 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 1.674      ; 1.293      ;
; -0.083 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 1.678      ; 1.463      ;
; -0.082 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 1.719      ; 1.003      ;
; 0.085  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 1.678      ; 1.074      ;
; 0.104  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 1.673      ; 1.271      ;
; 0.174  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 1.676      ; 0.983      ;
; 0.217  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 1.679      ; 0.943      ;
; 0.256  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 1.675      ; 1.121      ;
; 0.376  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 1.677      ; 1.003      ;
; 0.445  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.757      ; 1.293      ;
; 0.500  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.761      ; 1.463      ;
; 0.548  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; inputdata1[0] ; 0.500        ; 5.815      ; 4.781      ;
; 0.580  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.892      ; 1.293      ;
; 0.634  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; inputdata1[0] ; 0.500        ; 5.813      ; 4.718      ;
; 0.635  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.896      ; 1.463      ;
; 0.668  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.761      ; 1.074      ;
; 0.687  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.756      ; 1.271      ;
; 0.697  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 5.813      ; 4.655      ;
; 0.718  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; inputdata1[0] ; 0.500        ; 5.812      ; 4.625      ;
; 0.757  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.759      ; 0.983      ;
; 0.795  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 5.812      ; 4.548      ;
; 0.800  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.762      ; 0.943      ;
; 0.803  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.896      ; 1.074      ;
; 0.822  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.891      ; 1.271      ;
; 0.839  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.758      ; 1.121      ;
; 0.841  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 5.815      ; 4.488      ;
; 0.892  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.894      ; 0.983      ;
; 0.923  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 5.817      ; 4.430      ;
; 0.935  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.897      ; 0.943      ;
; 0.959  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.760      ; 1.003      ;
; 0.974  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.893      ; 1.121      ;
; 0.987  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.799      ; 1.293      ;
; 1.038  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.850      ; 1.293      ;
; 1.042  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.803      ; 1.463      ;
; 1.048  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; inputdata1[0] ; 1.000        ; 5.815      ; 4.781      ;
; 1.093  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.854      ; 1.463      ;
; 1.094  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.895      ; 1.003      ;
; 1.134  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; inputdata1[0] ; 1.000        ; 5.813      ; 4.718      ;
; 1.197  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 5.813      ; 4.655      ;
; 1.210  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.803      ; 1.074      ;
; 1.218  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; inputdata1[0] ; 1.000        ; 5.812      ; 4.625      ;
; 1.229  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.798      ; 1.271      ;
; 1.261  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.854      ; 1.074      ;
; 1.280  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.849      ; 1.271      ;
; 1.295  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 5.812      ; 4.548      ;
; 1.299  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.801      ; 0.983      ;
; 1.341  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 5.815      ; 4.488      ;
; 1.342  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.804      ; 0.943      ;
; 1.350  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.852      ; 0.983      ;
; 1.381  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.800      ; 1.121      ;
; 1.393  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.855      ; 0.943      ;
; 1.423  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 5.817      ; 4.430      ;
; 1.432  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.851      ; 1.121      ;
; 1.501  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.802      ; 1.003      ;
; 1.552  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.853      ; 1.003      ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'inputdata1[0]'                                                                                                            ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; Slack  ; From Node          ; To Node                              ; Launch Clock  ; Latch Clock   ; Relationship ; Clock Skew ; Data Delay ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; -1.912 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.855      ; 0.943      ;
; -1.869 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.852      ; 0.983      ;
; -1.861 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.804      ; 0.943      ;
; -1.850 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.853      ; 1.003      ;
; -1.818 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.801      ; 0.983      ;
; -1.799 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.802      ; 1.003      ;
; -1.780 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.854      ; 1.074      ;
; -1.730 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.851      ; 1.121      ;
; -1.729 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.803      ; 1.074      ;
; -1.679 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.800      ; 1.121      ;
; -1.578 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.849      ; 1.271      ;
; -1.557 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.850      ; 1.293      ;
; -1.527 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.798      ; 1.271      ;
; -1.506 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.799      ; 1.293      ;
; -1.454 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.897      ; 0.943      ;
; -1.411 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.894      ; 0.983      ;
; -1.392 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.895      ; 1.003      ;
; -1.391 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.854      ; 1.463      ;
; -1.387 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 5.817      ; 4.430      ;
; -1.340 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.803      ; 1.463      ;
; -1.331 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 5.815      ; 4.484      ;
; -1.322 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.896      ; 1.074      ;
; -1.319 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 5.813      ; 4.494      ;
; -1.319 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.762      ; 0.943      ;
; -1.276 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.759      ; 0.983      ;
; -1.272 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.893      ; 1.121      ;
; -1.264 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 5.812      ; 4.548      ;
; -1.257 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.760      ; 1.003      ;
; -1.246 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; inputdata1[0] ; 0.000        ; 5.813      ; 4.567      ;
; -1.225 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; inputdata1[0] ; 0.000        ; 5.815      ; 4.590      ;
; -1.187 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.761      ; 1.074      ;
; -1.187 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; inputdata1[0] ; 0.000        ; 5.812      ; 4.625      ;
; -1.137 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.758      ; 1.121      ;
; -1.120 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.891      ; 1.271      ;
; -1.099 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.892      ; 1.293      ;
; -0.985 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.756      ; 1.271      ;
; -0.964 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.757      ; 1.293      ;
; -0.933 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.896      ; 1.463      ;
; -0.887 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 5.817      ; 4.430      ;
; -0.831 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 5.815      ; 4.484      ;
; -0.819 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 5.813      ; 4.494      ;
; -0.798 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.761      ; 1.463      ;
; -0.764 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 5.812      ; 4.548      ;
; -0.746 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; inputdata1[0] ; -0.500       ; 5.813      ; 4.567      ;
; -0.736 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 1.679      ; 0.943      ;
; -0.725 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; inputdata1[0] ; -0.500       ; 5.815      ; 4.590      ;
; -0.693 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 1.676      ; 0.983      ;
; -0.687 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; inputdata1[0] ; -0.500       ; 5.812      ; 4.625      ;
; -0.674 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 1.677      ; 1.003      ;
; -0.604 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 1.678      ; 1.074      ;
; -0.554 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 1.675      ; 1.121      ;
; -0.402 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 1.673      ; 1.271      ;
; -0.381 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 1.674      ; 1.293      ;
; -0.278 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 1.721      ; 0.943      ;
; -0.235 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 1.718      ; 0.983      ;
; -0.216 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 1.719      ; 1.003      ;
; -0.215 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 1.678      ; 1.463      ;
; -0.146 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 1.720      ; 1.074      ;
; -0.096 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 1.717      ; 1.121      ;
; 0.056  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 1.715      ; 1.271      ;
; 0.077  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 1.716      ; 1.293      ;
; 0.243  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 1.720      ; 1.463      ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'operator[0]'                                                                                                            ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; Slack  ; From Node          ; To Node                              ; Launch Clock  ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; -0.721 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.664      ; 0.943      ;
; -0.678 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.661      ; 0.983      ;
; -0.659 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.662      ; 1.003      ;
; -0.652 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.595      ; 0.943      ;
; -0.609 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.592      ; 0.983      ;
; -0.590 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.593      ; 1.003      ;
; -0.589 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.663      ; 1.074      ;
; -0.539 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.660      ; 1.121      ;
; -0.520 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.594      ; 1.074      ;
; -0.470 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.591      ; 1.121      ;
; -0.406 ; operator[0]        ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 0.000        ; 2.965      ; 2.559      ;
; -0.387 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.658      ; 1.271      ;
; -0.366 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.659      ; 1.293      ;
; -0.318 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.589      ; 1.271      ;
; -0.314 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.757      ; 0.943      ;
; -0.304 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 4.734      ; 4.430      ;
; -0.297 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.590      ; 1.293      ;
; -0.271 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.754      ; 0.983      ;
; -0.252 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.755      ; 1.003      ;
; -0.248 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 4.732      ; 4.484      ;
; -0.236 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 4.730      ; 4.494      ;
; -0.211 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 4.641      ; 4.430      ;
; -0.205 ; operator[0]        ; mux_ula:mux_1|saida_led              ; operator[0]   ; operator[0] ; 0.000        ; 2.880      ; 2.675      ;
; -0.200 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.663      ; 1.463      ;
; -0.182 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.756      ; 1.074      ;
; -0.181 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 4.729      ; 4.548      ;
; -0.163 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 0.000        ; 4.730      ; 4.567      ;
; -0.155 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 4.639      ; 4.484      ;
; -0.143 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 4.637      ; 4.494      ;
; -0.142 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 0.000        ; 4.732      ; 4.590      ;
; -0.132 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.753      ; 1.121      ;
; -0.131 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.594      ; 1.463      ;
; -0.104 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 0.000        ; 4.729      ; 4.625      ;
; -0.088 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 4.636      ; 4.548      ;
; -0.070 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 0.000        ; 4.637      ; 4.567      ;
; -0.059 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.502      ; 0.943      ;
; -0.049 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 0.000        ; 4.639      ; 4.590      ;
; -0.016 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.499      ; 0.983      ;
; -0.011 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 0.000        ; 4.636      ; 4.625      ;
; 0.003  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.500      ; 1.003      ;
; 0.020  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.751      ; 1.271      ;
; 0.041  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.752      ; 1.293      ;
; 0.073  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.501      ; 1.074      ;
; 0.094  ; operator[0]        ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; -0.500       ; 2.965      ; 2.559      ;
; 0.123  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.498      ; 1.121      ;
; 0.196  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 4.734      ; 4.430      ;
; 0.207  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.756      ; 1.463      ;
; 0.252  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 4.732      ; 4.484      ;
; 0.264  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 4.730      ; 4.494      ;
; 0.275  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.496      ; 1.271      ;
; 0.289  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 4.641      ; 4.430      ;
; 0.295  ; operator[0]        ; mux_ula:mux_1|saida_led              ; operator[0]   ; operator[0] ; -0.500       ; 2.880      ; 2.675      ;
; 0.296  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.497      ; 1.293      ;
; 0.319  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 4.729      ; 4.548      ;
; 0.337  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; -0.500       ; 4.730      ; 4.567      ;
; 0.345  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 4.639      ; 4.484      ;
; 0.357  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 4.637      ; 4.494      ;
; 0.358  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; -0.500       ; 4.732      ; 4.590      ;
; 0.396  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; -0.500       ; 4.729      ; 4.625      ;
; 0.412  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 4.636      ; 4.548      ;
; 0.430  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; -0.500       ; 4.637      ; 4.567      ;
; 0.451  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; -0.500       ; 4.639      ; 4.590      ;
; 0.462  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.501      ; 1.463      ;
; 0.489  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; -0.500       ; 4.636      ; 4.625      ;
; 0.524  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.419      ; 0.943      ;
; 0.567  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.416      ; 0.983      ;
; 0.586  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.417      ; 1.003      ;
; 0.656  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.418      ; 1.074      ;
; 0.706  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.415      ; 1.121      ;
; 0.858  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.413      ; 1.271      ;
; 0.862  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.581      ; 0.943      ;
; 0.879  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.414      ; 1.293      ;
; 0.905  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.578      ; 0.983      ;
; 0.924  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.579      ; 1.003      ;
; 0.994  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.580      ; 1.074      ;
; 1.042  ; inputdata1[0]      ; mux_ula:mux_1|ctrl[0]                ; inputdata1[0] ; operator[0] ; 0.000        ; 2.965      ; 4.007      ;
; 1.044  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.577      ; 1.121      ;
; 1.045  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.418      ; 1.463      ;
; 1.196  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.575      ; 1.271      ;
; 1.213  ; inputdata1[0]      ; mux_ula:mux_1|saida_led              ; inputdata1[0] ; operator[0] ; 0.000        ; 2.880      ; 4.093      ;
; 1.217  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.576      ; 1.293      ;
; 1.383  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.580      ; 1.463      ;
; 1.542  ; inputdata1[0]      ; mux_ula:mux_1|ctrl[0]                ; inputdata1[0] ; operator[0] ; -0.500       ; 2.965      ; 4.007      ;
; 1.713  ; inputdata1[0]      ; mux_ula:mux_1|saida_led              ; inputdata1[0] ; operator[0] ; -0.500       ; 2.880      ; 4.093      ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Recovery: 'operator[0]'                                                                                                           ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; Slack  ; From Node             ; To Node                              ; Launch Clock  ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; -0.168 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 6.231      ; 5.380      ;
; -0.006 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 6.393      ; 5.380      ;
; 0.053  ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 6.230      ; 5.379      ;
; 0.060  ; operator[0]           ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 0.500        ; 2.965      ; 2.290      ;
; 0.215  ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 6.392      ; 5.379      ;
; 0.332  ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 6.231      ; 5.380      ;
; 0.494  ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 6.393      ; 5.380      ;
; 0.553  ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 6.230      ; 5.379      ;
; 0.560  ; operator[0]           ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 1.000        ; 2.965      ; 2.290      ;
; 0.588  ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 3.428      ; 1.821      ;
; 0.715  ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 6.392      ; 5.379      ;
; 0.809  ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 3.427      ; 1.820      ;
; 0.926  ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 3.266      ; 1.821      ;
; 0.972  ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 6.231      ; 4.240      ;
; 1.134  ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 6.393      ; 4.240      ;
; 1.147  ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 3.265      ; 1.820      ;
; 1.193  ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 6.230      ; 4.239      ;
; 1.355  ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 6.392      ; 4.239      ;
; 1.472  ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 6.231      ; 4.240      ;
; 1.634  ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 6.393      ; 4.240      ;
; 1.693  ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 6.230      ; 4.239      ;
; 1.855  ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 6.392      ; 4.239      ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Recovery: 'inputdata1[0]'                                                                                                          ;
+-------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; Slack ; From Node             ; To Node                              ; Launch Clock  ; Latch Clock   ; Relationship ; Clock Skew ; Data Delay ;
+-------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; 1.092 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 7.491      ; 5.380      ;
; 1.134 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 7.533      ; 5.380      ;
; 1.313 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 7.490      ; 5.379      ;
; 1.355 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 7.532      ; 5.379      ;
; 1.592 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 7.491      ; 5.380      ;
; 1.634 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 7.533      ; 5.380      ;
; 1.728 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 4.568      ; 1.821      ;
; 1.813 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 7.490      ; 5.379      ;
; 1.855 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 7.532      ; 5.379      ;
; 1.949 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 4.567      ; 1.820      ;
; 2.186 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 4.526      ; 1.821      ;
; 2.232 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 7.491      ; 4.240      ;
; 2.274 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 7.533      ; 4.240      ;
; 2.407 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 4.525      ; 1.820      ;
; 2.453 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 7.490      ; 4.239      ;
; 2.495 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 7.532      ; 4.239      ;
; 2.732 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 7.491      ; 4.240      ;
; 2.774 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 7.533      ; 4.240      ;
; 2.953 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 7.490      ; 4.239      ;
; 2.995 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 7.532      ; 4.239      ;
+-------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+


+------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Removal: 'inputdata1[0]'                                                                                                            ;
+--------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; Slack  ; From Node             ; To Node                              ; Launch Clock  ; Latch Clock   ; Relationship ; Clock Skew ; Data Delay ;
+--------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; -3.455 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 7.533      ; 4.078      ;
; -3.455 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 7.532      ; 4.077      ;
; -3.413 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 7.491      ; 4.078      ;
; -3.413 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 7.490      ; 4.077      ;
; -2.955 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 7.533      ; 4.078      ;
; -2.955 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 7.532      ; 4.077      ;
; -2.913 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 7.491      ; 4.078      ;
; -2.913 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 7.490      ; 4.077      ;
; -2.705 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 4.526      ; 1.821      ;
; -2.705 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 4.525      ; 1.820      ;
; -2.247 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 4.568      ; 1.821      ;
; -2.247 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 4.567      ; 1.820      ;
; -2.195 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 7.533      ; 5.338      ;
; -2.195 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 7.532      ; 5.337      ;
; -2.153 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 7.491      ; 5.338      ;
; -2.153 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 7.490      ; 5.337      ;
; -1.695 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 7.533      ; 5.338      ;
; -1.695 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 7.532      ; 5.337      ;
; -1.653 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 7.491      ; 5.338      ;
; -1.653 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 7.490      ; 5.337      ;
+--------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Removal: 'operator[0]'                                                                                                            ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; Slack  ; From Node             ; To Node                              ; Launch Clock  ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; -2.315 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 6.393      ; 4.078      ;
; -2.315 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 6.392      ; 4.077      ;
; -2.153 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 6.231      ; 4.078      ;
; -2.153 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 6.230      ; 4.077      ;
; -1.815 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 6.393      ; 4.078      ;
; -1.815 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 6.392      ; 4.077      ;
; -1.653 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 6.231      ; 4.078      ;
; -1.653 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 6.230      ; 4.077      ;
; -1.445 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 3.266      ; 1.821      ;
; -1.445 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 3.265      ; 1.820      ;
; -1.107 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 3.428      ; 1.821      ;
; -1.107 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 3.427      ; 1.820      ;
; -1.055 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 6.393      ; 5.338      ;
; -1.055 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 6.392      ; 5.337      ;
; -0.893 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 6.231      ; 5.338      ;
; -0.893 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 6.230      ; 5.337      ;
; -0.675 ; operator[0]           ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 0.000        ; 2.965      ; 2.290      ;
; -0.555 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 6.393      ; 5.338      ;
; -0.555 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 6.392      ; 5.337      ;
; -0.393 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 6.231      ; 5.338      ;
; -0.393 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 6.230      ; 5.337      ;
; -0.175 ; operator[0]           ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; -0.500       ; 2.965      ; 2.290      ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'inputdata1[0]'                                                                                 ;
+--------+--------------+----------------+------------------+---------------+------------+----------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock         ; Clock Edge ; Target                                 ;
+--------+--------------+----------------+------------------+---------------+------------+----------------------------------------+
; -1.222 ; 1.000        ; 2.222          ; Port Rate        ; inputdata1[0] ; Rise       ; inputdata1[0]                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; inputdata1[0]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; inputdata1[0]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; maq_1|process_0~0|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; maq_1|process_0~0|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; maq_1|process_0~0|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; maq_1|process_0~0|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; maq_1|resultmaq~1|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; maq_1|resultmaq~1|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; maq_1|resultmaq~1|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; maq_1|resultmaq~1|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~1|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~1|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~1|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~1|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~2|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~2|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~2|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~2|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~3|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~3|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~3|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~3|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]~11|datab                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]~11|datab                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[0]                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[0]                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[1]                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[1]                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[2]                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[2]                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[3]                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[3]                     ;
+--------+--------------+----------------+------------------+---------------+------------+----------------------------------------+


+-------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'operator[0]'                                                                                 ;
+--------+--------------+----------------+------------------+-------------+------------+----------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock       ; Clock Edge ; Target                                 ;
+--------+--------------+----------------+------------------+-------------+------------+----------------------------------------+
; -1.222 ; 1.000        ; 2.222          ; Port Rate        ; operator[0] ; Rise       ; operator[0]                            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|Equal0~0|combout                 ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|Equal0~0|combout                 ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|Equal0~0|datad                   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|Equal0~0|datad                   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[0]|dataa                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[0]|dataa                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[1]~3|dataa                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[1]~3|dataa                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|ctrl[1]~7|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|ctrl[1]~7|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|saida_led|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|saida_led|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|saida_led~4|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|saida_led~4|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|saida_led~4|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|saida_led~4|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|saida_led~5|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|saida_led~5|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|saida_led~5|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|saida_led~5|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|saida_led~6|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|saida_led~6|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|saida_led~6|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|saida_led~6|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~10|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~10|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~10|datad                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]~10|datad                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~11|datac                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~11|datac                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~11|datad                    ;
+--------+--------------+----------------+------------------+-------------+------------+----------------------------------------+


+---------------------------------------------------------------------------------+
; Setup Times                                                                     ;
+----------------+---------------+--------+--------+------------+-----------------+
; Data Port      ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+----------------+---------------+--------+--------+------------+-----------------+
; inputdata1[*]  ; inputdata1[0] ; 3.881  ; 3.881  ; Fall       ; inputdata1[0]   ;
;  inputdata1[0] ; inputdata1[0] ; -0.197 ; -0.197 ; Fall       ; inputdata1[0]   ;
;  inputdata1[1] ; inputdata1[0] ; 3.881  ; 3.881  ; Fall       ; inputdata1[0]   ;
;  inputdata1[2] ; inputdata1[0] ; 2.744  ; 2.744  ; Fall       ; inputdata1[0]   ;
;  inputdata1[3] ; inputdata1[0] ; 3.766  ; 3.766  ; Fall       ; inputdata1[0]   ;
; inputdata2[*]  ; inputdata1[0] ; 3.901  ; 3.901  ; Fall       ; inputdata1[0]   ;
;  inputdata2[0] ; inputdata1[0] ; 3.742  ; 3.742  ; Fall       ; inputdata1[0]   ;
;  inputdata2[1] ; inputdata1[0] ; 3.819  ; 3.819  ; Fall       ; inputdata1[0]   ;
;  inputdata2[2] ; inputdata1[0] ; 2.792  ; 2.792  ; Fall       ; inputdata1[0]   ;
;  inputdata2[3] ; inputdata1[0] ; 3.901  ; 3.901  ; Fall       ; inputdata1[0]   ;
; operator[*]    ; inputdata1[0] ; 3.757  ; 3.757  ; Fall       ; inputdata1[0]   ;
;  operator[0]   ; inputdata1[0] ; -0.048 ; -0.048 ; Fall       ; inputdata1[0]   ;
;  operator[1]   ; inputdata1[0] ; 3.657  ; 3.657  ; Fall       ; inputdata1[0]   ;
;  operator[2]   ; inputdata1[0] ; 3.757  ; 3.757  ; Fall       ; inputdata1[0]   ;
; inputdata1[*]  ; operator[0]   ; 6.827  ; 6.827  ; Rise       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 2.506  ; 2.506  ; Rise       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; 6.827  ; 6.827  ; Rise       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; 6.600  ; 6.600  ; Rise       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; 6.107  ; 6.107  ; Rise       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; 6.779  ; 6.779  ; Rise       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; 6.485  ; 6.485  ; Rise       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; 6.521  ; 6.521  ; Rise       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; 6.779  ; 6.779  ; Rise       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; 5.964  ; 5.964  ; Rise       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 5.794  ; 5.794  ; Rise       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 1.235  ; 1.235  ; Rise       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; 5.794  ; 5.794  ; Rise       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; 4.840  ; 4.840  ; Rise       ; operator[0]     ;
; inputdata1[*]  ; operator[0]   ; 6.813  ; 6.813  ; Fall       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 2.427  ; 2.427  ; Fall       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; 6.813  ; 6.813  ; Fall       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; 6.586  ; 6.586  ; Fall       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; 5.896  ; 5.896  ; Fall       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; 6.765  ; 6.765  ; Fall       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; 6.369  ; 6.369  ; Fall       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; 6.483  ; 6.483  ; Fall       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; 6.765  ; 6.765  ; Fall       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; 5.753  ; 5.753  ; Fall       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 6.719  ; 6.719  ; Fall       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 1.128  ; 1.128  ; Fall       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; 6.719  ; 6.719  ; Fall       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; 6.130  ; 6.130  ; Fall       ; operator[0]     ;
+----------------+---------------+--------+--------+------------+-----------------+


+---------------------------------------------------------------------------------+
; Hold Times                                                                      ;
+----------------+---------------+--------+--------+------------+-----------------+
; Data Port      ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+----------------+---------------+--------+--------+------------+-----------------+
; inputdata1[*]  ; inputdata1[0] ; 1.387  ; 1.387  ; Fall       ; inputdata1[0]   ;
;  inputdata1[0] ; inputdata1[0] ; 1.387  ; 1.387  ; Fall       ; inputdata1[0]   ;
;  inputdata1[1] ; inputdata1[0] ; -1.400 ; -1.400 ; Fall       ; inputdata1[0]   ;
;  inputdata1[2] ; inputdata1[0] ; -1.048 ; -1.048 ; Fall       ; inputdata1[0]   ;
;  inputdata1[3] ; inputdata1[0] ; -1.602 ; -1.602 ; Fall       ; inputdata1[0]   ;
; inputdata2[*]  ; inputdata1[0] ; -1.128 ; -1.128 ; Fall       ; inputdata1[0]   ;
;  inputdata2[0] ; inputdata1[0] ; -1.777 ; -1.777 ; Fall       ; inputdata1[0]   ;
;  inputdata2[1] ; inputdata1[0] ; -2.109 ; -2.109 ; Fall       ; inputdata1[0]   ;
;  inputdata2[2] ; inputdata1[0] ; -1.128 ; -1.128 ; Fall       ; inputdata1[0]   ;
;  inputdata2[3] ; inputdata1[0] ; -2.337 ; -2.337 ; Fall       ; inputdata1[0]   ;
; operator[*]    ; inputdata1[0] ; 1.246  ; 1.246  ; Fall       ; inputdata1[0]   ;
;  operator[0]   ; inputdata1[0] ; 1.246  ; 1.246  ; Fall       ; inputdata1[0]   ;
;  operator[1]   ; inputdata1[0] ; -1.238 ; -1.238 ; Fall       ; inputdata1[0]   ;
;  operator[2]   ; inputdata1[0] ; -1.361 ; -1.361 ; Fall       ; inputdata1[0]   ;
; inputdata1[*]  ; operator[0]   ; 0.304  ; 0.304  ; Rise       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 0.304  ; 0.304  ; Rise       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; -2.483 ; -2.483 ; Rise       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; -2.131 ; -2.131 ; Rise       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; -2.685 ; -2.685 ; Rise       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; -2.211 ; -2.211 ; Rise       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; -2.860 ; -2.860 ; Rise       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; -3.192 ; -3.192 ; Rise       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; -2.211 ; -2.211 ; Rise       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; -3.420 ; -3.420 ; Rise       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 0.205  ; 0.205  ; Rise       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 0.205  ; 0.205  ; Rise       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; -2.321 ; -2.321 ; Rise       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; -2.444 ; -2.444 ; Rise       ; operator[0]     ;
; inputdata1[*]  ; operator[0]   ; 0.211  ; 0.211  ; Fall       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 0.211  ; 0.211  ; Fall       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; -2.576 ; -2.576 ; Fall       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; -2.224 ; -2.224 ; Fall       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; -2.778 ; -2.778 ; Fall       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; -2.304 ; -2.304 ; Fall       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; -2.953 ; -2.953 ; Fall       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; -3.285 ; -3.285 ; Fall       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; -2.304 ; -2.304 ; Fall       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; -3.513 ; -3.513 ; Fall       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 0.406  ; 0.406  ; Fall       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 0.406  ; 0.406  ; Fall       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; -2.414 ; -2.414 ; Fall       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; -2.537 ; -2.537 ; Fall       ; operator[0]     ;
+----------------+---------------+--------+--------+------------+-----------------+


+------------------------------------------------------------------------------+
; Clock to Output Times                                                        ;
+-------------+---------------+--------+--------+------------+-----------------+
; Data Port   ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+-------------+---------------+--------+--------+------------+-----------------+
; display[*]  ; inputdata1[0] ; 14.530 ; 14.530 ; Rise       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 13.341 ; 13.341 ; Rise       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 14.402 ; 14.402 ; Rise       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 13.466 ; 13.466 ; Rise       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 14.459 ; 14.459 ; Rise       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 14.530 ; 14.530 ; Rise       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 13.022 ; 13.022 ; Rise       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 13.941 ; 13.941 ; Rise       ; inputdata1[0]   ;
; display[*]  ; inputdata1[0] ; 15.416 ; 15.416 ; Fall       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 14.259 ; 14.259 ; Fall       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 15.288 ; 15.288 ; Fall       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 13.424 ; 13.424 ; Fall       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 15.310 ; 15.310 ; Fall       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 15.416 ; 15.416 ; Fall       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 12.980 ; 12.980 ; Fall       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 14.796 ; 14.796 ; Fall       ; inputdata1[0]   ;
; display[*]  ; operator[0]   ; 14.333 ; 14.333 ; Rise       ; operator[0]     ;
;  display[0] ; operator[0]   ; 13.176 ; 13.176 ; Rise       ; operator[0]     ;
;  display[1] ; operator[0]   ; 14.205 ; 14.205 ; Rise       ; operator[0]     ;
;  display[2] ; operator[0]   ; 12.326 ; 12.326 ; Rise       ; operator[0]     ;
;  display[3] ; operator[0]   ; 14.227 ; 14.227 ; Rise       ; operator[0]     ;
;  display[4] ; operator[0]   ; 14.333 ; 14.333 ; Rise       ; operator[0]     ;
;  display[5] ; operator[0]   ; 11.882 ; 11.882 ; Rise       ; operator[0]     ;
;  display[6] ; operator[0]   ; 13.713 ; 13.713 ; Rise       ; operator[0]     ;
; led         ; operator[0]   ; 7.562  ; 7.562  ; Rise       ; operator[0]     ;
; display[*]  ; operator[0]   ; 14.240 ; 14.240 ; Fall       ; operator[0]     ;
;  display[0] ; operator[0]   ; 13.083 ; 13.083 ; Fall       ; operator[0]     ;
;  display[1] ; operator[0]   ; 14.112 ; 14.112 ; Fall       ; operator[0]     ;
;  display[2] ; operator[0]   ; 12.164 ; 12.164 ; Fall       ; operator[0]     ;
;  display[3] ; operator[0]   ; 14.134 ; 14.134 ; Fall       ; operator[0]     ;
;  display[4] ; operator[0]   ; 14.240 ; 14.240 ; Fall       ; operator[0]     ;
;  display[5] ; operator[0]   ; 11.720 ; 11.720 ; Fall       ; operator[0]     ;
;  display[6] ; operator[0]   ; 13.620 ; 13.620 ; Fall       ; operator[0]     ;
+-------------+---------------+--------+--------+------------+-----------------+


+------------------------------------------------------------------------------+
; Minimum Clock to Output Times                                                ;
+-------------+---------------+--------+--------+------------+-----------------+
; Data Port   ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+-------------+---------------+--------+--------+------------+-----------------+
; display[*]  ; inputdata1[0] ; 11.110 ; 11.110 ; Rise       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 11.110 ; 11.110 ; Rise       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 12.179 ; 12.179 ; Rise       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 13.466 ; 13.466 ; Rise       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 12.228 ; 12.228 ; Rise       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 12.299 ; 12.299 ; Rise       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 13.022 ; 13.022 ; Rise       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 11.539 ; 11.539 ; Rise       ; inputdata1[0]   ;
; display[*]  ; inputdata1[0] ; 11.110 ; 11.110 ; Fall       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 11.110 ; 11.110 ; Fall       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 12.179 ; 12.179 ; Fall       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 13.424 ; 13.424 ; Fall       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 12.228 ; 12.228 ; Fall       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 12.299 ; 12.299 ; Fall       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 12.980 ; 12.980 ; Fall       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 11.539 ; 11.539 ; Fall       ; inputdata1[0]   ;
; display[*]  ; operator[0]   ; 9.850  ; 9.850  ; Rise       ; operator[0]     ;
;  display[0] ; operator[0]   ; 9.850  ; 9.850  ; Rise       ; operator[0]     ;
;  display[1] ; operator[0]   ; 10.919 ; 10.919 ; Rise       ; operator[0]     ;
;  display[2] ; operator[0]   ; 12.326 ; 12.326 ; Rise       ; operator[0]     ;
;  display[3] ; operator[0]   ; 10.968 ; 10.968 ; Rise       ; operator[0]     ;
;  display[4] ; operator[0]   ; 11.039 ; 11.039 ; Rise       ; operator[0]     ;
;  display[5] ; operator[0]   ; 11.882 ; 11.882 ; Rise       ; operator[0]     ;
;  display[6] ; operator[0]   ; 10.279 ; 10.279 ; Rise       ; operator[0]     ;
; led         ; operator[0]   ; 7.562  ; 7.562  ; Rise       ; operator[0]     ;
; display[*]  ; operator[0]   ; 9.809  ; 9.809  ; Fall       ; operator[0]     ;
;  display[0] ; operator[0]   ; 9.809  ; 9.809  ; Fall       ; operator[0]     ;
;  display[1] ; operator[0]   ; 10.878 ; 10.878 ; Fall       ; operator[0]     ;
;  display[2] ; operator[0]   ; 12.164 ; 12.164 ; Fall       ; operator[0]     ;
;  display[3] ; operator[0]   ; 10.927 ; 10.927 ; Fall       ; operator[0]     ;
;  display[4] ; operator[0]   ; 10.998 ; 10.998 ; Fall       ; operator[0]     ;
;  display[5] ; operator[0]   ; 11.720 ; 11.720 ; Fall       ; operator[0]     ;
;  display[6] ; operator[0]   ; 10.238 ; 10.238 ; Fall       ; operator[0]     ;
+-------------+---------------+--------+--------+------------+-----------------+


+-----------------------------------------------------------------+
; Propagation Delay                                               ;
+---------------+-------------+--------+--------+--------+--------+
; Input Port    ; Output Port ; RR     ; RF     ; FR     ; FF     ;
+---------------+-------------+--------+--------+--------+--------+
; inputdata1[1] ; display[0]  ; 17.727 ; 17.727 ; 17.727 ; 17.727 ;
; inputdata1[1] ; display[1]  ; 18.788 ; 18.788 ; 18.788 ; 18.788 ;
; inputdata1[1] ; display[3]  ; 18.845 ; 18.845 ; 18.845 ; 18.845 ;
; inputdata1[1] ; display[4]  ; 18.916 ; 18.916 ; 18.916 ; 18.916 ;
; inputdata1[1] ; display[6]  ; 18.327 ; 18.327 ; 18.327 ; 18.327 ;
; inputdata1[2] ; display[0]  ; 17.500 ; 17.500 ; 17.500 ; 17.500 ;
; inputdata1[2] ; display[1]  ; 18.561 ; 18.561 ; 18.561 ; 18.561 ;
; inputdata1[2] ; display[3]  ; 18.618 ; 18.618 ; 18.618 ; 18.618 ;
; inputdata1[2] ; display[4]  ; 18.689 ; 18.689 ; 18.689 ; 18.689 ;
; inputdata1[2] ; display[6]  ; 18.100 ; 18.100 ; 18.100 ; 18.100 ;
; inputdata1[3] ; display[0]  ; 17.038 ; 17.038 ; 17.038 ; 17.038 ;
; inputdata1[3] ; display[1]  ; 18.099 ; 18.099 ; 18.099 ; 18.099 ;
; inputdata1[3] ; display[3]  ; 18.156 ; 18.156 ; 18.156 ; 18.156 ;
; inputdata1[3] ; display[4]  ; 18.227 ; 18.227 ; 18.227 ; 18.227 ;
; inputdata1[3] ; display[6]  ; 17.638 ; 17.638 ; 17.638 ; 17.638 ;
; inputdata2[0] ; display[0]  ; 17.416 ; 17.416 ; 17.416 ; 17.416 ;
; inputdata2[0] ; display[1]  ; 18.477 ; 18.477 ; 18.477 ; 18.477 ;
; inputdata2[0] ; display[3]  ; 18.534 ; 18.534 ; 18.534 ; 18.534 ;
; inputdata2[0] ; display[4]  ; 18.605 ; 18.605 ; 18.605 ; 18.605 ;
; inputdata2[0] ; display[6]  ; 18.016 ; 18.016 ; 18.016 ; 18.016 ;
; inputdata2[1] ; display[0]  ; 17.397 ; 17.397 ; 17.397 ; 17.397 ;
; inputdata2[1] ; display[1]  ; 18.458 ; 18.458 ; 18.458 ; 18.458 ;
; inputdata2[1] ; display[3]  ; 18.515 ; 18.515 ; 18.515 ; 18.515 ;
; inputdata2[1] ; display[4]  ; 18.586 ; 18.586 ; 18.586 ; 18.586 ;
; inputdata2[1] ; display[6]  ; 17.997 ; 17.997 ; 17.997 ; 17.997 ;
; inputdata2[2] ; display[0]  ; 17.679 ; 17.679 ; 17.679 ; 17.679 ;
; inputdata2[2] ; display[1]  ; 18.740 ; 18.740 ; 18.740 ; 18.740 ;
; inputdata2[2] ; display[3]  ; 18.797 ; 18.797 ; 18.797 ; 18.797 ;
; inputdata2[2] ; display[4]  ; 18.868 ; 18.868 ; 18.868 ; 18.868 ;
; inputdata2[2] ; display[6]  ; 18.279 ; 18.279 ; 18.279 ; 18.279 ;
; inputdata2[3] ; display[0]  ; 16.895 ; 16.895 ; 16.895 ; 16.895 ;
; inputdata2[3] ; display[1]  ; 17.956 ; 17.956 ; 17.956 ; 17.956 ;
; inputdata2[3] ; display[3]  ; 18.013 ; 18.013 ; 18.013 ; 18.013 ;
; inputdata2[3] ; display[4]  ; 18.084 ; 18.084 ; 18.084 ; 18.084 ;
; inputdata2[3] ; display[6]  ; 17.495 ; 17.495 ; 17.495 ; 17.495 ;
; operator[1]   ; display[0]  ; 17.352 ; 17.352 ; 17.352 ; 17.352 ;
; operator[1]   ; display[1]  ; 18.413 ; 18.413 ; 18.413 ; 18.413 ;
; operator[1]   ; display[3]  ; 18.470 ; 18.470 ; 18.470 ; 18.470 ;
; operator[1]   ; display[4]  ; 18.541 ; 18.541 ; 18.541 ; 18.541 ;
; operator[1]   ; display[6]  ; 17.952 ; 17.952 ; 17.952 ; 17.952 ;
; operator[2]   ; display[0]  ; 16.763 ; 16.763 ; 16.763 ; 16.763 ;
; operator[2]   ; display[1]  ; 17.824 ; 17.824 ; 17.824 ; 17.824 ;
; operator[2]   ; display[3]  ; 17.881 ; 17.881 ; 17.881 ; 17.881 ;
; operator[2]   ; display[4]  ; 17.952 ; 17.952 ; 17.952 ; 17.952 ;
; operator[2]   ; display[6]  ; 17.363 ; 17.363 ; 17.363 ; 17.363 ;
+---------------+-------------+--------+--------+--------+--------+


+-----------------------------------------------------------------+
; Minimum Propagation Delay                                       ;
+---------------+-------------+--------+--------+--------+--------+
; Input Port    ; Output Port ; RR     ; RF     ; FR     ; FF     ;
+---------------+-------------+--------+--------+--------+--------+
; inputdata1[1] ; display[0]  ; 15.538 ; 15.275 ; 15.275 ; 15.538 ;
; inputdata1[1] ; display[1]  ; 16.607 ; 16.344 ; 16.344 ; 16.607 ;
; inputdata1[1] ; display[3]  ; 16.656 ; 16.393 ; 16.393 ; 16.656 ;
; inputdata1[1] ; display[4]  ; 16.727 ; 16.464 ; 16.464 ; 16.727 ;
; inputdata1[1] ; display[6]  ; 15.967 ; 15.704 ; 15.704 ; 15.967 ;
; inputdata1[2] ; display[0]  ; 15.311 ; 15.078 ; 15.078 ; 15.311 ;
; inputdata1[2] ; display[1]  ; 16.380 ; 16.147 ; 16.147 ; 16.380 ;
; inputdata1[2] ; display[3]  ; 16.429 ; 16.196 ; 16.196 ; 16.429 ;
; inputdata1[2] ; display[4]  ; 16.500 ; 16.267 ; 16.267 ; 16.500 ;
; inputdata1[2] ; display[6]  ; 15.740 ; 15.507 ; 15.507 ; 15.740 ;
; inputdata1[3] ; display[0]  ; 14.507 ; 14.849 ; 14.849 ; 14.507 ;
; inputdata1[3] ; display[1]  ; 15.576 ; 15.918 ; 15.918 ; 15.576 ;
; inputdata1[3] ; display[3]  ; 15.625 ; 15.967 ; 15.967 ; 15.625 ;
; inputdata1[3] ; display[4]  ; 15.696 ; 16.038 ; 16.038 ; 15.696 ;
; inputdata1[3] ; display[6]  ; 14.936 ; 15.278 ; 15.278 ; 14.936 ;
; inputdata2[0] ; display[0]  ; 15.227 ; 15.094 ; 15.094 ; 15.227 ;
; inputdata2[0] ; display[1]  ; 16.296 ; 16.163 ; 16.163 ; 16.296 ;
; inputdata2[0] ; display[3]  ; 16.345 ; 16.212 ; 16.212 ; 16.345 ;
; inputdata2[0] ; display[4]  ; 16.416 ; 16.283 ; 16.283 ; 16.416 ;
; inputdata2[0] ; display[6]  ; 15.656 ; 15.523 ; 15.523 ; 15.656 ;
; inputdata2[1] ; display[0]  ; 14.975 ; 15.208 ; 15.208 ; 14.975 ;
; inputdata2[1] ; display[1]  ; 16.044 ; 16.277 ; 16.277 ; 16.044 ;
; inputdata2[1] ; display[3]  ; 16.093 ; 16.326 ; 16.326 ; 16.093 ;
; inputdata2[1] ; display[4]  ; 16.164 ; 16.397 ; 16.397 ; 16.164 ;
; inputdata2[1] ; display[6]  ; 15.404 ; 15.637 ; 15.637 ; 15.404 ;
; inputdata2[2] ; display[0]  ; 15.254 ; 15.490 ; 15.490 ; 15.254 ;
; inputdata2[2] ; display[1]  ; 16.323 ; 16.559 ; 16.559 ; 16.323 ;
; inputdata2[2] ; display[3]  ; 16.372 ; 16.608 ; 16.608 ; 16.372 ;
; inputdata2[2] ; display[4]  ; 16.443 ; 16.679 ; 16.679 ; 16.443 ;
; inputdata2[2] ; display[6]  ; 15.683 ; 15.919 ; 15.919 ; 15.683 ;
; inputdata2[3] ; display[0]  ; 14.706 ; 14.363 ; 14.363 ; 14.706 ;
; inputdata2[3] ; display[1]  ; 15.775 ; 15.432 ; 15.432 ; 15.775 ;
; inputdata2[3] ; display[3]  ; 15.824 ; 15.481 ; 15.481 ; 15.824 ;
; inputdata2[3] ; display[4]  ; 15.895 ; 15.552 ; 15.552 ; 15.895 ;
; inputdata2[3] ; display[6]  ; 15.135 ; 14.792 ; 14.792 ; 15.135 ;
; operator[1]   ; display[0]  ; 13.902 ; 14.233 ; 14.233 ; 13.902 ;
; operator[1]   ; display[1]  ; 14.971 ; 15.302 ; 15.302 ; 14.971 ;
; operator[1]   ; display[3]  ; 15.020 ; 15.351 ; 15.351 ; 15.020 ;
; operator[1]   ; display[4]  ; 15.091 ; 15.422 ; 15.422 ; 15.091 ;
; operator[1]   ; display[6]  ; 14.331 ; 14.662 ; 14.662 ; 14.331 ;
; operator[2]   ; display[0]  ; 13.342 ; 13.821 ; 13.821 ; 13.342 ;
; operator[2]   ; display[1]  ; 14.411 ; 14.890 ; 14.890 ; 14.411 ;
; operator[2]   ; display[3]  ; 14.460 ; 14.939 ; 14.939 ; 14.460 ;
; operator[2]   ; display[4]  ; 14.531 ; 15.010 ; 15.010 ; 14.531 ;
; operator[2]   ; display[6]  ; 13.771 ; 14.250 ; 14.250 ; 13.771 ;
+---------------+-------------+--------+--------+--------+--------+


+----------------------------------------+
; Fast Model Setup Summary               ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; operator[0]   ; -0.570 ; -1.986        ;
; inputdata1[0] ; 0.032  ; 0.000         ;
+---------------+--------+---------------+


+----------------------------------------+
; Fast Model Hold Summary                ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; inputdata1[0] ; -0.905 ; -5.251        ;
; operator[0]   ; -0.437 ; -2.602        ;
+---------------+--------+---------------+


+---------------------------------------+
; Fast Model Recovery Summary           ;
+---------------+-------+---------------+
; Clock         ; Slack ; End Point TNS ;
+---------------+-------+---------------+
; operator[0]   ; 0.332 ; 0.000         ;
; inputdata1[0] ; 1.103 ; 0.000         ;
+---------------+-------+---------------+


+----------------------------------------+
; Fast Model Removal Summary             ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; inputdata1[0] ; -1.828 ; -3.655        ;
; operator[0]   ; -1.343 ; -2.994        ;
+---------------+--------+---------------+


+----------------------------------------+
; Fast Model Minimum Pulse Width Summary ;
+---------------+--------+---------------+
; Clock         ; Slack  ; End Point TNS ;
+---------------+--------+---------------+
; inputdata1[0] ; -1.222 ; -1.222        ;
; operator[0]   ; -1.222 ; -1.222        ;
+---------------+--------+---------------+


+-------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'operator[0]'                                                                                                           ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; Slack  ; From Node          ; To Node                              ; Launch Clock  ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; -0.570 ; inputdata1[0]      ; mux_ula:mux_1|saida_led              ; inputdata1[0] ; operator[0] ; 0.500        ; 1.397      ; 1.978      ;
; -0.541 ; inputdata1[0]      ; mux_ula:mux_1|ctrl[0]                ; inputdata1[0] ; operator[0] ; 0.500        ; 1.453      ; 2.017      ;
; -0.442 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.248      ; 0.549      ;
; -0.433 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.248      ; 0.633      ;
; -0.349 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.248      ; 0.456      ;
; -0.348 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.247      ; 0.547      ;
; -0.307 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.247      ; 0.413      ;
; -0.282 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.249      ; 0.390      ;
; -0.268 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.246      ; 0.466      ;
; -0.228 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 0.247      ; 0.427      ;
; -0.070 ; inputdata1[0]      ; mux_ula:mux_1|saida_led              ; inputdata1[0] ; operator[0] ; 1.000        ; 1.397      ; 1.978      ;
; -0.062 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 0.628      ; 0.549      ;
; -0.053 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 0.628      ; 0.633      ;
; -0.041 ; inputdata1[0]      ; mux_ula:mux_1|ctrl[0]                ; inputdata1[0] ; operator[0] ; 1.000        ; 1.453      ; 2.017      ;
; -0.035 ; operator[0]        ; mux_ula:mux_1|saida_led              ; operator[0]   ; operator[0] ; 0.500        ; 1.397      ; 1.443      ;
; -0.030 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.160      ; 0.549      ;
; -0.021 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.160      ; 0.633      ;
; 0.031  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 0.628      ; 0.456      ;
; 0.032  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 0.627      ; 0.547      ;
; 0.063  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.160      ; 0.456      ;
; 0.064  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.159      ; 0.547      ;
; 0.072  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 0.762      ; 0.549      ;
; 0.073  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 0.627      ; 0.413      ;
; 0.081  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 0.762      ; 0.633      ;
; 0.098  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 0.629      ; 0.390      ;
; 0.105  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.159      ; 0.413      ;
; 0.107  ; operator[0]        ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 0.500        ; 1.453      ; 1.369      ;
; 0.112  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 0.626      ; 0.466      ;
; 0.130  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.161      ; 0.390      ;
; 0.144  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.158      ; 0.466      ;
; 0.152  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 0.627      ; 0.427      ;
; 0.165  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 0.762      ; 0.456      ;
; 0.166  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 0.761      ; 0.547      ;
; 0.184  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 0.159      ; 0.427      ;
; 0.207  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 0.761      ; 0.413      ;
; 0.232  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 0.763      ; 0.390      ;
; 0.246  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 0.760      ; 0.466      ;
; 0.286  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 0.761      ; 0.427      ;
; 0.336  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 0.500        ; 2.486      ; 2.252      ;
; 0.337  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 0.500        ; 2.487      ; 2.245      ;
; 0.382  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 0.500        ; 2.532      ; 2.252      ;
; 0.383  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 0.500        ; 2.533      ; 2.245      ;
; 0.388  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 2.486      ; 2.200      ;
; 0.399  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 0.500        ; 2.485      ; 2.184      ;
; 0.434  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 2.532      ; 2.200      ;
; 0.445  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 0.500        ; 2.531      ; 2.184      ;
; 0.447  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 2.485      ; 2.136      ;
; 0.461  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 2.487      ; 2.121      ;
; 0.465  ; operator[0]        ; mux_ula:mux_1|saida_led              ; operator[0]   ; operator[0] ; 1.000        ; 1.397      ; 1.443      ;
; 0.484  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 0.674      ; 0.549      ;
; 0.491  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 2.486      ; 2.095      ;
; 0.493  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 2.531      ; 2.136      ;
; 0.493  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 0.674      ; 0.633      ;
; 0.507  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 2.533      ; 2.121      ;
; 0.526  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 0.716      ; 0.549      ;
; 0.535  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 0.716      ; 0.633      ;
; 0.537  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 0.500        ; 2.532      ; 2.095      ;
; 0.577  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 0.674      ; 0.456      ;
; 0.578  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 0.673      ; 0.547      ;
; 0.607  ; operator[0]        ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 1.000        ; 1.453      ; 1.369      ;
; 0.619  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 0.716      ; 0.456      ;
; 0.619  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 0.673      ; 0.413      ;
; 0.620  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 0.715      ; 0.547      ;
; 0.644  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 0.675      ; 0.390      ;
; 0.658  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 0.672      ; 0.466      ;
; 0.661  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 0.715      ; 0.413      ;
; 0.686  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 0.717      ; 0.390      ;
; 0.698  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 0.673      ; 0.427      ;
; 0.700  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 0.714      ; 0.466      ;
; 0.740  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 0.715      ; 0.427      ;
; 0.836  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 1.000        ; 2.486      ; 2.252      ;
; 0.837  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 1.000        ; 2.487      ; 2.245      ;
; 0.882  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 1.000        ; 2.532      ; 2.252      ;
; 0.883  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 1.000        ; 2.533      ; 2.245      ;
; 0.888  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 2.486      ; 2.200      ;
; 0.899  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 1.000        ; 2.485      ; 2.184      ;
; 0.934  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 2.532      ; 2.200      ;
; 0.945  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 1.000        ; 2.531      ; 2.184      ;
; 0.947  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 2.485      ; 2.136      ;
; 0.961  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 2.487      ; 2.121      ;
; 0.991  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 2.486      ; 2.095      ;
; 0.993  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 2.531      ; 2.136      ;
; 1.007  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 2.533      ; 2.121      ;
; 1.037  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 1.000        ; 2.532      ; 2.095      ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+


+--------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'inputdata1[0]'                                                                                                          ;
+-------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; Slack ; From Node          ; To Node                              ; Launch Clock  ; Latch Clock   ; Relationship ; Clock Skew ; Data Delay ;
+-------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; 0.032 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 0.722      ; 0.549      ;
; 0.041 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 0.722      ; 0.633      ;
; 0.125 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 0.722      ; 0.456      ;
; 0.126 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 0.721      ; 0.547      ;
; 0.167 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 0.721      ; 0.413      ;
; 0.192 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 0.723      ; 0.390      ;
; 0.206 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 0.720      ; 0.466      ;
; 0.246 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 0.721      ; 0.427      ;
; 0.511 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.201      ; 0.549      ;
; 0.520 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.201      ; 0.633      ;
; 0.543 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 0.733      ; 0.549      ;
; 0.546 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.236      ; 0.549      ;
; 0.552 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 0.733      ; 0.633      ;
; 0.555 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.236      ; 0.633      ;
; 0.604 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.201      ; 0.456      ;
; 0.605 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.200      ; 0.547      ;
; 0.636 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 0.733      ; 0.456      ;
; 0.637 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 0.732      ; 0.547      ;
; 0.639 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.236      ; 0.456      ;
; 0.640 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.235      ; 0.547      ;
; 0.646 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.200      ; 0.413      ;
; 0.671 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.202      ; 0.390      ;
; 0.678 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 0.732      ; 0.413      ;
; 0.681 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.235      ; 0.413      ;
; 0.685 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.199      ; 0.466      ;
; 0.703 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 0.734      ; 0.390      ;
; 0.706 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.237      ; 0.390      ;
; 0.717 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 0.731      ; 0.466      ;
; 0.720 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.234      ; 0.466      ;
; 0.725 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.200      ; 0.427      ;
; 0.757 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 0.732      ; 0.427      ;
; 0.760 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 1.235      ; 0.427      ;
; 0.850 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; inputdata1[0] ; 0.500        ; 3.000      ; 2.252      ;
; 0.851 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; inputdata1[0] ; 0.500        ; 3.001      ; 2.245      ;
; 0.902 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 3.000      ; 2.200      ;
; 0.913 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.999      ; 2.184      ;
; 0.961 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 2.999      ; 2.136      ;
; 0.975 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 3.001      ; 2.121      ;
; 1.000 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.190      ; 0.549      ;
; 1.005 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 3.000      ; 2.095      ;
; 1.009 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.190      ; 0.633      ;
; 1.057 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.247      ; 0.549      ;
; 1.066 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.247      ; 0.633      ;
; 1.093 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.190      ; 0.456      ;
; 1.094 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.189      ; 0.547      ;
; 1.135 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.189      ; 0.413      ;
; 1.150 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.247      ; 0.456      ;
; 1.151 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.246      ; 0.547      ;
; 1.160 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.191      ; 0.390      ;
; 1.174 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.188      ; 0.466      ;
; 1.192 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.246      ; 0.413      ;
; 1.214 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.189      ; 0.427      ;
; 1.217 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.248      ; 0.390      ;
; 1.231 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.245      ; 0.466      ;
; 1.271 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 1.246      ; 0.427      ;
; 1.350 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; inputdata1[0] ; 1.000        ; 3.000      ; 2.252      ;
; 1.351 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; inputdata1[0] ; 1.000        ; 3.001      ; 2.245      ;
; 1.402 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 3.000      ; 2.200      ;
; 1.413 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.999      ; 2.184      ;
; 1.461 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 2.999      ; 2.136      ;
; 1.475 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 3.001      ; 2.121      ;
; 1.505 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 3.000      ; 2.095      ;
+-------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'inputdata1[0]'                                                                                                            ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; Slack  ; From Node          ; To Node                              ; Launch Clock  ; Latch Clock   ; Relationship ; Clock Skew ; Data Delay ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; -0.905 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 3.000      ; 2.095      ;
; -0.904 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 3.001      ; 2.097      ;
; -0.902 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 3.000      ; 2.098      ;
; -0.863 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 2.999      ; 2.136      ;
; -0.858 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.248      ; 0.390      ;
; -0.842 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; inputdata1[0] ; 0.000        ; 3.001      ; 2.159      ;
; -0.833 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.246      ; 0.413      ;
; -0.829 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; inputdata1[0] ; 0.000        ; 3.000      ; 2.171      ;
; -0.819 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.246      ; 0.427      ;
; -0.815 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.999      ; 2.184      ;
; -0.801 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.191      ; 0.390      ;
; -0.791 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.247      ; 0.456      ;
; -0.779 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.245      ; 0.466      ;
; -0.776 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.189      ; 0.413      ;
; -0.762 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.189      ; 0.427      ;
; -0.734 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.190      ; 0.456      ;
; -0.722 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.188      ; 0.466      ;
; -0.699 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.246      ; 0.547      ;
; -0.698 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.247      ; 0.549      ;
; -0.642 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.189      ; 0.547      ;
; -0.641 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.190      ; 0.549      ;
; -0.614 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.247      ; 0.633      ;
; -0.557 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 1.190      ; 0.633      ;
; -0.405 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 3.000      ; 2.095      ;
; -0.404 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 3.001      ; 2.097      ;
; -0.402 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 3.000      ; 2.098      ;
; -0.363 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 2.999      ; 2.136      ;
; -0.347 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.237      ; 0.390      ;
; -0.344 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 0.734      ; 0.390      ;
; -0.342 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; inputdata1[0] ; -0.500       ; 3.001      ; 2.159      ;
; -0.329 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; inputdata1[0] ; -0.500       ; 3.000      ; 2.171      ;
; -0.322 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.235      ; 0.413      ;
; -0.319 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 0.732      ; 0.413      ;
; -0.315 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.999      ; 2.184      ;
; -0.312 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.202      ; 0.390      ;
; -0.308 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.235      ; 0.427      ;
; -0.305 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 0.732      ; 0.427      ;
; -0.287 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.200      ; 0.413      ;
; -0.280 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.236      ; 0.456      ;
; -0.277 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 0.733      ; 0.456      ;
; -0.273 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.200      ; 0.427      ;
; -0.268 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.234      ; 0.466      ;
; -0.265 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 0.731      ; 0.466      ;
; -0.245 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.201      ; 0.456      ;
; -0.233 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.199      ; 0.466      ;
; -0.188 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.235      ; 0.547      ;
; -0.187 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.236      ; 0.549      ;
; -0.185 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 0.732      ; 0.547      ;
; -0.184 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 0.733      ; 0.549      ;
; -0.153 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.200      ; 0.547      ;
; -0.152 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.201      ; 0.549      ;
; -0.103 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.236      ; 0.633      ;
; -0.100 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 0.733      ; 0.633      ;
; -0.068 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 1.201      ; 0.633      ;
; 0.167  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 0.723      ; 0.390      ;
; 0.192  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 0.721      ; 0.413      ;
; 0.206  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 0.721      ; 0.427      ;
; 0.234  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 0.722      ; 0.456      ;
; 0.246  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 0.720      ; 0.466      ;
; 0.326  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 0.721      ; 0.547      ;
; 0.327  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 0.722      ; 0.549      ;
; 0.411  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 0.722      ; 0.633      ;
+--------+--------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'operator[0]'                                                                                                            ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; Slack  ; From Node          ; To Node                              ; Launch Clock  ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; -0.437 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 2.532      ; 2.095      ;
; -0.436 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 2.533      ; 2.097      ;
; -0.434 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 2.532      ; 2.098      ;
; -0.395 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 2.531      ; 2.136      ;
; -0.391 ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 2.486      ; 2.095      ;
; -0.390 ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 2.487      ; 2.097      ;
; -0.388 ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 2.486      ; 2.098      ;
; -0.374 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 0.000        ; 2.533      ; 2.159      ;
; -0.361 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 0.000        ; 2.532      ; 2.171      ;
; -0.349 ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; 0.000        ; 2.485      ; 2.136      ;
; -0.347 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 0.000        ; 2.531      ; 2.184      ;
; -0.328 ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; 0.000        ; 2.487      ; 2.159      ;
; -0.327 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 0.717      ; 0.390      ;
; -0.315 ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; 0.000        ; 2.486      ; 2.171      ;
; -0.302 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 0.715      ; 0.413      ;
; -0.301 ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; 0.000        ; 2.485      ; 2.184      ;
; -0.288 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 0.715      ; 0.427      ;
; -0.285 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 0.675      ; 0.390      ;
; -0.260 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 0.716      ; 0.456      ;
; -0.260 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 0.673      ; 0.413      ;
; -0.248 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 0.714      ; 0.466      ;
; -0.246 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 0.673      ; 0.427      ;
; -0.218 ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 0.674      ; 0.456      ;
; -0.206 ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 0.672      ; 0.466      ;
; -0.191 ; operator[0]        ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 0.000        ; 1.453      ; 1.262      ;
; -0.168 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 0.715      ; 0.547      ;
; -0.167 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 0.716      ; 0.549      ;
; -0.126 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 0.673      ; 0.547      ;
; -0.125 ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 0.674      ; 0.549      ;
; -0.094 ; operator[0]        ; mux_ula:mux_1|saida_led              ; operator[0]   ; operator[0] ; 0.000        ; 1.397      ; 1.303      ;
; -0.083 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 0.716      ; 0.633      ;
; -0.041 ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 0.674      ; 0.633      ;
; 0.063  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 2.532      ; 2.095      ;
; 0.064  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 2.533      ; 2.097      ;
; 0.066  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 2.532      ; 2.098      ;
; 0.105  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 2.531      ; 2.136      ;
; 0.109  ; inputdata1[0]      ; mux_ula:mux_1|y[0]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 2.486      ; 2.095      ;
; 0.110  ; inputdata1[0]      ; mux_ula:mux_1|y[2]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 2.487      ; 2.097      ;
; 0.112  ; inputdata1[0]      ; mux_ula:mux_1|y[3]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 2.486      ; 2.098      ;
; 0.126  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; -0.500       ; 2.533      ; 2.159      ;
; 0.127  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 0.763      ; 0.390      ;
; 0.139  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; -0.500       ; 2.532      ; 2.171      ;
; 0.151  ; inputdata1[0]      ; mux_ula:mux_1|y[1]                   ; inputdata1[0] ; operator[0] ; -0.500       ; 2.485      ; 2.136      ;
; 0.152  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 0.761      ; 0.413      ;
; 0.153  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; -0.500       ; 2.531      ; 2.184      ;
; 0.166  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 0.761      ; 0.427      ;
; 0.172  ; operator[0]        ; mux_ula:mux_1|y[2]                   ; operator[0]   ; operator[0] ; -0.500       ; 2.487      ; 2.159      ;
; 0.185  ; operator[0]        ; mux_ula:mux_1|y[3]                   ; operator[0]   ; operator[0] ; -0.500       ; 2.486      ; 2.171      ;
; 0.194  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 0.762      ; 0.456      ;
; 0.199  ; operator[0]        ; mux_ula:mux_1|y[1]                   ; operator[0]   ; operator[0] ; -0.500       ; 2.485      ; 2.184      ;
; 0.206  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 0.760      ; 0.466      ;
; 0.229  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.161      ; 0.390      ;
; 0.254  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.159      ; 0.413      ;
; 0.261  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 0.629      ; 0.390      ;
; 0.268  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.159      ; 0.427      ;
; 0.286  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 0.761      ; 0.547      ;
; 0.286  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 0.627      ; 0.413      ;
; 0.287  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 0.762      ; 0.549      ;
; 0.296  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.160      ; 0.456      ;
; 0.300  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 0.627      ; 0.427      ;
; 0.308  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.158      ; 0.466      ;
; 0.309  ; operator[0]        ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; -0.500       ; 1.453      ; 1.262      ;
; 0.328  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 0.628      ; 0.456      ;
; 0.340  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 0.626      ; 0.466      ;
; 0.371  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 0.762      ; 0.633      ;
; 0.388  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.159      ; 0.547      ;
; 0.389  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.160      ; 0.549      ;
; 0.406  ; operator[0]        ; mux_ula:mux_1|saida_led              ; operator[0]   ; operator[0] ; -0.500       ; 1.397      ; 1.303      ;
; 0.420  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 0.627      ; 0.547      ;
; 0.421  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 0.628      ; 0.549      ;
; 0.436  ; inputdata1[0]      ; mux_ula:mux_1|ctrl[0]                ; inputdata1[0] ; operator[0] ; 0.000        ; 1.453      ; 1.889      ;
; 0.473  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 0.160      ; 0.633      ;
; 0.505  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 0.628      ; 0.633      ;
; 0.538  ; inputdata1[0]      ; mux_ula:mux_1|saida_led              ; inputdata1[0] ; operator[0] ; 0.000        ; 1.397      ; 1.935      ;
; 0.641  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.249      ; 0.390      ;
; 0.666  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.247      ; 0.413      ;
; 0.680  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.247      ; 0.427      ;
; 0.708  ; mux_ula:mux_1|y[3] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.248      ; 0.456      ;
; 0.720  ; mux_ula:mux_1|y[2] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.246      ; 0.466      ;
; 0.800  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.247      ; 0.547      ;
; 0.801  ; mux_ula:mux_1|y[0] ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.248      ; 0.549      ;
; 0.885  ; mux_ula:mux_1|y[1] ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 0.248      ; 0.633      ;
; 0.936  ; inputdata1[0]      ; mux_ula:mux_1|ctrl[0]                ; inputdata1[0] ; operator[0] ; -0.500       ; 1.453      ; 1.889      ;
; 1.038  ; inputdata1[0]      ; mux_ula:mux_1|saida_led              ; inputdata1[0] ; operator[0] ; -0.500       ; 1.397      ; 1.935      ;
+--------+--------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Recovery: 'operator[0]'                                                                                                          ;
+-------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; Slack ; From Node             ; To Node                              ; Launch Clock  ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+-------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; 0.332 ; operator[0]           ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 0.500        ; 1.453      ; 1.144      ;
; 0.541 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 3.160      ; 2.478      ;
; 0.629 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.500        ; 3.248      ; 2.478      ;
; 0.633 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 3.159      ; 2.478      ;
; 0.721 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.500        ; 3.247      ; 2.478      ;
; 0.832 ; operator[0]           ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 1.000        ; 1.453      ; 1.144      ;
; 0.850 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 1.795      ; 0.804      ;
; 0.942 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 1.794      ; 0.804      ;
; 1.026 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 3.160      ; 1.993      ;
; 1.041 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 3.160      ; 2.478      ;
; 1.114 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.500        ; 3.248      ; 1.993      ;
; 1.118 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 3.159      ; 1.993      ;
; 1.129 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 1.000        ; 3.248      ; 2.478      ;
; 1.133 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 3.159      ; 2.478      ;
; 1.206 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.500        ; 3.247      ; 1.993      ;
; 1.221 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 1.000        ; 3.247      ; 2.478      ;
; 1.262 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 1.707      ; 0.804      ;
; 1.354 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 1.706      ; 0.804      ;
; 1.526 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 3.160      ; 1.993      ;
; 1.614 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 1.000        ; 3.248      ; 1.993      ;
; 1.618 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 3.159      ; 1.993      ;
; 1.706 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 1.000        ; 3.247      ; 1.993      ;
+-------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Recovery: 'inputdata1[0]'                                                                                                          ;
+-------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; Slack ; From Node             ; To Node                              ; Launch Clock  ; Latch Clock   ; Relationship ; Clock Skew ; Data Delay ;
+-------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; 1.103 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 3.722      ; 2.478      ;
; 1.114 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 3.733      ; 2.478      ;
; 1.195 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 3.721      ; 2.478      ;
; 1.206 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.500        ; 3.732      ; 2.478      ;
; 1.324 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.269      ; 0.804      ;
; 1.416 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 2.268      ; 0.804      ;
; 1.588 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 3.722      ; 1.993      ;
; 1.599 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.500        ; 3.733      ; 1.993      ;
; 1.603 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 3.722      ; 2.478      ;
; 1.614 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 3.733      ; 2.478      ;
; 1.680 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 3.721      ; 1.993      ;
; 1.691 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.500        ; 3.732      ; 1.993      ;
; 1.695 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 3.721      ; 2.478      ;
; 1.706 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 1.000        ; 3.732      ; 2.478      ;
; 1.835 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.280      ; 0.804      ;
; 1.927 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 2.279      ; 0.804      ;
; 2.088 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 3.722      ; 1.993      ;
; 2.099 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 1.000        ; 3.733      ; 1.993      ;
; 2.180 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 3.721      ; 1.993      ;
; 2.191 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 1.000        ; 3.732      ; 1.993      ;
+-------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+


+------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Removal: 'inputdata1[0]'                                                                                                            ;
+--------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; Slack  ; From Node             ; To Node                              ; Launch Clock  ; Latch Clock   ; Relationship ; Clock Skew ; Data Delay ;
+--------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+
; -1.828 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 3.733      ; 1.905      ;
; -1.827 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 3.732      ; 1.905      ;
; -1.817 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 3.722      ; 1.905      ;
; -1.816 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 3.721      ; 1.905      ;
; -1.476 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.280      ; 0.804      ;
; -1.475 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; 0.000        ; 2.279      ; 0.804      ;
; -1.328 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 3.733      ; 1.905      ;
; -1.327 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 3.732      ; 1.905      ;
; -1.317 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 3.722      ; 1.905      ;
; -1.316 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 3.721      ; 1.905      ;
; -1.266 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 3.733      ; 2.467      ;
; -1.265 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 3.732      ; 2.467      ;
; -1.255 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 3.722      ; 2.467      ;
; -1.254 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; 0.000        ; 3.721      ; 2.467      ;
; -0.965 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.269      ; 0.804      ;
; -0.964 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; inputdata1[0] ; -0.500       ; 2.268      ; 0.804      ;
; -0.766 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 3.733      ; 2.467      ;
; -0.765 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 3.732      ; 2.467      ;
; -0.755 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 3.722      ; 2.467      ;
; -0.754 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; inputdata1[0] ; -0.500       ; 3.721      ; 2.467      ;
+--------+-----------------------+--------------------------------------+---------------+---------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Removal: 'operator[0]'                                                                                                            ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; Slack  ; From Node             ; To Node                              ; Launch Clock  ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+
; -1.343 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 3.248      ; 1.905      ;
; -1.342 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 3.247      ; 1.905      ;
; -1.255 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 3.160      ; 1.905      ;
; -1.254 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 3.159      ; 1.905      ;
; -0.903 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; 0.000        ; 1.707      ; 0.804      ;
; -0.902 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; 0.000        ; 1.706      ; 0.804      ;
; -0.843 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 3.248      ; 1.905      ;
; -0.842 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 3.247      ; 1.905      ;
; -0.781 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 3.248      ; 2.467      ;
; -0.780 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 3.247      ; 2.467      ;
; -0.755 ; operator[0]           ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 3.160      ; 1.905      ;
; -0.754 ; operator[0]           ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 3.159      ; 1.905      ;
; -0.693 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; 0.000        ; 3.160      ; 2.467      ;
; -0.692 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; 0.000        ; 3.159      ; 2.467      ;
; -0.491 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[2] ; operator[0]   ; operator[0] ; -0.500       ; 1.795      ; 0.804      ;
; -0.490 ; mux_ula:mux_1|ctrl[0] ; convdisplay:convdisplay_1|display[5] ; operator[0]   ; operator[0] ; -0.500       ; 1.794      ; 0.804      ;
; -0.309 ; operator[0]           ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; 0.000        ; 1.453      ; 1.144      ;
; -0.281 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 3.248      ; 2.467      ;
; -0.280 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 3.247      ; 2.467      ;
; -0.193 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[2] ; inputdata1[0] ; operator[0] ; -0.500       ; 3.160      ; 2.467      ;
; -0.192 ; inputdata1[0]         ; convdisplay:convdisplay_1|display[5] ; inputdata1[0] ; operator[0] ; -0.500       ; 3.159      ; 2.467      ;
; 0.191  ; operator[0]           ; mux_ula:mux_1|ctrl[0]                ; operator[0]   ; operator[0] ; -0.500       ; 1.453      ; 1.144      ;
+--------+-----------------------+--------------------------------------+---------------+-------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'inputdata1[0]'                                                                                 ;
+--------+--------------+----------------+------------------+---------------+------------+----------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock         ; Clock Edge ; Target                                 ;
+--------+--------------+----------------+------------------+---------------+------------+----------------------------------------+
; -1.222 ; 1.000        ; 2.222          ; Port Rate        ; inputdata1[0] ; Rise       ; inputdata1[0]                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; inputdata1[0]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; inputdata1[0]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; maq_1|process_0~0|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; maq_1|process_0~0|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; maq_1|process_0~0|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; maq_1|process_0~0|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; maq_1|resultmaq~1|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; maq_1|resultmaq~1|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; maq_1|resultmaq~1|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; maq_1|resultmaq~1|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~1|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~1|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~1|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~1|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~2|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~2|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~2|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~2|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~3|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~3|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~3|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~3|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Rise       ; mux_1|y[3]~11|datab                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Rise       ; mux_1|y[3]~11|datab                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[0]                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[0]                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[1]                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[1]                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[2]                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[2]                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[3]                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputdata1[0] ; Fall       ; mux_ula:mux_1|y[3]                     ;
+--------+--------------+----------------+------------------+---------------+------------+----------------------------------------+


+-------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'operator[0]'                                                                                 ;
+--------+--------------+----------------+------------------+-------------+------------+----------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock       ; Clock Edge ; Target                                 ;
+--------+--------------+----------------+------------------+-------------+------------+----------------------------------------+
; -1.222 ; 1.000        ; 2.222          ; Port Rate        ; operator[0] ; Rise       ; operator[0]                            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay:convdisplay_1|display[2]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay:convdisplay_1|display[5]   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|Equal0~0clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|Equal0~0|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|Equal0~0|datac           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|display[2]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; convdisplay_1|display[5]|dataa         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|Equal0~0|combout                 ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|Equal0~0|combout                 ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|Equal0~0|datad                   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|Equal0~0|datad                   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[0]|dataa                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[0]|dataa                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|ctrl[1]|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[1]~3|combout                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[1]~3|dataa                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[1]~3|dataa                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|ctrl[1]~7|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|ctrl[1]~7|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|ctrl[1]~7|datad                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|saida_led|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|saida_led|datac                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|saida_led~4|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|saida_led~4|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|saida_led~4|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|saida_led~4|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|saida_led~5|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|saida_led~5|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|saida_led~5|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|saida_led~5|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|saida_led~6|combout              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|saida_led~6|combout              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|saida_led~6|datad                ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|saida_led~6|datad                ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[0]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[1]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[2]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]|datac                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~10|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~10|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~10|datad                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]~10|datad                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~11clkctrl|inclk[0]          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~11clkctrl|outclk            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Rise       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~11|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Fall       ; mux_1|y[3]~11|datac                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; operator[0] ; Fall       ; mux_1|y[3]~11|datac                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; operator[0] ; Rise       ; mux_1|y[3]~11|datad                    ;
+--------+--------------+----------------+------------------+-------------+------------+----------------------------------------+


+---------------------------------------------------------------------------------+
; Setup Times                                                                     ;
+----------------+---------------+--------+--------+------------+-----------------+
; Data Port      ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+----------------+---------------+--------+--------+------------+-----------------+
; inputdata1[*]  ; inputdata1[0] ; 2.072  ; 2.072  ; Fall       ; inputdata1[0]   ;
;  inputdata1[0] ; inputdata1[0] ; -0.402 ; -0.402 ; Fall       ; inputdata1[0]   ;
;  inputdata1[1] ; inputdata1[0] ; 2.072  ; 2.072  ; Fall       ; inputdata1[0]   ;
;  inputdata1[2] ; inputdata1[0] ; 1.559  ; 1.559  ; Fall       ; inputdata1[0]   ;
;  inputdata1[3] ; inputdata1[0] ; 2.007  ; 2.007  ; Fall       ; inputdata1[0]   ;
; inputdata2[*]  ; inputdata1[0] ; 2.074  ; 2.074  ; Fall       ; inputdata1[0]   ;
;  inputdata2[0] ; inputdata1[0] ; 2.021  ; 2.021  ; Fall       ; inputdata1[0]   ;
;  inputdata2[1] ; inputdata1[0] ; 2.064  ; 2.064  ; Fall       ; inputdata1[0]   ;
;  inputdata2[2] ; inputdata1[0] ; 1.586  ; 1.586  ; Fall       ; inputdata1[0]   ;
;  inputdata2[3] ; inputdata1[0] ; 2.074  ; 2.074  ; Fall       ; inputdata1[0]   ;
; operator[*]    ; inputdata1[0] ; 2.037  ; 2.037  ; Fall       ; inputdata1[0]   ;
;  operator[0]   ; inputdata1[0] ; -0.350 ; -0.350 ; Fall       ; inputdata1[0]   ;
;  operator[1]   ; inputdata1[0] ; 1.960  ; 1.960  ; Fall       ; inputdata1[0]   ;
;  operator[2]   ; inputdata1[0] ; 2.037  ; 2.037  ; Fall       ; inputdata1[0]   ;
; inputdata1[*]  ; operator[0]   ; 3.659  ; 3.659  ; Rise       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 1.070  ; 1.070  ; Rise       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; 3.659  ; 3.659  ; Rise       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; 3.535  ; 3.535  ; Rise       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; 3.346  ; 3.346  ; Rise       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; 3.631  ; 3.631  ; Rise       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; 3.540  ; 3.540  ; Rise       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; 3.533  ; 3.533  ; Rise       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; 3.631  ; 3.631  ; Rise       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; 3.273  ; 3.273  ; Rise       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 3.212  ; 3.212  ; Rise       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 0.535  ; 0.535  ; Rise       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; 3.212  ; 3.212  ; Rise       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; 2.657  ; 2.657  ; Rise       ; operator[0]     ;
; inputdata1[*]  ; operator[0]   ; 3.657  ; 3.657  ; Fall       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 1.041  ; 1.041  ; Fall       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; 3.657  ; 3.657  ; Fall       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; 3.533  ; 3.533  ; Fall       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; 3.232  ; 3.232  ; Fall       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; 3.629  ; 3.629  ; Fall       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; 3.495  ; 3.495  ; Fall       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; 3.522  ; 3.522  ; Fall       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; 3.629  ; 3.629  ; Fall       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; 3.159  ; 3.159  ; Fall       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 3.625  ; 3.625  ; Fall       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 0.393  ; 0.393  ; Fall       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; 3.625  ; 3.625  ; Fall       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; 3.383  ; 3.383  ; Fall       ; operator[0]     ;
+----------------+---------------+--------+--------+------------+-----------------+


+---------------------------------------------------------------------------------+
; Hold Times                                                                      ;
+----------------+---------------+--------+--------+------------+-----------------+
; Data Port      ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+----------------+---------------+--------+--------+------------+-----------------+
; inputdata1[*]  ; inputdata1[0] ; 0.905  ; 0.905  ; Fall       ; inputdata1[0]   ;
;  inputdata1[0] ; inputdata1[0] ; 0.905  ; 0.905  ; Fall       ; inputdata1[0]   ;
;  inputdata1[1] ; inputdata1[0] ; -1.002 ; -1.002 ; Fall       ; inputdata1[0]   ;
;  inputdata1[2] ; inputdata1[0] ; -0.825 ; -0.825 ; Fall       ; inputdata1[0]   ;
;  inputdata1[3] ; inputdata1[0] ; -1.089 ; -1.089 ; Fall       ; inputdata1[0]   ;
; inputdata2[*]  ; inputdata1[0] ; -0.847 ; -0.847 ; Fall       ; inputdata1[0]   ;
;  inputdata2[0] ; inputdata1[0] ; -1.173 ; -1.173 ; Fall       ; inputdata1[0]   ;
;  inputdata2[1] ; inputdata1[0] ; -1.318 ; -1.318 ; Fall       ; inputdata1[0]   ;
;  inputdata2[2] ; inputdata1[0] ; -0.847 ; -0.847 ; Fall       ; inputdata1[0]   ;
;  inputdata2[3] ; inputdata1[0] ; -1.383 ; -1.383 ; Fall       ; inputdata1[0]   ;
; operator[*]    ; inputdata1[0] ; 0.842  ; 0.842  ; Fall       ; inputdata1[0]   ;
;  operator[0]   ; inputdata1[0] ; 0.842  ; 0.842  ; Fall       ; inputdata1[0]   ;
;  operator[1]   ; inputdata1[0] ; -0.927 ; -0.927 ; Fall       ; inputdata1[0]   ;
;  operator[2]   ; inputdata1[0] ; -0.992 ; -0.992 ; Fall       ; inputdata1[0]   ;
; inputdata1[*]  ; operator[0]   ; 0.437  ; 0.437  ; Rise       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 0.437  ; 0.437  ; Rise       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; -1.470 ; -1.470 ; Rise       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; -1.293 ; -1.293 ; Rise       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; -1.557 ; -1.557 ; Rise       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; -1.315 ; -1.315 ; Rise       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; -1.641 ; -1.641 ; Rise       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; -1.786 ; -1.786 ; Rise       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; -1.315 ; -1.315 ; Rise       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; -1.851 ; -1.851 ; Rise       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 0.374  ; 0.374  ; Rise       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 0.374  ; 0.374  ; Rise       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; -1.395 ; -1.395 ; Rise       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; -1.460 ; -1.460 ; Rise       ; operator[0]     ;
; inputdata1[*]  ; operator[0]   ; 0.391  ; 0.391  ; Fall       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 0.391  ; 0.391  ; Fall       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; -1.516 ; -1.516 ; Fall       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; -1.339 ; -1.339 ; Fall       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; -1.603 ; -1.603 ; Fall       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; -1.361 ; -1.361 ; Fall       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; -1.687 ; -1.687 ; Fall       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; -1.832 ; -1.832 ; Fall       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; -1.361 ; -1.361 ; Fall       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; -1.897 ; -1.897 ; Fall       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 0.328  ; 0.328  ; Fall       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 0.328  ; 0.328  ; Fall       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; -1.441 ; -1.441 ; Fall       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; -1.506 ; -1.506 ; Fall       ; operator[0]     ;
+----------------+---------------+--------+--------+------------+-----------------+


+----------------------------------------------------------------------------+
; Clock to Output Times                                                      ;
+-------------+---------------+-------+-------+------------+-----------------+
; Data Port   ; Clock Port    ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-------------+---------------+-------+-------+------------+-----------------+
; display[*]  ; inputdata1[0] ; 7.232 ; 7.232 ; Rise       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 6.765 ; 6.765 ; Rise       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 7.162 ; 7.162 ; Rise       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 6.861 ; 6.861 ; Rise       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 7.171 ; 7.171 ; Rise       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 7.232 ; 7.232 ; Rise       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 6.598 ; 6.598 ; Rise       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 6.976 ; 6.976 ; Rise       ; inputdata1[0]   ;
; display[*]  ; inputdata1[0] ; 7.616 ; 7.616 ; Fall       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 7.158 ; 7.158 ; Fall       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 7.549 ; 7.549 ; Fall       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 6.872 ; 6.872 ; Fall       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 7.551 ; 7.551 ; Fall       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 7.616 ; 7.616 ; Fall       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 6.609 ; 6.609 ; Fall       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 7.356 ; 7.356 ; Fall       ; inputdata1[0]   ;
; display[*]  ; operator[0]   ; 7.148 ; 7.148 ; Rise       ; operator[0]     ;
;  display[0] ; operator[0]   ; 6.690 ; 6.690 ; Rise       ; operator[0]     ;
;  display[1] ; operator[0]   ; 7.081 ; 7.081 ; Rise       ; operator[0]     ;
;  display[2] ; operator[0]   ; 6.387 ; 6.387 ; Rise       ; operator[0]     ;
;  display[3] ; operator[0]   ; 7.083 ; 7.083 ; Rise       ; operator[0]     ;
;  display[4] ; operator[0]   ; 7.148 ; 7.148 ; Rise       ; operator[0]     ;
;  display[5] ; operator[0]   ; 6.124 ; 6.124 ; Rise       ; operator[0]     ;
;  display[6] ; operator[0]   ; 6.888 ; 6.888 ; Rise       ; operator[0]     ;
; led         ; operator[0]   ; 3.837 ; 3.837 ; Rise       ; operator[0]     ;
; display[*]  ; operator[0]   ; 7.102 ; 7.102 ; Fall       ; operator[0]     ;
;  display[0] ; operator[0]   ; 6.644 ; 6.644 ; Fall       ; operator[0]     ;
;  display[1] ; operator[0]   ; 7.035 ; 7.035 ; Fall       ; operator[0]     ;
;  display[2] ; operator[0]   ; 6.299 ; 6.299 ; Fall       ; operator[0]     ;
;  display[3] ; operator[0]   ; 7.037 ; 7.037 ; Fall       ; operator[0]     ;
;  display[4] ; operator[0]   ; 7.102 ; 7.102 ; Fall       ; operator[0]     ;
;  display[5] ; operator[0]   ; 6.036 ; 6.036 ; Fall       ; operator[0]     ;
;  display[6] ; operator[0]   ; 6.842 ; 6.842 ; Fall       ; operator[0]     ;
+-------------+---------------+-------+-------+------------+-----------------+


+----------------------------------------------------------------------------+
; Minimum Clock to Output Times                                              ;
+-------------+---------------+-------+-------+------------+-----------------+
; Data Port   ; Clock Port    ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-------------+---------------+-------+-------+------------+-----------------+
; display[*]  ; inputdata1[0] ; 5.518 ; 5.518 ; Rise       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 5.518 ; 5.518 ; Rise       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 5.922 ; 5.922 ; Rise       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 6.861 ; 6.861 ; Rise       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 5.925 ; 5.925 ; Rise       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 5.983 ; 5.983 ; Rise       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 6.598 ; 6.598 ; Rise       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 5.657 ; 5.657 ; Rise       ; inputdata1[0]   ;
; display[*]  ; inputdata1[0] ; 5.518 ; 5.518 ; Fall       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 5.518 ; 5.518 ; Fall       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 5.922 ; 5.922 ; Fall       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 6.872 ; 6.872 ; Fall       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 5.925 ; 5.925 ; Fall       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 5.983 ; 5.983 ; Fall       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 6.609 ; 6.609 ; Fall       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 5.657 ; 5.657 ; Fall       ; inputdata1[0]   ;
; display[*]  ; operator[0]   ; 4.956 ; 4.956 ; Rise       ; operator[0]     ;
;  display[0] ; operator[0]   ; 4.956 ; 4.956 ; Rise       ; operator[0]     ;
;  display[1] ; operator[0]   ; 5.360 ; 5.360 ; Rise       ; operator[0]     ;
;  display[2] ; operator[0]   ; 6.387 ; 6.387 ; Rise       ; operator[0]     ;
;  display[3] ; operator[0]   ; 5.363 ; 5.363 ; Rise       ; operator[0]     ;
;  display[4] ; operator[0]   ; 5.421 ; 5.421 ; Rise       ; operator[0]     ;
;  display[5] ; operator[0]   ; 6.124 ; 6.124 ; Rise       ; operator[0]     ;
;  display[6] ; operator[0]   ; 5.095 ; 5.095 ; Rise       ; operator[0]     ;
; led         ; operator[0]   ; 3.837 ; 3.837 ; Rise       ; operator[0]     ;
; display[*]  ; operator[0]   ; 4.945 ; 4.945 ; Fall       ; operator[0]     ;
;  display[0] ; operator[0]   ; 4.945 ; 4.945 ; Fall       ; operator[0]     ;
;  display[1] ; operator[0]   ; 5.349 ; 5.349 ; Fall       ; operator[0]     ;
;  display[2] ; operator[0]   ; 6.299 ; 6.299 ; Fall       ; operator[0]     ;
;  display[3] ; operator[0]   ; 5.352 ; 5.352 ; Fall       ; operator[0]     ;
;  display[4] ; operator[0]   ; 5.410 ; 5.410 ; Fall       ; operator[0]     ;
;  display[5] ; operator[0]   ; 6.036 ; 6.036 ; Fall       ; operator[0]     ;
;  display[6] ; operator[0]   ; 5.084 ; 5.084 ; Fall       ; operator[0]     ;
+-------------+---------------+-------+-------+------------+-----------------+


+-------------------------------------------------------------+
; Propagation Delay                                           ;
+---------------+-------------+-------+-------+-------+-------+
; Input Port    ; Output Port ; RR    ; RF    ; FR    ; FF    ;
+---------------+-------------+-------+-------+-------+-------+
; inputdata1[1] ; display[0]  ; 9.370 ; 9.370 ; 9.370 ; 9.370 ;
; inputdata1[1] ; display[1]  ; 9.767 ; 9.767 ; 9.767 ; 9.767 ;
; inputdata1[1] ; display[3]  ; 9.776 ; 9.776 ; 9.776 ; 9.776 ;
; inputdata1[1] ; display[4]  ; 9.837 ; 9.837 ; 9.837 ; 9.837 ;
; inputdata1[1] ; display[6]  ; 9.581 ; 9.581 ; 9.581 ; 9.581 ;
; inputdata1[2] ; display[0]  ; 9.246 ; 9.246 ; 9.246 ; 9.246 ;
; inputdata1[2] ; display[1]  ; 9.643 ; 9.643 ; 9.643 ; 9.643 ;
; inputdata1[2] ; display[3]  ; 9.652 ; 9.652 ; 9.652 ; 9.652 ;
; inputdata1[2] ; display[4]  ; 9.713 ; 9.713 ; 9.713 ; 9.713 ;
; inputdata1[2] ; display[6]  ; 9.457 ; 9.457 ; 9.457 ; 9.457 ;
; inputdata1[3] ; display[0]  ; 9.084 ; 9.084 ; 9.084 ; 9.084 ;
; inputdata1[3] ; display[1]  ; 9.481 ; 9.481 ; 9.481 ; 9.481 ;
; inputdata1[3] ; display[3]  ; 9.490 ; 9.490 ; 9.490 ; 9.490 ;
; inputdata1[3] ; display[4]  ; 9.551 ; 9.551 ; 9.551 ; 9.551 ;
; inputdata1[3] ; display[6]  ; 9.295 ; 9.295 ; 9.295 ; 9.295 ;
; inputdata2[0] ; display[0]  ; 9.278 ; 9.278 ; 9.278 ; 9.278 ;
; inputdata2[0] ; display[1]  ; 9.675 ; 9.675 ; 9.675 ; 9.675 ;
; inputdata2[0] ; display[3]  ; 9.684 ; 9.684 ; 9.684 ; 9.684 ;
; inputdata2[0] ; display[4]  ; 9.745 ; 9.745 ; 9.745 ; 9.745 ;
; inputdata2[0] ; display[6]  ; 9.489 ; 9.489 ; 9.489 ; 9.489 ;
; inputdata2[1] ; display[0]  ; 9.235 ; 9.235 ; 9.235 ; 9.235 ;
; inputdata2[1] ; display[1]  ; 9.632 ; 9.632 ; 9.632 ; 9.632 ;
; inputdata2[1] ; display[3]  ; 9.641 ; 9.641 ; 9.641 ; 9.641 ;
; inputdata2[1] ; display[4]  ; 9.702 ; 9.702 ; 9.702 ; 9.702 ;
; inputdata2[1] ; display[6]  ; 9.446 ; 9.446 ; 9.446 ; 9.446 ;
; inputdata2[2] ; display[0]  ; 9.342 ; 9.342 ; 9.342 ; 9.342 ;
; inputdata2[2] ; display[1]  ; 9.739 ; 9.739 ; 9.739 ; 9.739 ;
; inputdata2[2] ; display[3]  ; 9.748 ; 9.748 ; 9.748 ; 9.748 ;
; inputdata2[2] ; display[4]  ; 9.809 ; 9.809 ; 9.809 ; 9.809 ;
; inputdata2[2] ; display[6]  ; 9.553 ; 9.553 ; 9.553 ; 9.553 ;
; inputdata2[3] ; display[0]  ; 9.011 ; 9.011 ; 9.011 ; 9.011 ;
; inputdata2[3] ; display[1]  ; 9.408 ; 9.408 ; 9.408 ; 9.408 ;
; inputdata2[3] ; display[3]  ; 9.417 ; 9.417 ; 9.417 ; 9.417 ;
; inputdata2[3] ; display[4]  ; 9.478 ; 9.478 ; 9.478 ; 9.478 ;
; inputdata2[3] ; display[6]  ; 9.222 ; 9.222 ; 9.222 ; 9.222 ;
; operator[1]   ; display[0]  ; 9.219 ; 9.219 ; 9.219 ; 9.219 ;
; operator[1]   ; display[1]  ; 9.616 ; 9.616 ; 9.616 ; 9.616 ;
; operator[1]   ; display[3]  ; 9.625 ; 9.625 ; 9.625 ; 9.625 ;
; operator[1]   ; display[4]  ; 9.686 ; 9.686 ; 9.686 ; 9.686 ;
; operator[1]   ; display[6]  ; 9.430 ; 9.430 ; 9.430 ; 9.430 ;
; operator[2]   ; display[0]  ; 8.977 ; 8.977 ; 8.977 ; 8.977 ;
; operator[2]   ; display[1]  ; 9.374 ; 9.374 ; 9.374 ; 9.374 ;
; operator[2]   ; display[3]  ; 9.383 ; 9.383 ; 9.383 ; 9.383 ;
; operator[2]   ; display[4]  ; 9.444 ; 9.444 ; 9.444 ; 9.444 ;
; operator[2]   ; display[6]  ; 9.188 ; 9.188 ; 9.188 ; 9.188 ;
+---------------+-------------+-------+-------+-------+-------+


+-------------------------------------------------------------+
; Minimum Propagation Delay                                   ;
+---------------+-------------+-------+-------+-------+-------+
; Input Port    ; Output Port ; RR    ; RF    ; FR    ; FF    ;
+---------------+-------------+-------+-------+-------+-------+
; inputdata1[1] ; display[0]  ; 8.134 ; 8.067 ; 8.067 ; 8.134 ;
; inputdata1[1] ; display[1]  ; 8.538 ; 8.471 ; 8.471 ; 8.538 ;
; inputdata1[1] ; display[3]  ; 8.541 ; 8.474 ; 8.474 ; 8.541 ;
; inputdata1[1] ; display[4]  ; 8.599 ; 8.532 ; 8.532 ; 8.599 ;
; inputdata1[1] ; display[6]  ; 8.273 ; 8.206 ; 8.206 ; 8.273 ;
; inputdata1[2] ; display[0]  ; 8.010 ; 7.951 ; 7.951 ; 8.010 ;
; inputdata1[2] ; display[1]  ; 8.414 ; 8.355 ; 8.355 ; 8.414 ;
; inputdata1[2] ; display[3]  ; 8.417 ; 8.358 ; 8.358 ; 8.417 ;
; inputdata1[2] ; display[4]  ; 8.475 ; 8.416 ; 8.416 ; 8.475 ;
; inputdata1[2] ; display[6]  ; 8.149 ; 8.090 ; 8.090 ; 8.149 ;
; inputdata1[3] ; display[0]  ; 7.684 ; 7.848 ; 7.848 ; 7.684 ;
; inputdata1[3] ; display[1]  ; 8.088 ; 8.252 ; 8.252 ; 8.088 ;
; inputdata1[3] ; display[3]  ; 8.091 ; 8.255 ; 8.255 ; 8.091 ;
; inputdata1[3] ; display[4]  ; 8.149 ; 8.313 ; 8.313 ; 8.149 ;
; inputdata1[3] ; display[6]  ; 7.823 ; 7.987 ; 7.987 ; 7.823 ;
; inputdata2[0] ; display[0]  ; 8.042 ; 7.972 ; 7.972 ; 8.042 ;
; inputdata2[0] ; display[1]  ; 8.446 ; 8.376 ; 8.376 ; 8.446 ;
; inputdata2[0] ; display[3]  ; 8.449 ; 8.379 ; 8.379 ; 8.449 ;
; inputdata2[0] ; display[4]  ; 8.507 ; 8.437 ; 8.437 ; 8.507 ;
; inputdata2[0] ; display[6]  ; 8.181 ; 8.111 ; 8.111 ; 8.181 ;
; inputdata2[1] ; display[0]  ; 7.942 ; 7.999 ; 7.999 ; 7.942 ;
; inputdata2[1] ; display[1]  ; 8.346 ; 8.403 ; 8.403 ; 8.346 ;
; inputdata2[1] ; display[3]  ; 8.349 ; 8.406 ; 8.406 ; 8.349 ;
; inputdata2[1] ; display[4]  ; 8.407 ; 8.464 ; 8.464 ; 8.407 ;
; inputdata2[1] ; display[6]  ; 8.081 ; 8.138 ; 8.138 ; 8.081 ;
; inputdata2[2] ; display[0]  ; 8.045 ; 8.106 ; 8.106 ; 8.045 ;
; inputdata2[2] ; display[1]  ; 8.449 ; 8.510 ; 8.510 ; 8.449 ;
; inputdata2[2] ; display[3]  ; 8.452 ; 8.513 ; 8.513 ; 8.452 ;
; inputdata2[2] ; display[4]  ; 8.510 ; 8.571 ; 8.571 ; 8.510 ;
; inputdata2[2] ; display[6]  ; 8.184 ; 8.245 ; 8.245 ; 8.184 ;
; inputdata2[3] ; display[0]  ; 7.775 ; 7.612 ; 7.612 ; 7.775 ;
; inputdata2[3] ; display[1]  ; 8.179 ; 8.016 ; 8.016 ; 8.179 ;
; inputdata2[3] ; display[3]  ; 8.182 ; 8.019 ; 8.019 ; 8.182 ;
; inputdata2[3] ; display[4]  ; 8.240 ; 8.077 ; 8.077 ; 8.240 ;
; inputdata2[3] ; display[6]  ; 7.914 ; 7.751 ; 7.751 ; 7.914 ;
; operator[1]   ; display[0]  ; 7.484 ; 7.578 ; 7.578 ; 7.484 ;
; operator[1]   ; display[1]  ; 7.888 ; 7.982 ; 7.982 ; 7.888 ;
; operator[1]   ; display[3]  ; 7.891 ; 7.985 ; 7.985 ; 7.891 ;
; operator[1]   ; display[4]  ; 7.949 ; 8.043 ; 8.043 ; 7.949 ;
; operator[1]   ; display[6]  ; 7.623 ; 7.717 ; 7.717 ; 7.623 ;
; operator[2]   ; display[0]  ; 7.232 ; 7.397 ; 7.397 ; 7.232 ;
; operator[2]   ; display[1]  ; 7.636 ; 7.801 ; 7.801 ; 7.636 ;
; operator[2]   ; display[3]  ; 7.639 ; 7.804 ; 7.804 ; 7.639 ;
; operator[2]   ; display[4]  ; 7.697 ; 7.862 ; 7.862 ; 7.697 ;
; operator[2]   ; display[6]  ; 7.371 ; 7.536 ; 7.536 ; 7.371 ;
+---------------+-------------+-------+-------+-------+-------+


+---------------------------------------------------------------------------------+
; Multicorner Timing Analysis Summary                                             ;
+------------------+---------+---------+----------+---------+---------------------+
; Clock            ; Setup   ; Hold    ; Recovery ; Removal ; Minimum Pulse Width ;
+------------------+---------+---------+----------+---------+---------------------+
; Worst-case Slack ; -2.006  ; -1.912  ; -0.168   ; -3.455  ; -1.222              ;
;  inputdata1[0]   ; -0.596  ; -1.912  ; 1.092    ; -3.455  ; -1.222              ;
;  operator[0]     ; -2.006  ; -0.721  ; -0.168   ; -2.315  ; -1.222              ;
; Design-wide TNS  ; -10.368 ; -12.023 ; -0.168   ; -12.215 ; -2.444              ;
;  inputdata1[0]   ; -1.137  ; -9.063  ; 0.000    ; -6.910  ; -1.222              ;
;  operator[0]     ; -9.231  ; -2.960  ; -0.168   ; -5.305  ; -1.222              ;
+------------------+---------+---------+----------+---------+---------------------+


+---------------------------------------------------------------------------------+
; Setup Times                                                                     ;
+----------------+---------------+--------+--------+------------+-----------------+
; Data Port      ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+----------------+---------------+--------+--------+------------+-----------------+
; inputdata1[*]  ; inputdata1[0] ; 3.881  ; 3.881  ; Fall       ; inputdata1[0]   ;
;  inputdata1[0] ; inputdata1[0] ; -0.197 ; -0.197 ; Fall       ; inputdata1[0]   ;
;  inputdata1[1] ; inputdata1[0] ; 3.881  ; 3.881  ; Fall       ; inputdata1[0]   ;
;  inputdata1[2] ; inputdata1[0] ; 2.744  ; 2.744  ; Fall       ; inputdata1[0]   ;
;  inputdata1[3] ; inputdata1[0] ; 3.766  ; 3.766  ; Fall       ; inputdata1[0]   ;
; inputdata2[*]  ; inputdata1[0] ; 3.901  ; 3.901  ; Fall       ; inputdata1[0]   ;
;  inputdata2[0] ; inputdata1[0] ; 3.742  ; 3.742  ; Fall       ; inputdata1[0]   ;
;  inputdata2[1] ; inputdata1[0] ; 3.819  ; 3.819  ; Fall       ; inputdata1[0]   ;
;  inputdata2[2] ; inputdata1[0] ; 2.792  ; 2.792  ; Fall       ; inputdata1[0]   ;
;  inputdata2[3] ; inputdata1[0] ; 3.901  ; 3.901  ; Fall       ; inputdata1[0]   ;
; operator[*]    ; inputdata1[0] ; 3.757  ; 3.757  ; Fall       ; inputdata1[0]   ;
;  operator[0]   ; inputdata1[0] ; -0.048 ; -0.048 ; Fall       ; inputdata1[0]   ;
;  operator[1]   ; inputdata1[0] ; 3.657  ; 3.657  ; Fall       ; inputdata1[0]   ;
;  operator[2]   ; inputdata1[0] ; 3.757  ; 3.757  ; Fall       ; inputdata1[0]   ;
; inputdata1[*]  ; operator[0]   ; 6.827  ; 6.827  ; Rise       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 2.506  ; 2.506  ; Rise       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; 6.827  ; 6.827  ; Rise       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; 6.600  ; 6.600  ; Rise       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; 6.107  ; 6.107  ; Rise       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; 6.779  ; 6.779  ; Rise       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; 6.485  ; 6.485  ; Rise       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; 6.521  ; 6.521  ; Rise       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; 6.779  ; 6.779  ; Rise       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; 5.964  ; 5.964  ; Rise       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 5.794  ; 5.794  ; Rise       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 1.235  ; 1.235  ; Rise       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; 5.794  ; 5.794  ; Rise       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; 4.840  ; 4.840  ; Rise       ; operator[0]     ;
; inputdata1[*]  ; operator[0]   ; 6.813  ; 6.813  ; Fall       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 2.427  ; 2.427  ; Fall       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; 6.813  ; 6.813  ; Fall       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; 6.586  ; 6.586  ; Fall       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; 5.896  ; 5.896  ; Fall       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; 6.765  ; 6.765  ; Fall       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; 6.369  ; 6.369  ; Fall       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; 6.483  ; 6.483  ; Fall       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; 6.765  ; 6.765  ; Fall       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; 5.753  ; 5.753  ; Fall       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 6.719  ; 6.719  ; Fall       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 1.128  ; 1.128  ; Fall       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; 6.719  ; 6.719  ; Fall       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; 6.130  ; 6.130  ; Fall       ; operator[0]     ;
+----------------+---------------+--------+--------+------------+-----------------+


+---------------------------------------------------------------------------------+
; Hold Times                                                                      ;
+----------------+---------------+--------+--------+------------+-----------------+
; Data Port      ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+----------------+---------------+--------+--------+------------+-----------------+
; inputdata1[*]  ; inputdata1[0] ; 1.387  ; 1.387  ; Fall       ; inputdata1[0]   ;
;  inputdata1[0] ; inputdata1[0] ; 1.387  ; 1.387  ; Fall       ; inputdata1[0]   ;
;  inputdata1[1] ; inputdata1[0] ; -1.002 ; -1.002 ; Fall       ; inputdata1[0]   ;
;  inputdata1[2] ; inputdata1[0] ; -0.825 ; -0.825 ; Fall       ; inputdata1[0]   ;
;  inputdata1[3] ; inputdata1[0] ; -1.089 ; -1.089 ; Fall       ; inputdata1[0]   ;
; inputdata2[*]  ; inputdata1[0] ; -0.847 ; -0.847 ; Fall       ; inputdata1[0]   ;
;  inputdata2[0] ; inputdata1[0] ; -1.173 ; -1.173 ; Fall       ; inputdata1[0]   ;
;  inputdata2[1] ; inputdata1[0] ; -1.318 ; -1.318 ; Fall       ; inputdata1[0]   ;
;  inputdata2[2] ; inputdata1[0] ; -0.847 ; -0.847 ; Fall       ; inputdata1[0]   ;
;  inputdata2[3] ; inputdata1[0] ; -1.383 ; -1.383 ; Fall       ; inputdata1[0]   ;
; operator[*]    ; inputdata1[0] ; 1.246  ; 1.246  ; Fall       ; inputdata1[0]   ;
;  operator[0]   ; inputdata1[0] ; 1.246  ; 1.246  ; Fall       ; inputdata1[0]   ;
;  operator[1]   ; inputdata1[0] ; -0.927 ; -0.927 ; Fall       ; inputdata1[0]   ;
;  operator[2]   ; inputdata1[0] ; -0.992 ; -0.992 ; Fall       ; inputdata1[0]   ;
; inputdata1[*]  ; operator[0]   ; 0.437  ; 0.437  ; Rise       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 0.437  ; 0.437  ; Rise       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; -1.470 ; -1.470 ; Rise       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; -1.293 ; -1.293 ; Rise       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; -1.557 ; -1.557 ; Rise       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; -1.315 ; -1.315 ; Rise       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; -1.641 ; -1.641 ; Rise       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; -1.786 ; -1.786 ; Rise       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; -1.315 ; -1.315 ; Rise       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; -1.851 ; -1.851 ; Rise       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 0.374  ; 0.374  ; Rise       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 0.374  ; 0.374  ; Rise       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; -1.395 ; -1.395 ; Rise       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; -1.460 ; -1.460 ; Rise       ; operator[0]     ;
; inputdata1[*]  ; operator[0]   ; 0.391  ; 0.391  ; Fall       ; operator[0]     ;
;  inputdata1[0] ; operator[0]   ; 0.391  ; 0.391  ; Fall       ; operator[0]     ;
;  inputdata1[1] ; operator[0]   ; -1.516 ; -1.516 ; Fall       ; operator[0]     ;
;  inputdata1[2] ; operator[0]   ; -1.339 ; -1.339 ; Fall       ; operator[0]     ;
;  inputdata1[3] ; operator[0]   ; -1.603 ; -1.603 ; Fall       ; operator[0]     ;
; inputdata2[*]  ; operator[0]   ; -1.361 ; -1.361 ; Fall       ; operator[0]     ;
;  inputdata2[0] ; operator[0]   ; -1.687 ; -1.687 ; Fall       ; operator[0]     ;
;  inputdata2[1] ; operator[0]   ; -1.832 ; -1.832 ; Fall       ; operator[0]     ;
;  inputdata2[2] ; operator[0]   ; -1.361 ; -1.361 ; Fall       ; operator[0]     ;
;  inputdata2[3] ; operator[0]   ; -1.897 ; -1.897 ; Fall       ; operator[0]     ;
; operator[*]    ; operator[0]   ; 0.406  ; 0.406  ; Fall       ; operator[0]     ;
;  operator[0]   ; operator[0]   ; 0.406  ; 0.406  ; Fall       ; operator[0]     ;
;  operator[1]   ; operator[0]   ; -1.441 ; -1.441 ; Fall       ; operator[0]     ;
;  operator[2]   ; operator[0]   ; -1.506 ; -1.506 ; Fall       ; operator[0]     ;
+----------------+---------------+--------+--------+------------+-----------------+


+------------------------------------------------------------------------------+
; Clock to Output Times                                                        ;
+-------------+---------------+--------+--------+------------+-----------------+
; Data Port   ; Clock Port    ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+-------------+---------------+--------+--------+------------+-----------------+
; display[*]  ; inputdata1[0] ; 14.530 ; 14.530 ; Rise       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 13.341 ; 13.341 ; Rise       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 14.402 ; 14.402 ; Rise       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 13.466 ; 13.466 ; Rise       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 14.459 ; 14.459 ; Rise       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 14.530 ; 14.530 ; Rise       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 13.022 ; 13.022 ; Rise       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 13.941 ; 13.941 ; Rise       ; inputdata1[0]   ;
; display[*]  ; inputdata1[0] ; 15.416 ; 15.416 ; Fall       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 14.259 ; 14.259 ; Fall       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 15.288 ; 15.288 ; Fall       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 13.424 ; 13.424 ; Fall       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 15.310 ; 15.310 ; Fall       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 15.416 ; 15.416 ; Fall       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 12.980 ; 12.980 ; Fall       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 14.796 ; 14.796 ; Fall       ; inputdata1[0]   ;
; display[*]  ; operator[0]   ; 14.333 ; 14.333 ; Rise       ; operator[0]     ;
;  display[0] ; operator[0]   ; 13.176 ; 13.176 ; Rise       ; operator[0]     ;
;  display[1] ; operator[0]   ; 14.205 ; 14.205 ; Rise       ; operator[0]     ;
;  display[2] ; operator[0]   ; 12.326 ; 12.326 ; Rise       ; operator[0]     ;
;  display[3] ; operator[0]   ; 14.227 ; 14.227 ; Rise       ; operator[0]     ;
;  display[4] ; operator[0]   ; 14.333 ; 14.333 ; Rise       ; operator[0]     ;
;  display[5] ; operator[0]   ; 11.882 ; 11.882 ; Rise       ; operator[0]     ;
;  display[6] ; operator[0]   ; 13.713 ; 13.713 ; Rise       ; operator[0]     ;
; led         ; operator[0]   ; 7.562  ; 7.562  ; Rise       ; operator[0]     ;
; display[*]  ; operator[0]   ; 14.240 ; 14.240 ; Fall       ; operator[0]     ;
;  display[0] ; operator[0]   ; 13.083 ; 13.083 ; Fall       ; operator[0]     ;
;  display[1] ; operator[0]   ; 14.112 ; 14.112 ; Fall       ; operator[0]     ;
;  display[2] ; operator[0]   ; 12.164 ; 12.164 ; Fall       ; operator[0]     ;
;  display[3] ; operator[0]   ; 14.134 ; 14.134 ; Fall       ; operator[0]     ;
;  display[4] ; operator[0]   ; 14.240 ; 14.240 ; Fall       ; operator[0]     ;
;  display[5] ; operator[0]   ; 11.720 ; 11.720 ; Fall       ; operator[0]     ;
;  display[6] ; operator[0]   ; 13.620 ; 13.620 ; Fall       ; operator[0]     ;
+-------------+---------------+--------+--------+------------+-----------------+


+----------------------------------------------------------------------------+
; Minimum Clock to Output Times                                              ;
+-------------+---------------+-------+-------+------------+-----------------+
; Data Port   ; Clock Port    ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-------------+---------------+-------+-------+------------+-----------------+
; display[*]  ; inputdata1[0] ; 5.518 ; 5.518 ; Rise       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 5.518 ; 5.518 ; Rise       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 5.922 ; 5.922 ; Rise       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 6.861 ; 6.861 ; Rise       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 5.925 ; 5.925 ; Rise       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 5.983 ; 5.983 ; Rise       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 6.598 ; 6.598 ; Rise       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 5.657 ; 5.657 ; Rise       ; inputdata1[0]   ;
; display[*]  ; inputdata1[0] ; 5.518 ; 5.518 ; Fall       ; inputdata1[0]   ;
;  display[0] ; inputdata1[0] ; 5.518 ; 5.518 ; Fall       ; inputdata1[0]   ;
;  display[1] ; inputdata1[0] ; 5.922 ; 5.922 ; Fall       ; inputdata1[0]   ;
;  display[2] ; inputdata1[0] ; 6.872 ; 6.872 ; Fall       ; inputdata1[0]   ;
;  display[3] ; inputdata1[0] ; 5.925 ; 5.925 ; Fall       ; inputdata1[0]   ;
;  display[4] ; inputdata1[0] ; 5.983 ; 5.983 ; Fall       ; inputdata1[0]   ;
;  display[5] ; inputdata1[0] ; 6.609 ; 6.609 ; Fall       ; inputdata1[0]   ;
;  display[6] ; inputdata1[0] ; 5.657 ; 5.657 ; Fall       ; inputdata1[0]   ;
; display[*]  ; operator[0]   ; 4.956 ; 4.956 ; Rise       ; operator[0]     ;
;  display[0] ; operator[0]   ; 4.956 ; 4.956 ; Rise       ; operator[0]     ;
;  display[1] ; operator[0]   ; 5.360 ; 5.360 ; Rise       ; operator[0]     ;
;  display[2] ; operator[0]   ; 6.387 ; 6.387 ; Rise       ; operator[0]     ;
;  display[3] ; operator[0]   ; 5.363 ; 5.363 ; Rise       ; operator[0]     ;
;  display[4] ; operator[0]   ; 5.421 ; 5.421 ; Rise       ; operator[0]     ;
;  display[5] ; operator[0]   ; 6.124 ; 6.124 ; Rise       ; operator[0]     ;
;  display[6] ; operator[0]   ; 5.095 ; 5.095 ; Rise       ; operator[0]     ;
; led         ; operator[0]   ; 3.837 ; 3.837 ; Rise       ; operator[0]     ;
; display[*]  ; operator[0]   ; 4.945 ; 4.945 ; Fall       ; operator[0]     ;
;  display[0] ; operator[0]   ; 4.945 ; 4.945 ; Fall       ; operator[0]     ;
;  display[1] ; operator[0]   ; 5.349 ; 5.349 ; Fall       ; operator[0]     ;
;  display[2] ; operator[0]   ; 6.299 ; 6.299 ; Fall       ; operator[0]     ;
;  display[3] ; operator[0]   ; 5.352 ; 5.352 ; Fall       ; operator[0]     ;
;  display[4] ; operator[0]   ; 5.410 ; 5.410 ; Fall       ; operator[0]     ;
;  display[5] ; operator[0]   ; 6.036 ; 6.036 ; Fall       ; operator[0]     ;
;  display[6] ; operator[0]   ; 5.084 ; 5.084 ; Fall       ; operator[0]     ;
+-------------+---------------+-------+-------+------------+-----------------+


+-----------------------------------------------------------------+
; Progagation Delay                                               ;
+---------------+-------------+--------+--------+--------+--------+
; Input Port    ; Output Port ; RR     ; RF     ; FR     ; FF     ;
+---------------+-------------+--------+--------+--------+--------+
; inputdata1[1] ; display[0]  ; 17.727 ; 17.727 ; 17.727 ; 17.727 ;
; inputdata1[1] ; display[1]  ; 18.788 ; 18.788 ; 18.788 ; 18.788 ;
; inputdata1[1] ; display[3]  ; 18.845 ; 18.845 ; 18.845 ; 18.845 ;
; inputdata1[1] ; display[4]  ; 18.916 ; 18.916 ; 18.916 ; 18.916 ;
; inputdata1[1] ; display[6]  ; 18.327 ; 18.327 ; 18.327 ; 18.327 ;
; inputdata1[2] ; display[0]  ; 17.500 ; 17.500 ; 17.500 ; 17.500 ;
; inputdata1[2] ; display[1]  ; 18.561 ; 18.561 ; 18.561 ; 18.561 ;
; inputdata1[2] ; display[3]  ; 18.618 ; 18.618 ; 18.618 ; 18.618 ;
; inputdata1[2] ; display[4]  ; 18.689 ; 18.689 ; 18.689 ; 18.689 ;
; inputdata1[2] ; display[6]  ; 18.100 ; 18.100 ; 18.100 ; 18.100 ;
; inputdata1[3] ; display[0]  ; 17.038 ; 17.038 ; 17.038 ; 17.038 ;
; inputdata1[3] ; display[1]  ; 18.099 ; 18.099 ; 18.099 ; 18.099 ;
; inputdata1[3] ; display[3]  ; 18.156 ; 18.156 ; 18.156 ; 18.156 ;
; inputdata1[3] ; display[4]  ; 18.227 ; 18.227 ; 18.227 ; 18.227 ;
; inputdata1[3] ; display[6]  ; 17.638 ; 17.638 ; 17.638 ; 17.638 ;
; inputdata2[0] ; display[0]  ; 17.416 ; 17.416 ; 17.416 ; 17.416 ;
; inputdata2[0] ; display[1]  ; 18.477 ; 18.477 ; 18.477 ; 18.477 ;
; inputdata2[0] ; display[3]  ; 18.534 ; 18.534 ; 18.534 ; 18.534 ;
; inputdata2[0] ; display[4]  ; 18.605 ; 18.605 ; 18.605 ; 18.605 ;
; inputdata2[0] ; display[6]  ; 18.016 ; 18.016 ; 18.016 ; 18.016 ;
; inputdata2[1] ; display[0]  ; 17.397 ; 17.397 ; 17.397 ; 17.397 ;
; inputdata2[1] ; display[1]  ; 18.458 ; 18.458 ; 18.458 ; 18.458 ;
; inputdata2[1] ; display[3]  ; 18.515 ; 18.515 ; 18.515 ; 18.515 ;
; inputdata2[1] ; display[4]  ; 18.586 ; 18.586 ; 18.586 ; 18.586 ;
; inputdata2[1] ; display[6]  ; 17.997 ; 17.997 ; 17.997 ; 17.997 ;
; inputdata2[2] ; display[0]  ; 17.679 ; 17.679 ; 17.679 ; 17.679 ;
; inputdata2[2] ; display[1]  ; 18.740 ; 18.740 ; 18.740 ; 18.740 ;
; inputdata2[2] ; display[3]  ; 18.797 ; 18.797 ; 18.797 ; 18.797 ;
; inputdata2[2] ; display[4]  ; 18.868 ; 18.868 ; 18.868 ; 18.868 ;
; inputdata2[2] ; display[6]  ; 18.279 ; 18.279 ; 18.279 ; 18.279 ;
; inputdata2[3] ; display[0]  ; 16.895 ; 16.895 ; 16.895 ; 16.895 ;
; inputdata2[3] ; display[1]  ; 17.956 ; 17.956 ; 17.956 ; 17.956 ;
; inputdata2[3] ; display[3]  ; 18.013 ; 18.013 ; 18.013 ; 18.013 ;
; inputdata2[3] ; display[4]  ; 18.084 ; 18.084 ; 18.084 ; 18.084 ;
; inputdata2[3] ; display[6]  ; 17.495 ; 17.495 ; 17.495 ; 17.495 ;
; operator[1]   ; display[0]  ; 17.352 ; 17.352 ; 17.352 ; 17.352 ;
; operator[1]   ; display[1]  ; 18.413 ; 18.413 ; 18.413 ; 18.413 ;
; operator[1]   ; display[3]  ; 18.470 ; 18.470 ; 18.470 ; 18.470 ;
; operator[1]   ; display[4]  ; 18.541 ; 18.541 ; 18.541 ; 18.541 ;
; operator[1]   ; display[6]  ; 17.952 ; 17.952 ; 17.952 ; 17.952 ;
; operator[2]   ; display[0]  ; 16.763 ; 16.763 ; 16.763 ; 16.763 ;
; operator[2]   ; display[1]  ; 17.824 ; 17.824 ; 17.824 ; 17.824 ;
; operator[2]   ; display[3]  ; 17.881 ; 17.881 ; 17.881 ; 17.881 ;
; operator[2]   ; display[4]  ; 17.952 ; 17.952 ; 17.952 ; 17.952 ;
; operator[2]   ; display[6]  ; 17.363 ; 17.363 ; 17.363 ; 17.363 ;
+---------------+-------------+--------+--------+--------+--------+


+-------------------------------------------------------------+
; Minimum Progagation Delay                                   ;
+---------------+-------------+-------+-------+-------+-------+
; Input Port    ; Output Port ; RR    ; RF    ; FR    ; FF    ;
+---------------+-------------+-------+-------+-------+-------+
; inputdata1[1] ; display[0]  ; 8.134 ; 8.067 ; 8.067 ; 8.134 ;
; inputdata1[1] ; display[1]  ; 8.538 ; 8.471 ; 8.471 ; 8.538 ;
; inputdata1[1] ; display[3]  ; 8.541 ; 8.474 ; 8.474 ; 8.541 ;
; inputdata1[1] ; display[4]  ; 8.599 ; 8.532 ; 8.532 ; 8.599 ;
; inputdata1[1] ; display[6]  ; 8.273 ; 8.206 ; 8.206 ; 8.273 ;
; inputdata1[2] ; display[0]  ; 8.010 ; 7.951 ; 7.951 ; 8.010 ;
; inputdata1[2] ; display[1]  ; 8.414 ; 8.355 ; 8.355 ; 8.414 ;
; inputdata1[2] ; display[3]  ; 8.417 ; 8.358 ; 8.358 ; 8.417 ;
; inputdata1[2] ; display[4]  ; 8.475 ; 8.416 ; 8.416 ; 8.475 ;
; inputdata1[2] ; display[6]  ; 8.149 ; 8.090 ; 8.090 ; 8.149 ;
; inputdata1[3] ; display[0]  ; 7.684 ; 7.848 ; 7.848 ; 7.684 ;
; inputdata1[3] ; display[1]  ; 8.088 ; 8.252 ; 8.252 ; 8.088 ;
; inputdata1[3] ; display[3]  ; 8.091 ; 8.255 ; 8.255 ; 8.091 ;
; inputdata1[3] ; display[4]  ; 8.149 ; 8.313 ; 8.313 ; 8.149 ;
; inputdata1[3] ; display[6]  ; 7.823 ; 7.987 ; 7.987 ; 7.823 ;
; inputdata2[0] ; display[0]  ; 8.042 ; 7.972 ; 7.972 ; 8.042 ;
; inputdata2[0] ; display[1]  ; 8.446 ; 8.376 ; 8.376 ; 8.446 ;
; inputdata2[0] ; display[3]  ; 8.449 ; 8.379 ; 8.379 ; 8.449 ;
; inputdata2[0] ; display[4]  ; 8.507 ; 8.437 ; 8.437 ; 8.507 ;
; inputdata2[0] ; display[6]  ; 8.181 ; 8.111 ; 8.111 ; 8.181 ;
; inputdata2[1] ; display[0]  ; 7.942 ; 7.999 ; 7.999 ; 7.942 ;
; inputdata2[1] ; display[1]  ; 8.346 ; 8.403 ; 8.403 ; 8.346 ;
; inputdata2[1] ; display[3]  ; 8.349 ; 8.406 ; 8.406 ; 8.349 ;
; inputdata2[1] ; display[4]  ; 8.407 ; 8.464 ; 8.464 ; 8.407 ;
; inputdata2[1] ; display[6]  ; 8.081 ; 8.138 ; 8.138 ; 8.081 ;
; inputdata2[2] ; display[0]  ; 8.045 ; 8.106 ; 8.106 ; 8.045 ;
; inputdata2[2] ; display[1]  ; 8.449 ; 8.510 ; 8.510 ; 8.449 ;
; inputdata2[2] ; display[3]  ; 8.452 ; 8.513 ; 8.513 ; 8.452 ;
; inputdata2[2] ; display[4]  ; 8.510 ; 8.571 ; 8.571 ; 8.510 ;
; inputdata2[2] ; display[6]  ; 8.184 ; 8.245 ; 8.245 ; 8.184 ;
; inputdata2[3] ; display[0]  ; 7.775 ; 7.612 ; 7.612 ; 7.775 ;
; inputdata2[3] ; display[1]  ; 8.179 ; 8.016 ; 8.016 ; 8.179 ;
; inputdata2[3] ; display[3]  ; 8.182 ; 8.019 ; 8.019 ; 8.182 ;
; inputdata2[3] ; display[4]  ; 8.240 ; 8.077 ; 8.077 ; 8.240 ;
; inputdata2[3] ; display[6]  ; 7.914 ; 7.751 ; 7.751 ; 7.914 ;
; operator[1]   ; display[0]  ; 7.484 ; 7.578 ; 7.578 ; 7.484 ;
; operator[1]   ; display[1]  ; 7.888 ; 7.982 ; 7.982 ; 7.888 ;
; operator[1]   ; display[3]  ; 7.891 ; 7.985 ; 7.985 ; 7.891 ;
; operator[1]   ; display[4]  ; 7.949 ; 8.043 ; 8.043 ; 7.949 ;
; operator[1]   ; display[6]  ; 7.623 ; 7.717 ; 7.717 ; 7.623 ;
; operator[2]   ; display[0]  ; 7.232 ; 7.397 ; 7.397 ; 7.232 ;
; operator[2]   ; display[1]  ; 7.636 ; 7.801 ; 7.801 ; 7.636 ;
; operator[2]   ; display[3]  ; 7.639 ; 7.804 ; 7.804 ; 7.639 ;
; operator[2]   ; display[4]  ; 7.697 ; 7.862 ; 7.862 ; 7.697 ;
; operator[2]   ; display[6]  ; 7.371 ; 7.536 ; 7.536 ; 7.371 ;
+---------------+-------------+-------+-------+-------+-------+


+---------------------------------------------------------------------------+
; Setup Transfers                                                           ;
+---------------+---------------+----------+----------+----------+----------+
; From Clock    ; To Clock      ; RR Paths ; FR Paths ; RF Paths ; FF Paths ;
+---------------+---------------+----------+----------+----------+----------+
; inputdata1[0] ; inputdata1[0] ; 0        ; 16       ; 6        ; 22       ;
; operator[0]   ; inputdata1[0] ; 16       ; 16       ; 23       ; 23       ;
; inputdata1[0] ; operator[0]   ; 15       ; 31       ; 14       ; 30       ;
; operator[0]   ; operator[0]   ; 32       ; 32       ; 32       ; 32       ;
+---------------+---------------+----------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


+---------------------------------------------------------------------------+
; Hold Transfers                                                            ;
+---------------+---------------+----------+----------+----------+----------+
; From Clock    ; To Clock      ; RR Paths ; FR Paths ; RF Paths ; FF Paths ;
+---------------+---------------+----------+----------+----------+----------+
; inputdata1[0] ; inputdata1[0] ; 0        ; 16       ; 6        ; 22       ;
; operator[0]   ; inputdata1[0] ; 16       ; 16       ; 23       ; 23       ;
; inputdata1[0] ; operator[0]   ; 15       ; 31       ; 14       ; 30       ;
; operator[0]   ; operator[0]   ; 32       ; 32       ; 32       ; 32       ;
+---------------+---------------+----------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


+---------------------------------------------------------------------------+
; Recovery Transfers                                                        ;
+---------------+---------------+----------+----------+----------+----------+
; From Clock    ; To Clock      ; RR Paths ; FR Paths ; RF Paths ; FF Paths ;
+---------------+---------------+----------+----------+----------+----------+
; inputdata1[0] ; inputdata1[0] ; 8        ; 8        ; 8        ; 8        ;
; operator[0]   ; inputdata1[0] ; 8        ; 12       ; 8        ; 12       ;
; inputdata1[0] ; operator[0]   ; 8        ; 8        ; 8        ; 8        ;
; operator[0]   ; operator[0]   ; 8        ; 12       ; 9        ; 13       ;
+---------------+---------------+----------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


+---------------------------------------------------------------------------+
; Removal Transfers                                                         ;
+---------------+---------------+----------+----------+----------+----------+
; From Clock    ; To Clock      ; RR Paths ; FR Paths ; RF Paths ; FF Paths ;
+---------------+---------------+----------+----------+----------+----------+
; inputdata1[0] ; inputdata1[0] ; 8        ; 8        ; 8        ; 8        ;
; operator[0]   ; inputdata1[0] ; 8        ; 12       ; 8        ; 12       ;
; inputdata1[0] ; operator[0]   ; 8        ; 8        ; 8        ; 8        ;
; operator[0]   ; operator[0]   ; 8        ; 12       ; 9        ; 13       ;
+---------------+---------------+----------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


---------------
; Report TCCS ;
---------------
No dedicated SERDES Transmitter circuitry present in device or used in design


---------------
; Report RSKM ;
---------------
No dedicated SERDES Receiver circuitry present in device or used in design


+------------------------------------------------+
; Unconstrained Paths                            ;
+---------------------------------+-------+------+
; Property                        ; Setup ; Hold ;
+---------------------------------+-------+------+
; Illegal Clocks                  ; 0     ; 0    ;
; Unconstrained Clocks            ; 0     ; 0    ;
; Unconstrained Input Ports       ; 11    ; 11   ;
; Unconstrained Input Port Paths  ; 115   ; 115  ;
; Unconstrained Output Ports      ; 8     ; 8    ;
; Unconstrained Output Port Paths ; 83    ; 83   ;
+---------------------------------+-------+------+


+------------------------------------+
; TimeQuest Timing Analyzer Messages ;
+------------------------------------+
Info: *******************************************************************
Info: Running Quartus II 32-bit TimeQuest Timing Analyzer
    Info: Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
    Info: Processing started: Fri Nov 15 01:18:19 2019
Info: Command: quartus_sta ula -c ula
Info: qsta_default_script.tcl version: #1
Warning (20028): Parallel compilation is not licensed and has been disabled
Info (21077): Low junction temperature is 0 degrees C
Info (21077): High junction temperature is 85 degrees C
Warning (335093): TimeQuest Timing Analyzer is analyzing 8 combinational loops as latches.
Critical Warning (332012): Synopsys Design Constraints File file not found: 'ula.sdc'. A Synopsys Design Constraints File is required by the TimeQuest Timing Analyzer to get proper timing constraints. Without it, the Compiler will not properly optimize the design.
Info (332142): No user constrained base clocks found in the design. Calling "derive_clocks -period 1.0"
Info (332105): Deriving Clocks
    Info (332105): create_clock -period 1.000 -name inputdata1[0] inputdata1[0]
    Info (332105): create_clock -period 1.000 -name operator[0] operator[0]
Warning (332125): Found combinational loop of 4 nodes
    Warning (332126): Node "convdisplay_1|display[6]|datac"
    Warning (332126): Node "convdisplay_1|display[6]|combout"
    Warning (332126): Node "convdisplay_1|display[6]~5|datad"
    Warning (332126): Node "convdisplay_1|display[6]~5|combout"
Warning (332125): Found combinational loop of 4 nodes
    Warning (332126): Node "convdisplay_1|display[4]|datac"
    Warning (332126): Node "convdisplay_1|display[4]|combout"
    Warning (332126): Node "convdisplay_1|display[4]~4|datad"
    Warning (332126): Node "convdisplay_1|display[4]~4|combout"
Warning (332125): Found combinational loop of 4 nodes
    Warning (332126): Node "convdisplay_1|display[3]|datac"
    Warning (332126): Node "convdisplay_1|display[3]|combout"
    Warning (332126): Node "convdisplay_1|display[3]~3|datad"
    Warning (332126): Node "convdisplay_1|display[3]~3|combout"
Warning (332125): Found combinational loop of 4 nodes
    Warning (332126): Node "convdisplay_1|display[1]|datac"
    Warning (332126): Node "convdisplay_1|display[1]|combout"
    Warning (332126): Node "convdisplay_1|display[1]~2|datad"
    Warning (332126): Node "convdisplay_1|display[1]~2|combout"
Warning (332125): Found combinational loop of 4 nodes
    Warning (332126): Node "convdisplay_1|display[0]|datac"
    Warning (332126): Node "convdisplay_1|display[0]|combout"
    Warning (332126): Node "convdisplay_1|display[0]~1|datad"
    Warning (332126): Node "convdisplay_1|display[0]~1|combout"
Warning (332125): Found combinational loop of 4 nodes
    Warning (332126): Node "mux_1|ctrl[1]|combout"
    Warning (332126): Node "mux_1|ctrl[1]~7|datab"
    Warning (332126): Node "mux_1|ctrl[1]~7|combout"
    Warning (332126): Node "mux_1|ctrl[1]|datad"
Warning (332125): Found combinational loop of 2 nodes
    Warning (332126): Node "button|keyonoff~0|combout"
    Warning (332126): Node "button|keyonoff~0|datad"
Info (332097): The following timing edges are non-unate.  TimeQuest will assume pos-unate behavior for these edges in the clock network.
    Info (332098): Cell: mux_1|ctrl[1]~3  from: dataa  to: combout
    Info (332098): From: mux_1|ctrl[1]~7|datac  to: mux_1|ctrl[1]|combout
    Info (332098): Cell: mux_1|saida_led~6  from: datad  to: combout
Info: Found TIMEQUEST_REPORT_SCRIPT_INCLUDE_DEFAULT_ANALYSIS = ON
Info: Analyzing Slow Model
Critical Warning (332148): Timing requirements not met
Info (332146): Worst-case setup slack is -2.006
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -2.006        -9.231 operator[0] 
    Info (332119):    -0.596        -1.137 inputdata1[0] 
Info (332146): Worst-case hold slack is -1.912
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.912        -9.063 inputdata1[0] 
    Info (332119):    -0.721        -2.960 operator[0] 
Info (332146): Worst-case recovery slack is -0.168
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -0.168        -0.168 operator[0] 
    Info (332119):     1.092         0.000 inputdata1[0] 
Info (332146): Worst-case removal slack is -3.455
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -3.455        -6.910 inputdata1[0] 
    Info (332119):    -2.315        -5.305 operator[0] 
Info (332146): Worst-case minimum pulse width slack is -1.222
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.222        -1.222 inputdata1[0] 
    Info (332119):    -1.222        -1.222 operator[0] 
Info (332001): The selected device family is not supported by the report_metastability command.
Info: Analyzing Fast Model
Info (332097): The following timing edges are non-unate.  TimeQuest will assume pos-unate behavior for these edges in the clock network.
    Info (332098): Cell: mux_1|ctrl[1]~3  from: dataa  to: combout
    Info (332098): From: mux_1|ctrl[1]~7|datac  to: mux_1|ctrl[1]|combout
    Info (332098): Cell: mux_1|saida_led~6  from: datad  to: combout
Critical Warning (332148): Timing requirements not met
Info (332146): Worst-case setup slack is -0.570
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -0.570        -1.986 operator[0] 
    Info (332119):     0.032         0.000 inputdata1[0] 
Info (332146): Worst-case hold slack is -0.905
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -0.905        -5.251 inputdata1[0] 
    Info (332119):    -0.437        -2.602 operator[0] 
Info (332146): Worst-case recovery slack is 0.332
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):     0.332         0.000 operator[0] 
    Info (332119):     1.103         0.000 inputdata1[0] 
Info (332146): Worst-case removal slack is -1.828
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.828        -3.655 inputdata1[0] 
    Info (332119):    -1.343        -2.994 operator[0] 
Info (332146): Worst-case minimum pulse width slack is -1.222
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.222        -1.222 inputdata1[0] 
    Info (332119):    -1.222        -1.222 operator[0] 
Info (332001): The selected device family is not supported by the report_metastability command.
Info (332102): Design is not fully constrained for setup requirements
Info (332102): Design is not fully constrained for hold requirements
Info: Quartus II 32-bit TimeQuest Timing Analyzer was successful. 0 errors, 38 warnings
    Info: Peak virtual memory: 305 megabytes
    Info: Processing ended: Fri Nov 15 01:18:19 2019
    Info: Elapsed time: 00:00:00
    Info: Total CPU time (on all processors): 00:00:01


