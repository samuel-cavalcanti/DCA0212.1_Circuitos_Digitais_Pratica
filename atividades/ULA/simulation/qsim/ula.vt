// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2019 00:08:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_sample_tst(
	inputdata1,
	inputdata2,
	keyonoff,
	operate0,
	operate1,
	operate2,
	sampler_tx
);
input [3:0] inputdata1;
input [3:0] inputdata2;
input  keyonoff;
input  operate0;
input  operate1;
input  operate2;
output sampler_tx;

reg sample;
time current_time;
always @(inputdata1 or inputdata2 or keyonoff or operate0 or operate1 or operate2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ula_vlg_check_tst (
	co,
	ctrl,
	y,
	sampler_rx
);
input  co;
input [1:0] ctrl;
input [3:0] y;
input sampler_rx;

reg  co_expected;
reg [1:0] ctrl_expected;
reg [3:0] y_expected;

reg  co_prev;
reg [1:0] ctrl_prev;
reg [3:0] y_prev;

reg  co_expected_prev;
reg [1:0] ctrl_expected_prev;
reg [3:0] y_expected_prev;

reg  last_co_exp;
reg [1:0] last_ctrl_exp;
reg [3:0] last_y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	co_prev = co;
	ctrl_prev = ctrl;
	y_prev = y;
end

// update expected /o prevs

always @(trigger)
begin
	co_expected_prev = co_expected;
	ctrl_expected_prev = ctrl_expected;
	y_expected_prev = y_expected;
end



// expected co
initial
begin
	co_expected = 1'bX;
end 
// expected ctrl[ 1 ]
initial
begin
	ctrl_expected[1] = 1'bX;
end 
// expected ctrl[ 0 ]
initial
begin
	ctrl_expected[0] = 1'bX;
end 
// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
end 
// generate trigger
always @(co_expected or co or ctrl_expected or ctrl or y_expected or y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected co = %b | expected ctrl = %b | expected y = %b | ",co_expected_prev,ctrl_expected_prev,y_expected_prev);
	$display("| real co = %b | real ctrl = %b | real y = %b | ",co_prev,ctrl_prev,y_prev);
`endif
	if (
		( co_expected_prev !== 1'bx ) && ( co_prev !== co_expected_prev )
		&& ((co_expected_prev !== last_co_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port co :: @time = %t",  $realtime);
		$display ("     Expected value = %b", co_expected_prev);
		$display ("     Real value = %b", co_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_co_exp = co_expected_prev;
	end
	if (
		( ctrl_expected_prev[0] !== 1'bx ) && ( ctrl_prev[0] !== ctrl_expected_prev[0] )
		&& ((ctrl_expected_prev[0] !== last_ctrl_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_expected_prev);
		$display ("     Real value = %b", ctrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ctrl_exp[0] = ctrl_expected_prev[0];
	end
	if (
		( ctrl_expected_prev[1] !== 1'bx ) && ( ctrl_prev[1] !== ctrl_expected_prev[1] )
		&& ((ctrl_expected_prev[1] !== last_ctrl_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_expected_prev);
		$display ("     Real value = %b", ctrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ctrl_exp[1] = ctrl_expected_prev[1];
	end
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] inputdata1;
reg [3:0] inputdata2;
reg keyonoff;
reg operate0;
reg operate1;
reg operate2;
// wires                                               
wire co;
wire [1:0] ctrl;
wire [3:0] y;

wire sampler;                             

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.co(co),
	.ctrl(ctrl),
	.inputdata1(inputdata1),
	.inputdata2(inputdata2),
	.keyonoff(keyonoff),
	.operate0(operate0),
	.operate1(operate1),
	.operate2(operate2),
	.y(y)
);
// inputdata1[ 3 ]
initial
begin
	inputdata1[3] = 1'b0;
end 
// inputdata1[ 2 ]
initial
begin
	inputdata1[2] = 1'b1;
end 
// inputdata1[ 1 ]
initial
begin
	inputdata1[1] = 1'b1;
end 
// inputdata1[ 0 ]
initial
begin
	inputdata1[0] = 1'b1;
end 
// inputdata2[ 3 ]
initial
begin
	inputdata2[3] = 1'b0;
end 
// inputdata2[ 2 ]
initial
begin
	inputdata2[2] = 1'b0;
end 
// inputdata2[ 1 ]
initial
begin
	inputdata2[1] = 1'b0;
end 
// inputdata2[ 0 ]
initial
begin
	inputdata2[0] = 1'b1;
end 

// keyonoff
initial
begin
	keyonoff = 1'b1;
end 

// operate0
initial
begin
	operate0 = 1'b0;
end 

// operate1
initial
begin
	operate1 = 1'b0;
end 

// operate2
initial
begin
	operate2 = 1'b0;
end 

ula_vlg_sample_tst tb_sample (
	.inputdata1(inputdata1),
	.inputdata2(inputdata2),
	.keyonoff(keyonoff),
	.operate0(operate0),
	.operate1(operate1),
	.operate2(operate2),
	.sampler_tx(sampler)
);

ula_vlg_check_tst tb_out(
	.co(co),
	.ctrl(ctrl),
	.y(y),
	.sampler_rx(sampler)
);
endmodule

