// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2019 15:21:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    register_bank
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_bank_vlg_sample_tst(
	index,
	input_data,
	read_option,
	write_option,
	sampler_tx
);
input [3:0] index;
input [7:0] input_data;
input [7:0] read_option;
input  write_option;
output sampler_tx;

reg sample;
time current_time;
always @(index or input_data or read_option or write_option)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module register_bank_vlg_check_tst (
	output_data,
	sampler_rx
);
input [7:0] output_data;
input sampler_rx;

reg [7:0] output_data_expected;

reg [7:0] output_data_prev;

reg [7:0] output_data_expected_prev;

reg [7:0] last_output_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_data_prev = output_data;
end

// update expected /o prevs

always @(trigger)
begin
	output_data_expected_prev = output_data_expected;
end


// expected output_data[ 7 ]
initial
begin
	output_data_expected[7] = 1'bX;
end 
// expected output_data[ 6 ]
initial
begin
	output_data_expected[6] = 1'bX;
end 
// expected output_data[ 5 ]
initial
begin
	output_data_expected[5] = 1'bX;
end 
// expected output_data[ 4 ]
initial
begin
	output_data_expected[4] = 1'bX;
end 
// expected output_data[ 3 ]
initial
begin
	output_data_expected[3] = 1'bX;
end 
// expected output_data[ 2 ]
initial
begin
	output_data_expected[2] = 1'bX;
end 
// expected output_data[ 1 ]
initial
begin
	output_data_expected[1] = 1'bX;
end 
// expected output_data[ 0 ]
initial
begin
	output_data_expected[0] = 1'bX;
end 
// generate trigger
always @(output_data_expected or output_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output_data = %b | ",output_data_expected_prev);
	$display("| real output_data = %b | ",output_data_prev);
`endif
	if (
		( output_data_expected_prev[0] !== 1'bx ) && ( output_data_prev[0] !== output_data_expected_prev[0] )
		&& ((output_data_expected_prev[0] !== last_output_data_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp[0] = output_data_expected_prev[0];
	end
	if (
		( output_data_expected_prev[1] !== 1'bx ) && ( output_data_prev[1] !== output_data_expected_prev[1] )
		&& ((output_data_expected_prev[1] !== last_output_data_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp[1] = output_data_expected_prev[1];
	end
	if (
		( output_data_expected_prev[2] !== 1'bx ) && ( output_data_prev[2] !== output_data_expected_prev[2] )
		&& ((output_data_expected_prev[2] !== last_output_data_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp[2] = output_data_expected_prev[2];
	end
	if (
		( output_data_expected_prev[3] !== 1'bx ) && ( output_data_prev[3] !== output_data_expected_prev[3] )
		&& ((output_data_expected_prev[3] !== last_output_data_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp[3] = output_data_expected_prev[3];
	end
	if (
		( output_data_expected_prev[4] !== 1'bx ) && ( output_data_prev[4] !== output_data_expected_prev[4] )
		&& ((output_data_expected_prev[4] !== last_output_data_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp[4] = output_data_expected_prev[4];
	end
	if (
		( output_data_expected_prev[5] !== 1'bx ) && ( output_data_prev[5] !== output_data_expected_prev[5] )
		&& ((output_data_expected_prev[5] !== last_output_data_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp[5] = output_data_expected_prev[5];
	end
	if (
		( output_data_expected_prev[6] !== 1'bx ) && ( output_data_prev[6] !== output_data_expected_prev[6] )
		&& ((output_data_expected_prev[6] !== last_output_data_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp[6] = output_data_expected_prev[6];
	end
	if (
		( output_data_expected_prev[7] !== 1'bx ) && ( output_data_prev[7] !== output_data_expected_prev[7] )
		&& ((output_data_expected_prev[7] !== last_output_data_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp[7] = output_data_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module register_bank_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] index;
reg [7:0] input_data;
reg [7:0] read_option;
reg write_option;
// wires                                               
wire [7:0] output_data;

wire sampler;                             

// assign statements (if any)                          
register_bank i1 (
// port map - connection between master ports and signals/registers   
	.index(index),
	.input_data(input_data),
	.output_data(output_data),
	.read_option(read_option),
	.write_option(write_option)
);
// index[ 3 ]
initial
begin
	index[3] = 1'b0;
end 
// index[ 2 ]
initial
begin
	index[2] = 1'b0;
end 
// index[ 1 ]
initial
begin
	index[1] = 1'b0;
end 
// index[ 0 ]
initial
begin
	index[0] = 1'b0;
end 
// input_data[ 7 ]
initial
begin
	input_data[7] = 1'b0;
end 
// input_data[ 6 ]
initial
begin
	input_data[6] = 1'b0;
end 
// input_data[ 5 ]
initial
begin
	input_data[5] = 1'b0;
end 
// input_data[ 4 ]
initial
begin
	input_data[4] = 1'b0;
end 
// input_data[ 3 ]
initial
begin
	input_data[3] = 1'b1;
end 
// input_data[ 2 ]
initial
begin
	input_data[2] = 1'b0;
end 
// input_data[ 1 ]
initial
begin
	input_data[1] = 1'b1;
end 
// input_data[ 0 ]
initial
begin
	input_data[0] = 1'b0;
end 
// read_option[ 7 ]
initial
begin
	read_option[7] = 1'b1;
end 
// read_option[ 6 ]
initial
begin
	read_option[6] = 1'b1;
end 
// read_option[ 5 ]
initial
begin
	read_option[5] = 1'b1;
end 
// read_option[ 4 ]
initial
begin
	read_option[4] = 1'b1;
end 
// read_option[ 3 ]
initial
begin
	read_option[3] = 1'b1;
end 
// read_option[ 2 ]
initial
begin
	read_option[2] = 1'b1;
end 
// read_option[ 1 ]
initial
begin
	read_option[1] = 1'b1;
end 
// read_option[ 0 ]
initial
begin
	read_option[0] = 1'b1;
end 

// write_option
initial
begin
	write_option = 1'b1;
end 

register_bank_vlg_sample_tst tb_sample (
	.index(index),
	.input_data(input_data),
	.read_option(read_option),
	.write_option(write_option),
	.sampler_tx(sampler)
);

register_bank_vlg_check_tst tb_out(
	.output_data(output_data),
	.sampler_rx(sampler)
);
endmodule

